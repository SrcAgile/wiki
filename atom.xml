<?xml version="1.0" encoding="utf-8"?>

  

<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://simiki.org/" version="1.6.2.1">Simiki</generator>
  <title>Meta's Wiki</title>
  <link href="/" />
  <link href="/atom.xml" rel="self" type="application/atom+xml" />
  <updated>2017-09-19T20:36:39+08:00</updated>
  <id></id>
  <author>
    <name>Guozhen Li</name>
  </author>
  
    
  <entry>
    <id>/Language/decorator.html</id>
    <title>装饰器模式DP</title>
    <link href="/Language/decorator.html" />
    <published>2017-08-26T21:00:00+08:00</published>

    
    <updated>2017-08-26T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=390258&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;问题起源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#uml&#34;&gt;UML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;普通装饰器&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;OOP中的装饰器模式;java曾经使用组合加继承实现过装饰器模式[这好像不值得写：）]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;_1&#34;&gt;介绍&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;[简.明]&lt;/strong&gt; 允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[界.限]&lt;/strong&gt; 在保持类方法签名完整性的前提下，提供了额外的功能[OOP]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[场.景]&lt;/strong&gt; 扩展一个类的功能/动态增加功能，动态撤销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[萌.物]&lt;/strong&gt;  孙悟空[本质不变,动态七十二变]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[缺.点]&lt;/strong&gt; 层层嵌套,过于复杂&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[优.点]&lt;/strong&gt; 无父类耦合问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[解.决]&lt;/strong&gt; 兄弟类们属性在同一维度相斥没必要都添加进子类使子类膨胀，也没必要各立山头&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[身.份]&lt;/strong&gt; 继承的替身&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;_2&#34;&gt;问题起源&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;InputStream inputStream = new BufferedInputStream(new FileInputStream(filePath));&lt;/code&gt;&lt;br /&gt;
QAQ？看不懂咩～那别往下看了&lt;br /&gt;
&lt;strong&gt;来自网络的释义&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;装饰器模式&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;主要用于为对象动态的添加功能&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。比如说，最简单的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;使用可能是如下代码：&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filePath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;但是我们发现，这个代码&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;每次进行读取都会进行&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;一次&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;是比较耗费时间的。&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;那么有没有什么方法降低&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;次数呢，自然想到了缓冲。那么此时有两种做法：&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;定义一个&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;专门用于缓冲的文件读写&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;为&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;类进行扩展，让它支持&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;缓冲。&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;肯定是第二种好，为什么呢。因为如果你按照&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;方案，&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;假如我要定义一个支持&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;功能，此时要定义一个&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;专门用于这个功能的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，这个没有问题；&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;假如我又要定义一个支持&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;功能，此时要定义一个专门用于这个功能的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，这个也没有问题；&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;但是，假如我要定义一个&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;同时支持&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;功能，由于不能扩展，所以你必须再定义一个类，同时支持&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;功能。这个就有问题了，问题就是重复了。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;但是，&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;方案就能解决这个问题，&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;方案中当你需要一个同时支持&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;功能的类，那你动态扩展便是了，不用再新定义一个类，同时支持&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XY&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;这个就是装饰器模式的好处。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;uml&#34;&gt;UML&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; left:80px; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/decorator.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;why&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;要搞这么复杂呢，就是为了以后可以更好的扩展。像很多技术我们都知道它的原理，但是你看它们的源码，异常的捕获，各种检测，健壮性，扩展性，别人都考虑得很全，而且已经&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;下来了。&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Talk&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cheap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;me&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;回到这个图，再对应着下面这个代码说：&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedInputStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filePath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Component&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：相当于&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Java&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;中很多的流都是继承于&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。也就是一个基础组件。&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ConcreteComponent&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：相当于&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，一个基础组件的实现。&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Decorator&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：所有具体装饰器类的抽象父类，在&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Java&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;包中&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对应的是&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FilterInputStream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ConcreteDecorator&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：具体的装饰者。相当于&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BufferedInputStream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_3&#34;&gt;普通装饰器&lt;/h3&gt;
&lt;h4 id=&#34;python&#34;&gt;Python&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decorator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keywords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;        &lt;span class=&#34;c&#34;&gt;#代码装饰&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keywords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;注意line4 和 line5的return区别，一个返回的是对象，一个返回的是引用，所以无论外边再包几个高级函数&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;java&#34;&gt;Java&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;#定义&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// The Window interface class&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Draws the Window&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Returns a description of the Window&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// implementation of a simple Window without any scrollbars&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SimpleWindow&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Draw window&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;simple window&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// abstract decorator class - note that it implements Window&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;WindowDecorator&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoratedWindow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// the Window being decorated&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;WindowDecorator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoratedWindow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;decoratedWindow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoratedWindow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;// The first concrete decorator which adds vertical scrollbar functionality&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;VerticalScrollBar&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WindowDecorator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;VerticalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;windowToBeDecorated&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;windowToBeDecorated&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;drawVerticalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;drawVerticalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Draw the vertical scrollbar&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;, including vertical scrollbars&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;// The second concrete decorator which adds horizontal scrollbar functionality&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HorizontalScrollBar&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WindowDecorator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;HorizontalScrollBar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;windowToBeDecorated&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;windowToBeDecorated&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;drawHorizontalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;drawHorizontalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Draw the horizontal scrollbar&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;, including horizontal scrollbars&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;#测试&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// for print descriptions of the window subclasses&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;description:&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// original SimpleWindow&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;SimpleWindow&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SimpleWindow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// HorizontalScrollBar  mixed Window&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;HorizontalScrollBar&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hbw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HorizontalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hbw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// VerticalScrollBar mixed Window&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;VerticalScrollBar&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vbw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;VerticalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hbw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vbw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;#结果&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;description:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simple&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;description:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simple&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;including&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;horizontal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scrollbars&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;description:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simple&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;including&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;horizontal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scrollbars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;including&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vertical&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scrollbars&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/windows/visualProgram01.html</id>
    <title>[windows纲]api编程</title>
    <link href="/windows/visualProgram01.html" />
    <published>2017-08-31T21:00:00+08:00</published>

    
    <updated>2017-08-31T21:00:00+08:00</updated>
    

    
    <category term="windows" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;电脑维修中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;沉浸在思想的牢笼里.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;b style=&#34;color:red&#34;&gt;电脑维修中,只能先备份了...&lt;/b&gt;&lt;br /&gt;
windows 编程是基于消息驱动的,当消息到来时,应用程序就调用消息映射函数,但他是如何做到的？&lt;br /&gt;
    - [乱答]这个应该是把消息的调用方提升给了操作系统,操作系统驱动API？&lt;br /&gt;
    - 找到答案了，果然出现了控制权的移交&lt;br /&gt;
&lt;code&gt;在程序执行时,系统会创建一个能控制他运行的数据结构,叫做pcb,pcb不断的查询消息队列&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;一旦出现消息,就会根据相应的消息号去调用消息映射函数&lt;/code&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Life/emotion-sum.html</id>
    <title>情绪概论</title>
    <link href="/Life/emotion-sum.html" />
    <published>2017-08-26T19:00:00+08:00</published>

    
    <updated>2017-08-26T19:00:00+08:00</updated>
    

    
    <category term="Life" />
    

    
    <content type="html">&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情绪&lt;/strong&gt;，是对一系列主观认知经验的通称，是多种感觉、思想和行为综合产生的心理和生理状态。&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%83%85%E7%BB%AA&#34;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;包含&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a&gt;情绪&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a&gt;钦佩&lt;/a&gt; &lt;a&gt;爱意&lt;/a&gt; &lt;a&gt;畏&lt;/a&gt; &lt;a&gt;躁动&lt;/a&gt; &lt;a&gt;疼痛&lt;/a&gt; &lt;a&gt;滑稽&lt;/a&gt; &lt;a&gt;愤怒&lt;/a&gt; &lt;a&gt;精神痛苦&lt;/a&gt; &lt;a&gt;烦恼&lt;/a&gt; &lt;a&gt;焦虑&lt;/a&gt; &lt;a&gt;冷漠&lt;/a&gt; &lt;a&gt;警醒&lt;/a&gt; &lt;a&gt;人际吸引力&lt;/a&gt; &lt;a&gt;敬畏&lt;/a&gt; &lt;a&gt;厌烦&lt;/a&gt; &lt;a&gt;冷静&lt;a/&gt; &lt;a&gt;同情&lt;/a&gt; &lt;a&gt;轻视&lt;/a&gt; &lt;a&gt;满足&lt;/a&gt; &lt;a&gt;失败主义&lt;/a&gt; &lt;a&gt;抑郁&lt;/a&gt; &lt;a&gt;绝望&lt;/a&gt; &lt;a&gt;欲望&lt;/a&gt; &lt;a&gt;失望&lt;/a&gt; &lt;a&gt;厌恶&lt;/a&gt; &lt;a&gt;狂喜&lt;/a&gt; &lt;a&gt;尴尬&lt;/a&gt; &lt;a&gt;同理心&lt;/a&gt; &lt;a&gt;注意&lt;/a&gt; &lt;a&gt;热心&lt;/a&gt; &lt;a&gt;羡慕&lt;/a&gt; &lt;a&gt;欣快&lt;/a&gt; &lt;a&gt;兴奋&lt;/a&gt; &lt;a&gt;恐惧&lt;/a&gt; &lt;a&gt;挫折&lt;/a&gt; &lt;a&gt;感恩&lt;/a&gt; &lt;a&gt;丧恸&lt;/a&gt; &lt;a&gt;罪恶感&lt;/a&gt; &lt;a&gt;快乐&lt;/a&gt; &lt;a&gt;仇恨&lt;/a&gt; &lt;a&gt;思乡病&lt;/a&gt; &lt;a&gt;希望&lt;/a&gt; &lt;a&gt;恐怖 (Horror and terror)&lt;/a&gt; &lt;a&gt;敌意&lt;/a&gt; &lt;a&gt;羞辱&lt;/a&gt; &lt;a&gt;歇斯底里&lt;/a&gt; &lt;a&gt;迷恋&lt;/a&gt; &lt;a&gt;不安&lt;/a&gt; &lt;a&gt;侮辱&lt;/a&gt; &lt;a&gt;兴趣&lt;/a&gt; &lt;a&gt;应激性&lt;/a&gt; &lt;a&gt;孤立&lt;/a&gt; &lt;a&gt;妒忌&lt;/a&gt; &lt;a&gt;欢乐&lt;/a&gt; &lt;a&gt;孤单&lt;/a&gt; &lt;a&gt;爱&lt;/a&gt; &lt;a&gt;贪念&lt;/a&gt; &lt;a&gt;忧郁&lt;/a&gt; &lt;a&gt;物哀&lt;/a&gt; &lt;a&gt;忽视&lt;/a&gt; &lt;a&gt;怀旧&lt;/a&gt; &lt;a&gt;恐慌&lt;/a&gt; &lt;a&gt;激情&lt;/a&gt; &lt;a&gt;可惜&lt;/a&gt; &lt;a&gt;愉快&lt;/a&gt; &lt;a&gt;骄傲&lt;/a&gt;  &lt;a&gt;傲慢&lt;/a&gt;   &lt;a&gt;暴怒&lt;/a&gt; &lt;a&gt;后悔&lt;/a&gt; &lt;a&gt;排挤&lt;/a&gt; &lt;a&gt;悔恨&lt;/a&gt; &lt;a&gt;不满&lt;/a&gt; &lt;a&gt;报复&lt;/a&gt; &lt;a&gt;悲伤&lt;/a&gt; &lt;a&gt;萨乌达德&lt;/a&gt; &lt;a&gt;幸灾乐祸&lt;/a&gt; &lt;a&gt;怀念&lt;/a&gt; &lt;a&gt;感伤&lt;/a&gt; &lt;a&gt;羞耻&lt;/a&gt; &lt;a&gt;急性压力反应&lt;/a&gt; &lt;a&gt;害羞&lt;/a&gt; &lt;a&gt;忧伤&lt;/a&gt; &lt;a&gt;恼怒&lt;/a&gt; &lt;a&gt;压力&lt;/a&gt; &lt;a&gt;痛苦&lt;/a&gt; &lt;a&gt;惊讶&lt;/a&gt; &lt;a&gt;同感 (Sympathy)&lt;/a&gt; &lt;a&gt;慢性压力&lt;/a&gt; &lt;a&gt;好奇&lt;/a&gt; &lt;a&gt;担心&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/About/aboutMe.html</id>
    <title>关于我</title>
    <link href="/About/aboutMe.html" />
    <published>2017-08-25T21:00:00+08:00</published>

    
    <updated>2017-08-25T21:00:00+08:00</updated>
    

    
    <category term="About" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;技能树&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;面向机器&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#8086&#34;&gt;8086汇编&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;面向过程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#c&#34;&gt;C语言&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;面向对象&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#c_1&#34;&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#python&#34;&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;面向领域&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sql&#34;&gt;SQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskell&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;系统&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;编辑排版&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#markdown&#34;&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#latex&#34;&gt;Latex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#html5css&#34;&gt;HTML5+CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;计算&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_12&#34;&gt;计算的模型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_13&#34;&gt;图灵机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_14&#34;&gt;元细胞自动机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_15&#34;&gt;可计算理论&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_16&#34;&gt;停机问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_17&#34;&gt;计算的复杂性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; left:80px; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/student.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;br /&gt;
  &lt;p style=&#34;position:relative; left:80px;text-align:center&#34;&gt;&lt;br /&gt;
    &lt;b&gt;Name&lt;/b&gt;:Li Guo Zhen&lt;br /&gt;
    &lt;b&gt;Profession&lt;/b&gt;:student&lt;br /&gt;
    &lt;b&gt;Sex&lt;/b&gt;:male&lt;br /&gt;
  &lt;/p&gt;&lt;/p&gt;
&lt;h2 id=&#34;_1&#34;&gt;技能树&lt;/h2&gt;
&lt;h3 id=&#34;_2&#34;&gt;语言&lt;/h3&gt;
&lt;h4 id=&#34;_3&#34;&gt;面向机器&lt;/h4&gt;
&lt;h5 id=&#34;8086&#34;&gt;8086汇编&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;仅仅停留在王爽《汇编语言》读完水平&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_4&#34;&gt;面向过程&lt;/h4&gt;
&lt;h5 id=&#34;c&#34;&gt;C语言&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;略微精通&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;操作以及系统级调用&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_5&#34;&gt;面向对象&lt;/h4&gt;
&lt;h5 id=&#34;java&#34;&gt;Java&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;曾建设类似天猫网站&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;完成&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Oracle&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;数据库的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;管理应用&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Java&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;虚拟机、线程、正则表达式的熟练程度不够&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;c_1&#34;&gt;C++&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;普通应用&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;python&#34;&gt;python&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;开发出爬虫&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;局域网扫描&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;擅长很多模块&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_6&#34;&gt;面向领域&lt;/h4&gt;
&lt;h5 id=&#34;_7&#34;&gt;正则表达式&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对其数学原理有所深入&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;造完轮子再更新&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;sql&#34;&gt;SQL&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;了解并会简单使用&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sql&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;注入&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;可以再应用层次防范低级注入&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;haskell&#34;&gt;Haskell&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;浅读设计哲学&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_8&#34;&gt;系统&lt;/h3&gt;
&lt;h4 id=&#34;windows&#34;&gt;Windows&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;中等玩家&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;停留在解决&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dll&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;与注册表问题层次&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;linux&#34;&gt;Linux&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;中等玩家&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;日常办公&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_9&#34;&gt;算法&lt;/h3&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;较为深入了解递归思想&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;擅长树、图、数组的操作&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;熟练算法的效率分析&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ACMing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_10&#34;&gt;编辑排版&lt;/h3&gt;
&lt;h4 id=&#34;markdown&#34;&gt;Markdown&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;十分熟练&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;latex&#34;&gt;Latex&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;菜鸟一只&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;html5css&#34;&gt;HTML5+CSS&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;略微擅长&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_11&#34;&gt;计算&lt;/h3&gt;
&lt;h4 id=&#34;_12&#34;&gt;计算的模型&lt;/h4&gt;
&lt;h5 id=&#34;_13&#34;&gt;图灵机&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;略微了解&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;_14&#34;&gt;元细胞自动机&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;略微了解&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_15&#34;&gt;可计算理论&lt;/h4&gt;
&lt;h5 id=&#34;_16&#34;&gt;停机问题&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;可以十分简单的证明&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_17&#34;&gt;计算的复杂性&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;未曾涉足&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;&#34;&gt;未完待续&lt;/a&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/SE/softwareengine01.html</id>
    <title>软件工程</title>
    <link href="/SE/softwareengine01.html" />
    <published>2017-09-07T21:00:00+08:00</published>

    
    <updated>2017-09-07T21:00:00+08:00</updated>
    

    
    <category term="SE" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;外围概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#qusetion&#34;&gt;QUSETION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;软件生存期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;外围概念&lt;/h3&gt;
&lt;p&gt;[WIKI]&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;原理&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;是存在于某个系统中的一组法律、规则与基本前提。这个体系中的其他事物，大体上都可以经由这个基本规律来推导、解释与预测；这个体系中的成员，都应该遵守这个基本规律，在这套规则下运作。经由了解这个体系的原理，可以了解到整个体系的基本特征，或是反映出这个体系被设计的目的。如果这个体系下的某个原理被忽略，可能造成体系无法运作，或是这个行为将无法达成其目的。&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;在哲学、数学及物理学中，都常使用这个名词。在数学中，以公理（&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Axiom&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）及逻辑基础作为整个数学体系的原理。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[BaiDu]&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;原理&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;自然科学和社会科学中具有普遍意义的基本规律。是在大量观察、实践的基础上，经过归纳、概括而得出的。既能指导实践，又必须经受实践的检验。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;qusetion&#34;&gt;QUSETION&lt;/h3&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;软件工程分为软件和工程&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;什么是软件？&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;软件开发有什么特性？&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;什么是软件工程？&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;为什么要建立软件工程学科？&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;既然引入软件工程去解决问题&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;那么它的目标是什么？&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;为了实现这些目标它有什么原理支撑？&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_2&#34;&gt;软件生存期&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;践行软件工程基本原理的第一条&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;按软件生存周期分阶段指定计划并认真实施&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;括号内代表任务&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件定义(任务:做什么)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题定义&lt;/li&gt;
&lt;li&gt;可行性研究&lt;br /&gt;
&lt;code&gt;任务细化:到底解决什么问题,不要把你的计算机牵扯进来,钱和时间都给了限制能不能在这种情况下开发出来,需要职员:软件分析员，一个软件行不行,要从好多角度看,在大学编程,看起来就像基础技术是否具备,课设截止时间是否能够做出来？但是在社会上仍需要考虑法律,宗教(在对方是穆斯林餐厅的话,你带入猪肉,那就玩完了),还有用户是否具有学会操作的本领()等等，&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;需求分析&lt;br /&gt;
&lt;code&gt;任务细化:我的系统应该干什么？建立起从问题空间到解空间的映射，看个人的建模能力了,这里需要建立分析模型,从功能数据行为等方面去描述系统的静态特性和动态特性,对目标系统进一步细化,当然软件工程会给你提供参考&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;功能需求&lt;/li&gt;
&lt;li&gt;非功能需求[性能等等]    &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件开发(任务:怎么做)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;概要设计&lt;/li&gt;
&lt;li&gt;详细设计&lt;br /&gt;
&lt;code&gt;设计是软件工程的技术核心&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;任务细化:如何做出目标系统,这里具体做的就是将需求转化为相应的软件体系结构,结构中的每一组成部分都必须是意义明确的构件,这就是概要设计。进而描述构建应该做什么,以及做事的顺序这就是详细设计，基于设计编写出单元测试计划和集成测试计划提交评审部门。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编码&lt;br /&gt;
&lt;code&gt;选择一门好的语言会事半功倍&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;测试&lt;br /&gt;
&lt;code&gt;单元模块测试,调试排错,保持与设计一致，与编码出现迭代&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;集成测试&lt;br /&gt;
&lt;code&gt;已测试模块组装&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;系统测试&lt;br /&gt;
&lt;code&gt;需求检测是否满足用户需求&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;维护(任务:使软件持久的满足用户需要)&lt;br /&gt;
&lt;code&gt;最浪费人力物力&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改正性维护&lt;/li&gt;
&lt;li&gt;适应性维护&lt;/li&gt;
&lt;li&gt;完善性维护&lt;/li&gt;
&lt;li&gt;预防性维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;什么是软件危机&lt;br /&gt;
&lt;code&gt;分两个方面,软件本身与设计者&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Life/Study.html</id>
    <title>学习学习</title>
    <link href="/Life/Study.html" />
    <published>2017-09-06T21:00:00+08:00</published>

    
    <updated>2017-09-06T21:00:00+08:00</updated>
    

    
    <category term="Life" />
    

    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;真知在何处？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;err&#34;&gt;您现在看到的是在我写完大约几百字之后又全部删掉重写的文字&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;值得一提的是这篇文章也许对我很重要&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;但如果有作为初入&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cs&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的学生倒是不妨一览&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;2015&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;年我踏入大学校门&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;阴差阳错的进入计算机&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;没有理想&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对大学一无所知&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;即使高中当别人给我介绍各种大学的好处的时候&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我仍然会认为那是一个充满严谨学术的地方&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;学生们可以有自己的研究方向&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;身边的朋友都会是你以后的得力助手并且校园很大&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;当然&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;这不是本科的面貌&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;在高中阶段我一直追求的是智力上的卓越与炫耀&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;每当考试完交出一份差不多合格的答卷并且引来一阵惊呼&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;他每天睡觉还能考这么高的分数,真是个天才&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;年幼无知&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;被虚荣捧上天&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;数学课堂上的日上三竿&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;老师恨铁不成钢的眼神&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;不屑英语的学习&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;认为那绝非我等理科生应该学习的垃圾东西&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;不屑于去做模拟试卷&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;认为那不是真正获得的能力&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我要凭着自己对知识的理解去解答所有的高中所遇到的问题&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;果不其然&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;除了数学&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;错的一塌糊涂&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;现在身边仍然有一些人平时一直玩游戏&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;或者平时办事就很马虎&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;一到考试出现各种问题&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;然后会推脱的说要不是我玩游戏&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我就×××××，要不是我粗心大意我就&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;....,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;事实上这和高中的我没什么区别，我认为已经&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;左右的人了，仍然把智力作为学习的第一要素&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;而忽略细心&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;坚持，有理想，有计划各种美好的品格，这样的人以后无论是在学术界还是在商界&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;政界都不会有出色的成就的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;当然这仅仅是我认为&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;因为大多数的成名的或者默默无闻的扫地僧已经在&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;岁左右展现出来了卓越的号召力&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;处事能力以及思考问题的刁钻手段，古人谚语一遍又一遍的被引用但是“人贵自知”这句话总是不被人听到心里去。&lt;/span&gt;

  &lt;span class=&#34;err&#34;&gt;刚进入大学时&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对计算机的了解停留在连&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;都不知道怎么打开的小白水平&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;现在的我算不上水平高&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;但也算在计算机专业领域有了一个可以赖以生存的水平&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;具体细节在这里不愿意透漏&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;但是仔细的说非姚班计算机&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;在理解水平与对计算机的认知水平上能比我强的很少&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;当然你可能认为我在吹牛&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我没必要解释&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;因为我懒得解释。当然这里又牵扯出了我的致命威胁&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;动手能力&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;抽象能力&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;也许在很多人眼里&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我的动手水平不错&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;至少能做出他们做不出的东西&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;无论是编码规范上还是结构组织亦或者是奇技淫巧上都表现出略胜一筹的状态&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;事实上&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我驱动了灵感为我卖命&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;也许听起来不可思议&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;但是事实就是如此，当我没心没肺的水上一个下午的时候，我的灵感就会喷薄而出&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;天马行空胡思乱想，对任何事物都有自己的见解&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;企图宏观上去理解世界&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;虽然没有成功过，但至少在写代码上它给我反馈了很多信息&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;但是灵感似乎不是我的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;下一次我再也不会出现相同的灵感&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;每当我用完它我就会陷入深深的思考死循环中&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;倘若有一天我的灵感不存在了怎么办&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我该用什么去创造东西&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;于是我试图将灵感经验化&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;每当新的思路出现后&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我就会在第一时间去思考他是怎么来的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我会什么会出现这种思考方式&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我如何保存这种思考方式&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;也许你看见我在一个你认为简简单单的问题上踱步不行的话&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;那时我在建立经验&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我是个理性主义者&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;从来不相信想法会无中生有&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;灵感不过是大脑对已有数据的提取与再加工&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;除此之外&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我有很多&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;比如&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;319&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;房间和&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;311&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;房间之间隔着几间房子&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;这种特别简单的事情我会用&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;301&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;与&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;302&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的简例去类比推广&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我有很多类比推广的结果但是他们都没有在我脑子里&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;作为分析与整合外界知识的强有力后台&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;现在我终于学会了如何将它们添加到大脑中。&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;如果你看懂了以上并学会去做你会在思想水平上有本质的提高&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我还有很多要写,但今天到此为止.&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/编码/进制.html</id>
    <title>进制介绍</title>
    <link href="/编码/进制.html" />
    <published>2017-09-06T11:00:00+08:00</published>

    
    <updated>2017-09-06T11:00:00+08:00</updated>
    

    
    <category term="编码" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;编码让少量的数据存储大量的信息.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;计算机进制&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;进制的转换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;谈谈语言中的进制转换&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;_1&#34;&gt;计算机进制&lt;/h2&gt;
&lt;p&gt;在 二进制,三进制,十进制的筛选中,选择了二进制,但这并不意味着二进制在某种程度上优于三进制&lt;/p&gt;
&lt;h3 id=&#34;_2&#34;&gt;进制的转换&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;b&gt;整数二进制转换&lt;/b&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;trans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;trans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;b&gt;纯小数二进制转换&lt;/b&gt;&lt;br /&gt;
设小数二进制为0.$a_1,a_2,a_3...a_n$&lt;br /&gt;
设小数十进制为0.$b_1,b_2,b_3...b_n$&lt;br /&gt;
转化十进制公式 $(2^{-1}\times(a_1+2^{-1}\times(a_2+2^{-1}\times(...))))$&lt;br /&gt;
所以&lt;br /&gt;
对于十进制纯小数来说&lt;br /&gt;
在公式层面每乘一次相当于拆一层外围括号,露出里面的部分&lt;br /&gt;
在二进制运算层面相当于左移一位,此时看一看小数点左边第一位就行,如果是1就写1,反之则反.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;如果,上述的介绍你没有理解,那么,我有专门提供的简单方法,但是这种方法是答案,原理并不是显而易见&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这种办法和我上面说的实质上是一样的,所以这个是我从网上找的例子,&lt;a&gt;版权问题请联系&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;以&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.5&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;转换为例，&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;转换后变为&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;10100&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;要转换二进制，需要乘&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;乘完之后&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;取整数部分，然后用乘的结果减去整数部分，&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;然后&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;接着乘&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;直至最后没有小数或者小数出现循环&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;即乘完&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;如果等于&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;就取前面不为&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的部分&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;（取&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;所以&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;转换后&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;所以&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.5&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;转换二进制后，&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10100.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;二进制&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;--------------------------------&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;再看一个浮点数&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.3&lt;/span&gt;
 &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10100&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;二进制&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.2&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.4&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.8&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.8&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.6&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;计算到这里，&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将再出现&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;进入循环了，所以，结果&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.010011001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1001&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;所以&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;20.3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10100.010011001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1001&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;二进制&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_3&#34;&gt;谈谈语言中的进制转换&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;java&#34;&gt;Java&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;仅在次怀念怎么都学不好的zz们&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Float_Double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f_v1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;  
        &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f_v2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.3f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;  
        &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f_v3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.5f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;  

        &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_v1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;  
        &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_v2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;  
        &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_v3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f_v1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_v1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)?&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f_v2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_v2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;  
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f_v3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_v3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我看了一秒说出true,false,true时,学弟由等待出糗的表情变成了吃鲸...&lt;br /&gt;
他癫狂的说在Java中&lt;br /&gt;
float 占四个字节&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;符号位&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;指数位&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;尾数位&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1位&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;占8位&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;占23位&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;double 占8个字节&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;符号位&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;指数位&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;尾数位&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1位&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;占11位&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;占52位&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;先把20.5转化为二进制数,对于float来说,指数的值加127存入指数位,尾数为看着补零放入&lt;br /&gt;
对于double来说,指数的值加1023存入指数位,尾数为看着补零放入&lt;br /&gt;
在转型比较时,指数恢复原型减去127和减去1023,8位的指数位前面补三个0后进行指数位比较&lt;br /&gt;
23位的尾数位在后面补29个0,再进行尾数比较&lt;br /&gt;
这样才能算出啊=_=|&lt;/p&gt;
&lt;p&gt;&lt;b&gt;听到这里我突然震惊了,0.3循环左移出现死循环永远移不完,而0.5移一次就行,肯定会在20.3转型时出现循环截断,那时候再往后面补0肯定是不会匹配的,一看就是20.3肯定不行,20.5肯定行&lt;/b&gt;&lt;br /&gt;
他还狡辩到你这是对数据的不尊重,不适用严谨的无误的逻辑去推理.&lt;br /&gt;
&lt;b&gt;大概是你还不了解什么是工程吧.&lt;/b&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/web/flask01.html</id>
    <title>Flask</title>
    <link href="/web/flask01.html" />
    <published>2017-09-07T21:00:00+08:00</published>

    
    <updated>2017-09-07T21:00:00+08:00</updated>
    

    
    <category term="web" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=144199&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;fuck&#34;&gt;&amp;gt;无FUCK说&lt;/h2&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#fuck&#34;&gt;&amp;gt;无FUCK说&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#mmp&#34;&gt;MMP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;设计杂论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#918-post&#34;&gt;9/18 Post&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;&lt;b style=&#39;color:red&#39;&gt;已解决&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;&lt;b style=&#39;color:red&#39;&gt;待解决&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;基础不稳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;mmp&#34;&gt;MMP&lt;/h3&gt;
&lt;p&gt;我刚学,有很多问题...&lt;/p&gt;
&lt;h3 id=&#34;_1&#34;&gt;设计杂论&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;关于在flask中request对象的概念定位&lt;br /&gt;
作为单次参数传递给视图函数的话,每个视图函数都要写,如果增加其他对象,增加了了调用的混乱度,如果设置成全局变量的话,在多线程服务器中是不可能的,毕竟每个线程都会处理不同的request对象,作为全局对象,无法实现多线程,所以flask引入context(上下文)控制request在单个线程里面称为全局对象.&lt;br /&gt;
对于上面的话,目前我还有一部分&lt;b style=&#39;color:red&#39;&gt;疑问&lt;/b&gt;&lt;br /&gt;
context 有点像缓冲区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;请求调度 路由指定请求方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四种钩子 java类似监视器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;918-post&#34;&gt;9/18 Post&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;本次主要是注重实践,在一下午看完了前四章,还没来的及吸收&lt;br /&gt;
开发工具: VIM&lt;br /&gt;
语言选择: PY&lt;br /&gt;
模板选择: Jinja2&lt;br /&gt;
模块选择: python_script, python_bootstrap, python_mement,flask_wtf&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;del&gt;我说这么多屁话干嘛&lt;/del&gt;&lt;/del&gt;&lt;/p&gt;
&lt;h4 id=&#34;_2&#34;&gt;信息&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Flask 中有两种上下文:程序上下文和请求上下文&lt;br /&gt;
&lt;code&gt;Flask 在分发请求之前激活(或推送)程序和请求上下文,请求处理完成后再将其删除。程序上下文被推送后,就可以在线程中使用 current_app 和 g 变量。类似地,请求上下文被推送后,就可以使用 request 和 session 变量。如果使用这些变量时我们没有激活程序上下文或请求上下文,就会导致错误。&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;flask&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_app&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
&lt;span class=&#34;ne&#34;&gt;RuntimeError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;working&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outside&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;application&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app_ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app_ctx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app_ctx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;#在程序实例上调用 app.app_context() 可获得一个程序上下文&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;b style=&#39;color:red&#39;&gt;至于为什么输出hello,我们以后解释&lt;b&gt;&lt;/p&gt;
&lt;h4 id=&#34;_3&#34;&gt;使用&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;先用Flask创造一个app对象&lt;br /&gt;
&lt;code&gt;Flask初始化参数必须只有一个指定的参数,即程序主模块或包的名字&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Flask 用这个参数决定程序的根目录,以便稍后能够找到相对于程
序根目录的资源文件位置&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为了灵活使用app.run(),我们加入&lt;b style=&#39;color:yellow&#39;&gt;python_script&lt;/b&gt;&lt;br /&gt;
&lt;code&gt;看看Moment对app进行的劳动改造&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Moment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init_app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init_app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;extensions&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;moment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_moment&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_processor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_processor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;context_processor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#39;moment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;moment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;moment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;动态url匹配的路由&lt;b style=&#39;color:red&#39; id=&#39;tro001&#39;&gt;存在问题&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;nd&#34;&gt;@app.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;/user/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;% s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;!&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
  &lt;span class=&#34;c&#34;&gt;#这三个name必须都是一样的变量名吗?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;请求 - 响应循环&lt;/li&gt;
&lt;li&gt;程序和请求上下文&lt;br /&gt;
&lt;code&gt;Flask 从客户端收到请求时,要让视图函数能访问一些对象,这样才能处理请求。请求对象就是一个很好的例子,它封装了客户端发送的 HTTP 请求。&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Flask 使用上下文临时把某些对象变为全局可访问。有了上下文,就可以写出下面的视图函数:&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;flask&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;
  &lt;span class=&#34;nd&#34;&gt;@app.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;user_agent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;Your browser is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;% s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_agent&lt;/span&gt;

  &lt;span class=&#34;o&#34;&gt;//===============================================&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;事实上&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;不可能是&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;全局变量。试想&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;在多线程服务器中&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;多个线程同时处理不同客户端发送的不同请求时&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;每个线程看到的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对象必然不同。&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Falsk&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;使用上下文让特定的变量在一个线程中全局可访问&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;与此同时却不会干扰其他线程。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_4&#34;&gt;&lt;b style=&#39;color:red&#39;&gt;已解决&lt;/b&gt;&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;the flowing&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39; __main__ &amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;是&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的惯常用法&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;在这里确保直接执行这个脚本时才启动开发&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Web&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;服务器。如果这个脚本由其他脚本引入&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;程序假定父级脚本会启动不同的服务器&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;因此不会执行&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;。只有真正执行到才会运行哦&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;所以经常用来做测试&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我以前说过&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_5&#34;&gt;&lt;b style=&#39;color:red&#39;&gt;待解决&lt;/b&gt;&lt;/h3&gt;
&lt;h4 id=&#34;_6&#34;&gt;基础不稳&lt;/h4&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;import的加载问题&lt;/li&gt;
&lt;li&gt;不太理解每一个工程目录下的隐式的__init__文件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tro001&#34;&gt;使用顺序-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;current_app是什么?&lt;/del&gt;&lt;br /&gt;
&lt;code&gt;当前激活程序的程序实例&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;current_app有什么用?&lt;/li&gt;
&lt;/ol&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/前景分析/pattern.html</id>
    <title>模式识别</title>
    <link href="/前景分析/pattern.html" />
    <published>2017-08-26T21:00:00+08:00</published>

    
    <updated>2017-08-26T21:00:00+08:00</updated>
    

    
    <category term="前景分析" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=356034&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;写在开始&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;什么是模式识别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;百度指数查询&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;国内谷歌搜索指数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;国外谷歌搜索指数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;相关查询&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;前景&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;众说纷纭[注意讨论问题年份]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;网络声音&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;个人见解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;待遇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_12&#34;&gt;专业相关硕士博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;_1&#34;&gt;写在开始&lt;/h2&gt;
&lt;p&gt;&lt;b style=&#39;color:red&#39;&gt;本文涉及外链，如有数据显示问题，请自备梯子(VPN)&lt;/b&gt;&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;什么是模式识别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://phddreamer.blog.163.com/blog/static/18993409620117384646629&#34;&gt;模式识别科学发展与现状(1.介绍) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://phddreamer.blog.163.com/blog/static/18993409620117384850365/&#34;&gt;模式识别科学发展与现状(2.模式识别四种方法)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://phddreamer.blog.163.com/blog/static/1899340962011738515345/&#34;&gt;模式识别科学发展与现状(3.成就)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://phddreamer.blog.163.com/blog/static/18993409620117385234298/&#34;&gt;模式识别科学发展与现状(4.展望)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://phddreamer.blog.163.com/blog/static/18993409620117385437506/&#34;&gt;模式识别科学发展与现状(5.挑战)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://phddreamer.blog.163.com/blog/static/18993409620117385625772/&#34;&gt;模式识别科学发展与现状(6.结束语)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关会议:CVPR[PR即为模式识别]&lt;/li&gt;
&lt;li&gt;流行：20世纪70年代和80年代&lt;/li&gt;
&lt;li&gt;强调:如何让一个计算机程序去做一些看起来很“智能”的事情,例如数字识别&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_3&#34;&gt;百度指数查询&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://index.baidu.com/&#34;&gt;自行输入关键字&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_4&#34;&gt;国内谷歌搜索指数&lt;/h2&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://ssl.gstatic.com/trends_nrtr/1127_RC02/embed_loader.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
  trends.embed.renderExploreWidget(&#34;TIMESERIES&#34;, {&#34;comparisonItem&#34;:[{&#34;keyword&#34;:&#34;模式识别&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;},{&#34;keyword&#34;:&#34;机器学习&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;},{&#34;keyword&#34;:&#34;深度学习&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;}],&#34;category&#34;:0,&#34;property&#34;:&#34;&#34;}, {&#34;exploreQuery&#34;:&#34;date=2004-01-01 2017-08-27&amp;q=%E6%A8%A1%E5%BC%8F%E8%AF%86%E5%88%AB,%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0,%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&#34;,&#34;guestPath&#34;:&#34;https://trends.google.com:443/trends/embed/&#34;});
&lt;/script&gt;

&lt;p&gt;&lt;center&gt;&lt;code&gt;2014.1-2017.8的统计数据&lt;/code&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;_5&#34;&gt;国外谷歌搜索指数&lt;/h2&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://ssl.gstatic.com/trends_nrtr/1127_RC02/embed_loader.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
  trends.embed.renderExploreWidget(&#34;TIMESERIES&#34;, {&#34;comparisonItem&#34;:[{&#34;keyword&#34;:&#34;pattern recognition&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;},{&#34;keyword&#34;:&#34;machine learning&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;},{&#34;keyword&#34;:&#34;deep learning&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;}],&#34;category&#34;:0,&#34;property&#34;:&#34;&#34;}, {&#34;exploreQuery&#34;:&#34;date=2004-01-01 2017-08-27&amp;q=pattern%20recognition,machine%20learning,deep%20learning&#34;,&#34;guestPath&#34;:&#34;https://trends.google.com:443/trends/embed/&#34;});
&lt;/script&gt;

&lt;p&gt;&lt;center&gt;&lt;code&gt;2014.1-2017.8的统计数据&lt;/code&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;_6&#34;&gt;相关查询&lt;/h2&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://ssl.gstatic.com/trends_nrtr/1127_RC02/embed_loader.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
  trends.embed.renderExploreWidget(&#34;RELATED_QUERIES_0&#34;, {&#34;comparisonItem&#34;:[{&#34;keyword&#34;:&#34;pattern recognition&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;},{&#34;keyword&#34;:&#34;machine learning&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;},{&#34;keyword&#34;:&#34;deep learning&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;}],&#34;category&#34;:0,&#34;property&#34;:&#34;&#34;}, {&#34;exploreQuery&#34;:&#34;date=2004-01-01 2017-08-27&amp;q=pattern%20recognition,machine%20learning,deep%20learning&#34;,&#34;guestPath&#34;:&#34;https://trends.google.com:443/trends/embed/&#34;});
&lt;/script&gt;

&lt;p&gt;&lt;center&gt;&lt;code&gt;2014.1-2017.8的统计数据&lt;/code&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;_7&#34;&gt;前景&lt;/h2&gt;
&lt;h3 id=&#34;_8&#34;&gt;众说纷纭[注意讨论问题年份]&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thinkface.cn/thread-3312-1-1.html&#34;&gt;浅谈模式识别/图像处理方向的就业前景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ihowandwhy.com/z/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%93%E4%B8%9A%E8%AF%BB%E7%A0%94%E6%96%B9%E5%90%91%E7%9A%84%E9%80%89%E6%8B%A9(%E5%8F%8C%E6%8E%A7or%E6%A8%A1%E5%BC%8F%E8%AF%86%E5%88%AB)&#34;&gt;双控or模式识别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.leiphone.com/news/201610/XhSks5O93JVgrjjA.html&#34;&gt;大数据时代的模式识别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_9&#34;&gt;网络声音&lt;/h3&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;旧&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;文&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我也是学模式识别的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;但是研究方向是遥感图像处理和识别&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;总的来说这个方向是比较专&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;但也是目前图像处理中比较难做的一个方向&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;因为遥感图像的复杂性超过我们所见过的任何图像&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;其实谈到就业问题&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我觉得如果研究方向比较适合&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;特别是读研期间能到斑竹谈的那些牛比的公司实习&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;了解企业真正需要的方向可能做起来有目标性&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[Quora.社论]&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;What&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;about&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;recognition?&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;What‘s&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;funture&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;about&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;recognition?&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;答案少之又少&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_10&#34;&gt;个人见解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;b style=&#39;color:red&#39;&gt;见解并不一定对&lt;/b&gt;]模式识别的温度并不算高,基于算法底蕴，就业貌似多数转向算法工程师&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_11&#34;&gt;待遇&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://zhaopin.baidu.com/quanzhi?query=%E6%A8%A1%E5%BC%8F%E8%AF%86%E5%88%AB&amp;amp;city=%E5%8C%97%E4%BA%AC&#34;&gt;百度招聘.北京&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lagou.com/jobs/list_模式识别?labelWords=&amp;amp;fromSearch=true&amp;amp;suginput=&#34;&gt;拉勾网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_12&#34;&gt;专业相关硕士博客&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://johnhany.net/about/&#34;&gt;岳翰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://liaoxl.github.io/about/&#34;&gt;廖祥俐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/java01.html</id>
    <title>[java纲]Java(一)</title>
    <link href="/Language/java01.html" />
    <published>2017-09-02T21:00:00+08:00</published>

    
    <updated>2017-09-02T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;完备的系统在演变中浑然天成,要想在系统中添加新的功能,必须能够忍受带来的递归增长的问题.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;草稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;构造器&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;功能需求&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;基本类型的重载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#this&#34;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;清理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;再谈初始化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;构造器初始化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;数组的初始化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;枚举类型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;草稿&lt;/h3&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;###混乱中&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对象的存储&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;存储方式&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;位置&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;基本类型存储在栈&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;自己创建的对象存储在堆&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;堆的速度慢&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;栈的速度快&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;栈要求知道生命周期&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;堆不需要知道生命周期以便操作栈指针&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;老师说生命周期并不是一个软件一个对象死了&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;而是指他该做的已经做了&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;他已经对现有系统没用了&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对于软件来说&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;他的功能已经不足以现在的系统&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;他的生命周期已经结束了&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;所以你要经常维护他&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;让他成长&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;他的生命才会存在，并且生命周期一直会延长着&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;插入题外话&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;现在要搜索结构化开发与面向对象开发的比较&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;###知识点&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;基本类型使用频繁&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;如果放入堆区难免影响速度&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;故放入栈区&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;新概念：包装基本类型&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;###策略&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;性能换功能&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;速度换精度&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;包装类型&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BigInteger&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;和&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BigDecimal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_2&#34;&gt;构造器&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;为了安全性考虑,java引入了构造器,不可避免的制定了目标,并在解空间建模之后,就要进行迭代的概要设计与详细设计&lt;/p&gt;
&lt;h4 id=&#34;_3&#34;&gt;功能需求&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;能够防止与其他方法重名&lt;/li&gt;
&lt;li&gt;编译器自动调用,既然不能硬编码&lt;br /&gt;
&lt;code&gt;解决方案:那就和类一个名字吧&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;并且不能有返回类型,因为返回了编译期也没办法处理,毕竟返回值的处理不好泛化&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提出新的需求,考虑到一个对象的初始化有很多方式,引入重载&lt;br /&gt;
&lt;code&gt;没办法再加一个功能吧,反正大家也都能用,又不是只让构造器用&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;既然重载了,就把我上一章提到的方法签名拿出来吧&lt;br /&gt;
&lt;code&gt;参数列表就是方法签名&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;参数的顺序&lt;/li&gt;
&lt;li&gt;参数的多少&lt;/li&gt;
&lt;li&gt;参数的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为什么不用返回值来作为签名信息之一&lt;br /&gt;
&lt;code&gt;当只是使用方法的副作用的时候,而不是使用返回值会出现歧义。例如: f();请问是哪一个f(), int f() or void f()?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_4&#34;&gt;基本类型的重载&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;基本类型由于具有隐式的向上转型,致使很多人在调用时出错&lt;br /&gt;
&lt;code&gt;记住以下的介绍的就行,基本类型默认匹配参数一致的,对于直接数来说,整数为int为参数一致,只能向上转型,不能向下转型,毕竟信息可以丢失但不能缺失&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;this&#34;&gt;this&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;类方法如何确定来的是哪个对象的调用,其实这句话我也不知道自己说的对不对,a.hello(),b.hello();hello怎么确定它前面是a还是b，解决这个问题我认为有两种,另外如果我想在构造器中调用构造器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将类方法代码复制一份到对象自己的私有空间,对象在私有空间对其进行调用,我认为这样不好&lt;/li&gt;
&lt;li&gt;在调用的时候应该隐式的将对象的唯一标识传入方法即&lt;b&gt;this&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b style=&#39;color:red&#39;&gt;待解决:到底类的方法会不会复制一份到对象的独立区域&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对了,值得一提,this能够消除歧义&lt;/p&gt;
&lt;h3 id=&#34;_5&#34;&gt;清理&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;以前看了看垃圾回收器的作用,发现了一个问题,垃圾回收只能操作new出来的对象,万一脑子一抽不用new申请出一块特殊内存,垃圾回收器不知道怎么回收,那不出现内存泄漏了么？对此java引入了新的机制,finalize(),我把它称为”终结者“笑:-D&lt;br /&gt;
这里谈一谈垃圾回收器的强调&lt;br /&gt;
1. 垃圾回收器代表不了析构函数，之所以会用垃圾回收器是因为java贪图安全防止内存泄漏&lt;br /&gt;
一旦回收器准备释放某一部分空间时,他会先调用其finalize方法,然后在等到其应该执行回收动作的时候再进行真正的释放.所以说finalize并没有在真正的意义上将对象释放.&lt;br /&gt;
回收器开始工作时,垃圾不一定会被回收,因为垃圾回收器也占有一定的开销,冒昧的使用只会增大系统的浪费,所以在使用finalize方法时要注意,就像是声明要去做一样，但是不一定去做,如果去做了,一定会做完。&lt;/p&gt;
&lt;h3 id=&#34;_6&#34;&gt;再谈初始化&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;注意java和c++在指定初始化的不同&lt;br /&gt;
&lt;code&gt;对于类成员的初始化,java可以直接指定赋值,而c++不行&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;java&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//正确&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//正确&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//正确&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//正确&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;方法的引用可以是无序的&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;所以&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;和&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;调换位置是不影响的&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;但是参数的使用必须是有序的所以&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;不能和&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;换位&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;   &lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//错误&lt;/span&gt;
     &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//错误&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_7&#34;&gt;构造器初始化&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;涉及到初始化顺序&lt;/code&gt;&lt;br /&gt;
&lt;center&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/initial.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&#34;_8&#34;&gt;数组的初始化&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;创建方式[见后面文章 new {}]&lt;/li&gt;
&lt;li&gt;基本类型的数组元素会自动被初始化为空值&lt;/li&gt;
&lt;li&gt;自定义类型的数组元素会自动被初始化为空引用&lt;/li&gt;
&lt;li&gt;产生一维数组的可打印版本,不用迭代了&lt;ul&gt;
&lt;li&gt;Arrays.toString()&lt;br /&gt;
&lt;code&gt;使用Arrays.toString(数组引用)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用初始化列表&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;   &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//作为参数&lt;/span&gt;
   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;happy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;可变参数列表&lt;br /&gt;
&lt;code&gt;十分不赞同使用可变参数列表,毕竟有重载&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;自己去了解老版的使用方式&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Object...args&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;原理,编译器将参数组合为数组然后传递,所以要注意转型问题&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;但是可变参数带来了重载的复杂性&lt;br /&gt;
有人说类型不是自动匹配吗,遇见相同的类型为最佳匹配,遇见较低的不匹配,遇见较高的向上转型,但是很多人忽略了一个问题,那就是没有参数的传递,到底该调用那个,在前面的重载中,我们以参数的可控长度重载方法,那时候我们知道,如果参数值长度是0的话,就要去找相应参数长度的重载方法,但是可变参数的引用搅乱了方法签名,以至于参数的长度与顺序均不起效,一旦参数的长度与顺序均不奇效,那么一旦出现参数的长度与顺序与以前不同的调用就出现了歧义,那么bug就出现了.&lt;br /&gt;
比如 &lt;code&gt;f()&lt;/code&gt;,我特喵不知道该调用哪个重载的函数啊.&lt;br /&gt;
出现问题就要解决问题,为了防止参数长度与参数顺序的bug,首先要在书写重载方法时防范,对于固定类型的参数列表写一个就行了,除非有固定参数,因为0个参数不仅带来参数长度问题还带来参数类型问题,所以我们也是加一个固定类型的参数放在前面进行防范.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_9&#34;&gt;枚举类型&lt;/h3&gt;
&lt;hr /&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emun&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;circle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ONE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;TWO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;THREE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;FOUR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;FIVE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SIX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SEVEN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;emun中定义的类方法&lt;ul&gt;
&lt;li&gt;values(所有的emun值集合)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;emun中定义的对象方法&lt;ul&gt;
&lt;li&gt;ordinal(每个值的序号 ONE-&amp;gt;0,TWO-&amp;gt;2...)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;可以使用在Switch&lt;/strong&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Algorithm/Intro.html</id>
    <title>算法起引</title>
    <link href="/Algorithm/Intro.html" />
    <published>2017-09-06T21:00:00+08:00</published>

    
    <updated>2017-09-06T21:00:00+08:00</updated>
    

    
    <category term="Algorithm" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;设计的魅力在于能让人在枯燥中感受快乐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;什么是算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;数学化描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;图书推荐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;前言&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;本来我是不想写关于算法类的介绍的,原因很简单,我不想分享知识,这不是自私的原因,而是懒得去做,设计本身就是很复杂的东西,设计一个算法就像是在微分方程一样,没有固定的解法,不一定有解法[&lt;b&gt;可计算性&lt;/b&gt;],但是如果仅仅是为了结果去设计,人总会陷入漫长的枯燥中,真正的设计者享受着设计的每一个过程,像是认真捏造一个细碎的星星,企图窥探银河的壮观,那是一种特殊的感受,无法用语言描述,总而言之很壮观,很美丽,那么到底是什么驱动了我的书写,一个是知识的系统化,另一个是来自开源社区的共享精神,可以说互联网思维吧笑：),但愿每一个看过这些东西的算法爱好者能感受其中的魅力,自认为在抒情方面的语言组织能力不够好,所以废话不多说。&lt;/p&gt;
&lt;h3 id=&#34;_2&#34;&gt;什么是算法&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;有限性&lt;/li&gt;
&lt;li&gt;可行性&lt;/li&gt;
&lt;li&gt;输入&lt;/li&gt;
&lt;li&gt;输出&lt;/li&gt;
&lt;li&gt;确定性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;满足以上特性的叫做算法.&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;有限是指算法中的指令不能是没有边界的数量&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;没有边界就像死循环一样&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;如何让产生答案&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;如果一个算法缺少有限性只能叫做计算方法&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;确定性是指每一个基本步骤必须是无歧义的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;不能出现让执行机器为难的事情，程序语言就是用来干这个的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;输入&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;个输入或多个输入&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;输出&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;至少一个输出&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;可行性&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;运算的基本指令单位必须是充分的基本的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;比如你直接写一个函数求解常微分方程这就有点不合适了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上仅仅是基本的需求,在这些需求出现了之后,人开始发现,条条大路通罗马,一个问题有很多的解决方案,这么多方案哪个最好呢？就像是选美大赛,选美肯定有一定的标准,所以算法的比较也一定有自己的标准,标准很简单,时间复杂度与空间复杂度,鉴于硬件容量的迅猛发展,人们更倾向于时间复杂度,将其作为计算机世界的货币,无论是时间复杂度还是空间复杂度都可以被量化为performance,很多人把所有的赞誉都给了时间复杂度,其实如果不是空间复杂度的割肉,怎会在时间上取得那么多的好效果,自从得到了货币,有些人开始想着去购买东西,购买其他性能,购买其他功能,这不过是一场权衡的游戏,看谁能在context下做出更好的决策罢了.&lt;/p&gt;
&lt;h3 id=&#34;_3&#34;&gt;数学化描述&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;数学不好的可以绕行&lt;/code&gt;&lt;br /&gt;
按特性描述算法,果然不严谨,老师说过的既要有数学家的严谨又要有工程师的直觉,这句话果然很重要,作为数学的基石,不用集合描述都感觉是在浪费。&lt;br /&gt;
定义一个四元组 ($(Q,I,\Psi,f)$)&lt;br /&gt;
满足以下条件:&lt;br /&gt;
Q代表计算状态&lt;br /&gt;
I代表输入&lt;br /&gt;
$(\Psi)$代表输出&lt;br /&gt;
$(f)$代表计算规则&lt;br /&gt;
$(I\subset Q,\Psi\subset Q)$&lt;br /&gt;
$(\forall x_i \in \Psi,f(x_i)=x_i)$&lt;br /&gt;
对$(I)$中的任意一个x定义一个计算序列$(x_1,x_2,x_3...x_k)$&lt;br /&gt;
$(如果 k 是满足 f(x_k)\in \Psi 的最小值,那么必然存在f(x_k+n)=f(x_k))$&lt;/p&gt;
&lt;p&gt;&lt;b&gt;限制&lt;/b&gt;&lt;br /&gt;
$(\Psi)$不为空&lt;br /&gt;
$(f)$是基本充分的&lt;/p&gt;
&lt;h3 id=&#34;_4&#34;&gt;图书推荐&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://dl.download.csdn.net/down10/20150409/44c594f043b8cd70a1abe830abb4a7ca.pdf?response-content-disposition=attachment%3Bfilename%3D%22%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_%E5%8E%9F%E4%B9%A6%E7%AC%AC3%E7%89%88_CHS.pdf%22&amp;amp;OSSAccessKeyId=9q6nvzoJGowBj4q1&amp;amp;Expires=1505477606&amp;amp;Signature=a3Iz%2F1yCJjtdOL0ay84Xe%2Fjgczw%3D&amp;amp;user=mosao3725&amp;amp;sourceid=8577653&#34;&gt;算法导论.第三版&lt;/a&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Linux/inital.html</id>
    <title>linux概论</title>
    <link href="/Linux/inital.html" />
    <published>2017-08-30T21:00:00+08:00</published>

    
    <updated>2017-08-30T21:00:00+08:00</updated>
    

    
    <category term="Linux" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;维基百科讲过许多,过分谈论反倒是令人厌烦,为什么使用linux那是有原因的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[网评]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;谢谢网易云音乐让我知道真相.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=624751&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;h2 id=&#34;_1&#34;&gt;起始&lt;/h2&gt;
&lt;h3 id=&#34;_2&#34;&gt;认识&lt;/h3&gt;
&lt;p&gt;我是从大一开始接触linux的,在这个时间段也就是2015-2016,linux发行版早已经不是以前的交互性差,难以操纵的命令行模式,他也有了自己的开源图像引擎,开始有很多软件在他的平台上进行开发,金山、网易、各种著名IDE都在Linux有了自己的dev Branch,Linux早已经不再难学,鼠标交互,主题美化,游戏软件,连终端也不放过,linux看起来像一件艺术品,更小的内存需求,更完备的开发环境,更简洁的操作模式,我身边也有很多人投身于linux的”开发“中,然而这正是错误的开始,过于依赖于图形交互模式,就类似于学了一个类似的windows系统,到头来什么也不会,也许只是能在不懂的人面前装13,但是这如果是你学习的意义的话,linux没什么好学的.&lt;/p&gt;
&lt;h3 id=&#34;_3&#34;&gt;名词&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OpenGL&lt;/li&gt;
&lt;li&gt;Directx&lt;/li&gt;
&lt;li&gt;Unity&lt;/li&gt;
&lt;li&gt;opencv&lt;/li&gt;
&lt;li&gt;gnome&lt;/li&gt;
&lt;li&gt;kde&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gtk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;竟然有人搞混&lt;code&gt;&amp;gt;&lt;/code&gt;和&lt;code&gt;|&lt;/code&gt;，&lt;code&gt;&amp;gt;&lt;/code&gt;是用来重定向IO，&lt;code&gt;|&lt;/code&gt;是用来将数据作为参数流向管道的另一端&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/regex02.html</id>
    <title>regex(二)</title>
    <link href="/Language/regex02.html" />
    <published>2017-08-31T21:00:00+08:00</published>

    
    <updated>2017-08-31T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;思索中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;规律之外,无语无言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;术语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;常见&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;常用手段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;常见问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;实践心得&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;声明&lt;/h3&gt;
&lt;p&gt;以下实例均出自egrep所属流派(flavor),如果出现复制之后无法匹配,证明你...&lt;/p&gt;
&lt;h3 id=&#34;_2&#34;&gt;术语&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;正则[Regex]&lt;/li&gt;
&lt;li&gt;匹配[matching]&lt;/li&gt;
&lt;li&gt;元字符[metacharacter]&lt;/li&gt;
&lt;li&gt;流派[flavor]&lt;/li&gt;
&lt;li&gt;子表达式[subexpression]&lt;/li&gt;
&lt;li&gt;字符[character]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_3&#34;&gt;常见&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;量词&lt;ul&gt;
&lt;li&gt;? + *&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_4&#34;&gt;解决方案&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;重复出现 + *&lt;/li&gt;
&lt;li&gt;多选择  &lt;ul&gt;
&lt;li&gt;单位置 (|)&lt;ul&gt;
&lt;li&gt;不确定 .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;连续多位置 [...]  [^...] 集合与补集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可选择 ？&lt;/li&gt;
&lt;li&gt;高级手段&lt;ul&gt;
&lt;li&gt;反向匹配[看到了动态语言的影子]&lt;br /&gt;
&lt;code&gt;实现重复单词查询&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Ex: \&amp;lt;([A-Za-z]+) +\1\&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_5&#34;&gt;解析&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;()&lt;/code&gt;的原因&lt;ul&gt;
&lt;li&gt;限制多选结构&lt;/li&gt;
&lt;li&gt;分组&lt;/li&gt;
&lt;li&gt;捕获文本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;转义的三种情况&lt;ul&gt;
&lt;li&gt;元字符普通化&lt;/li&gt;
&lt;li&gt;普通字符元字符序列化&lt;/li&gt;
&lt;li&gt;除此之外被忽略掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_6&#34;&gt;常用手段&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;缩小问题空间&lt;br /&gt;
&lt;code&gt;color 与colour egrep &#39;(color|colour)&#39;----&#39;colo(u)?r&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正则表达式内部没有忽略大小写,想要忽略大小写从封装他的软件入手&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;egrep -i#忽略大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_7&#34;&gt;常见问题&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单词分界&lt;br /&gt;
&lt;code&gt;smallcat 与cat 但是我仅仅想要匹配单独的cat单词&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;解决:元字符序列 \&amp;lt;  \&amp;gt;类似单词版本的^$&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;使用:(\&amp;gt;cat\&amp;gt;)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;特性:遇见非英文字符直接认为是词首或者词尾&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;贪心匹配&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;提取引号内字符串&lt;br /&gt;
&lt;code&gt;&#34;[^&#34;]*&#34;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;美元金额&lt;br /&gt;
&lt;code&gt;\$[0-9]+(\.[0-9]+)?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;匹配HTTP URL&lt;br /&gt;
&lt;code&gt;\&amp;lt;(H|h)(T|t){2}(P|p)://[^ ]+\&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;html tag&lt;br /&gt;
&lt;code&gt;&#39;&amp;lt; *([a-z]+) *[^&amp;lt;&amp;gt;\/]*&amp;gt;.*&amp;lt;/\1&amp;gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;匹配时间&lt;br /&gt;
&lt;code&gt;下次有时间补上&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_8&#34;&gt;实践心得&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;* +&lt;/code&gt;的对象大都是空格&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/java03.html</id>
    <title>[java纲]Java(三)</title>
    <link href="/Language/java03.html" />
    <published>2017-09-02T21:00:00+08:00</published>

    
    <updated>2017-09-02T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;完备的系统在演变中浑然天成,要想在系统中添加新的功能,必须能够忍受带来的递归增长的问题.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;浮点数存储&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;浮点数存储&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JAVA中的浮点数是如何存储的？&lt;br /&gt;
见本站&lt;a href=&#34;../编码/进制.html&#34;&gt;进制&lt;/a&gt;讨论&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/BS4.html</id>
    <title>数据采集</title>
    <link href="/Language/BS4.html" />
    <published>2017-08-27T23:00:00+08:00</published>

    
    <updated>2017-08-27T23:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=28872586&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;&lt;b style=&#39;color:#580000&#39;&gt;Intro&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#objectbeautifulsoup&#34;&gt;&lt;b style=&#39;color:#580000&#39;&gt;Object[BeautifulSoup]&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;&lt;b style=&#39;color:#700000&#39;&gt;构造参数&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#encode&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Encode&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parser&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Parser&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parse_only&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;parse_only&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#attribute&#34;&gt;&lt;b style=&#39;color:#700000&#39;&gt;Attribute&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#method&#34;&gt;&lt;b style=&#39;color:#700000&#39;&gt;Method&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#normal&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Normal&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#search&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Search&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#traversal&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Traversal&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;&lt;b style=&#39;color:#580000&#39;&gt;周末放映室&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;intro&#34;&gt;&lt;b style=&#39;color:#580000&#39;&gt;Intro&lt;/b&gt;&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choose&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bs4&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;objectbeautifulsoup&#34;&gt;&lt;b style=&#39;color:#580000&#39;&gt;Object[BeautifulSoup]&lt;/b&gt;&lt;/h2&gt;
&lt;h3 id=&#34;_1&#34;&gt;&lt;b style=&#39;color:#700000&#39;&gt;构造参数&lt;/b&gt;&lt;/h3&gt;
&lt;h4 id=&#34;encode&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Encode&lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;输入编码其实可以自动检测,但是不一定准哦,输出指定UTF8&lt;/code&gt;&lt;br /&gt;
- from_encoding[以文档指定的编码解析]&lt;code&gt;E:from_encoding=&#34;iso-8859-8&#34;&lt;/code&gt;&lt;br /&gt;
- exclude_encodings[排除编码]&lt;code&gt;E: exclude_encodings=[&#34;ISO-8859-7&#34;]&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;parser&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Parser&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;xml&lt;/li&gt;
&lt;li&gt;lxml[推荐]&lt;/li&gt;
&lt;li&gt;html5lib&lt;/li&gt;
&lt;li&gt;html.parser[内置]&lt;/li&gt;
&lt;li&gt;&lt;a&gt;差异比较&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;parse_only&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;parse_only&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;SoupStrainer对象&lt;ul&gt;
&lt;li&gt;SoupStrainer(&#34;TAG_NAME&#34;)&lt;/li&gt;
&lt;li&gt;SoupStrainer(id=&#39;##&#39;)[选择器]&lt;/li&gt;
&lt;li&gt;SoupStrainer(method引用)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;attribute&#34;&gt;&lt;b style=&#39;color:#700000&#39;&gt;Attribute&lt;/b&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;soup.tag-------------[&lt;a&gt;获得标签&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.tag[&#39;Attr&#39;]---[&lt;a&gt;获得键值&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.contents-----[&lt;a&gt;获得.descendants子节点&lt;code&gt;&amp;lt;html&amp;gt;#&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.children------[&lt;a&gt;获得子节点&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.descendants-[&lt;a&gt;获得子孙节点&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.strings-----[&lt;a&gt;文档去标签化&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.stripped_strings---[&lt;a&gt;忽略空行去标签化&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.parent------[&lt;a&gt;父节点NONE&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.original_encoding---[&lt;a&gt;模糊识别编码&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;method&#34;&gt;&lt;b style=&#39;color:#700000&#39;&gt;Method&lt;/b&gt;&lt;/h3&gt;
&lt;h4 id=&#34;normal&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Normal&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;soup.prettify([编码默认utf8])[&lt;a&gt;格式化输出&lt;/a&gt;] [&lt;a&gt;IO&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.get_text()---[&lt;a&gt;获得文本&lt;/a&gt;]&lt;ul&gt;
&lt;li&gt;soup.get_text(&#34;character&#34;)[tag之间character分割]&lt;/li&gt;
&lt;li&gt;soup.get_text(&#34;|&#34;, strip=True)[&lt;a&gt;以‘|’分割标签,移除空白&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;search&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Search&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;soup.new_tag(&#34;a&#34;, href=&#34;url&#34;)[&lt;a&gt;增加新标签&lt;/a&gt;] [&lt;a&gt;增&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.new_string(&#34;string&#34;, Comment)[&lt;a href=&#39;Comment&#39; style=&#39;color:green&#39;&gt;&lt;b&gt;Comment&lt;/b&gt;&lt;/a&gt;] [&lt;a&gt;添加注释&lt;/a&gt;] [&lt;a&gt;增&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.find_all(&#39;tag&#39;)---[查找.标签] [得到.列表] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.find(id=&#39;#&#39;)------[查找.定位] [得到.唯一] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;tag&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;直接查找&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;ul&gt;
&lt;li&gt;soup.select(&#34;tag1 tag2&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;逐层查找&lt;/a&gt;] [&lt;a&gt;tag1 的子孙是tag2皆可&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;tag1 &amp;gt; tag2&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;tag1的儿子tag2&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;#tag1 ~ .class&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;tag1的所有class兄弟&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;#tag1 + .class&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;tag1的紧邻的class兄弟&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;.class&#34;) [&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;所有的class节点&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;[class~=some_name]&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;&lt;b style=&#39;color:red&#39;&gt;忘了&lt;/b&gt;&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;#id&#34;) [&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;tag#id&#34;) [&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;#id1，#id2&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#39;a[href]&#39;)[&lt;a&gt;具有属性&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;ul&gt;
&lt;li&gt;soup.select(&#39;a[href=&#34;url&#34;]&#39;)[&lt;a&gt;确定指定属性值&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#39;a[href^=&#34;url&#34;]&#39;)[&lt;a&gt;属性值不为&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#39;a[href*=&#34;url&#34;]&#39;)[&lt;a&gt;局部匹配&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#39;a[href*=&#34;url&#34;]&#39;)[&lt;a&gt;局部匹配&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;soup.select_one(&#34;选择器&#34;)[&lt;a&gt;返回查找回的第一个&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;traversal&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Traversal&lt;/b&gt;&lt;/h4&gt;
&lt;h2 id=&#34;_2&#34;&gt;&lt;b style=&#39;color:#580000&#39;&gt;周末放映室&lt;/b&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;没想到center标签不支持width属性,只能自定义&amp;lt;div&amp;gt;了&lt;/code&gt;&lt;br /&gt;
&lt;center &gt;&lt;br /&gt;
&lt;div style=&#34;width:644px&#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/Paprika.png&#34; /&gt;&lt;br /&gt;
&lt;/div&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br /&gt;
&lt;embed height=&#34;415&#34; width=&#34;644&#34; quality=&#34;high&#34; allowfullscreen=&#34;true&#34; type=&#34;application/x-shockwave-flash&#34; src=&#34;//static.hdslb.com/miniloader.swf&#34; flashvars=&#34;aid=4887477&amp;page=1&#34; pluginspage=&#34;//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash&#34;&gt;&lt;/embed&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Linux/config.html</id>
    <title>Sysconf-1</title>
    <link href="/Linux/config.html" />
    <published>2017-09-08T21:00:00+08:00</published>

    
    <updated>2017-09-08T21:00:00+08:00</updated>
    

    
    <category term="Linux" />
    

    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;致力学习到策略,而非限制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#linux&#34;&gt;linux配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;环境变量&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;查看&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;常见&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;使用语言&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;linux&#34;&gt;linux配置&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;配置是具有范围的,时效的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;_1&#34;&gt;环境变量&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_2&#34;&gt;分类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;生命周期&lt;br /&gt;
&lt;code&gt;永久的,修改配置文件生效&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;暂时的,使用export在shell生效&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;作用域&lt;br /&gt;
&lt;code&gt;系统环境变量,对所有用户生效&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;用户环境变量,对指定用户生效&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;当前shell&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_3&#34;&gt;配置&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;作用域:所有用户+生命周期:永久的&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;vim /etc/profile
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CLASSPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./JAVA_HOME/lib;&lt;span class=&#34;nv&#34;&gt;$JAVA_HOME&lt;/span&gt;/jre/lib
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; /etc/profile
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;作用域:当前用户+生命周期:永久的&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;vim ~/.bash.profile
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CLASSPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./JAVA_HOME/lib;&lt;span class=&#34;nv&#34;&gt;$JAVA_HOME&lt;/span&gt;/jre/lib
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.bash.profile
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;作用域:当前shell+生命周期:临时的&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CLASSPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./JAVA_HOME/lib;&lt;span class=&#34;nv&#34;&gt;$JAVA_HOME&lt;/span&gt;/jre/lib
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_4&#34;&gt;查看&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;#注意大小写&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_5&#34;&gt;常见&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;查看所有shell变量&lt;br /&gt;
&lt;code&gt;$ export&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看所有环境变量&lt;br /&gt;
&lt;code&gt;$ env&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PATH 指定命令的搜索路径&lt;br /&gt;
&lt;code&gt;$ export PATH=$PATH:/NEW/PATH&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_6&#34;&gt;使用语言&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;C语言&lt;/strong&gt;&lt;br /&gt;
- getenv()返回一个环境变量&lt;br /&gt;
- setenv()设置一个环境变量&lt;br /&gt;
- unsetenv()清除一个环境变量&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/About/computer.html</id>
    <title>做什么</title>
    <link href="/About/computer.html" />
    <published>2017-08-26T21:00:00+08:00</published>

    
    <updated>2017-08-26T21:00:00+08:00</updated>
    

    
    <category term="About" />
    

    
    <content type="html">&lt;p&gt;计算机的创造以及在其上一层又一层抽象的发展均是为解决问题而出现的,而非为创造问题的.&lt;br /&gt;
艰难的问题是原本存在的,但为了解决艰难的问题,所以使用分治的思想去拆分为大同小异的问题,但并非不可解决的.&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/regex03.html</id>
    <title>regex(三)</title>
    <link href="/Language/regex03.html" />
    <published>2017-09-08T21:00:00+08:00</published>

    
    <updated>2017-09-08T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;思索中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;规律之外,无语无言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#perl&#34;&gt;perl&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#904&#34;&gt;9/04更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#918&#34;&gt;9/18更新&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;perl&#34;&gt;perl&lt;/h3&gt;
&lt;h4 id=&#34;904&#34;&gt;9/04更新&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;简单掌握&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变量的特殊性 &lt;code&gt;$variable&lt;/code&gt;，面临引号输出也不会解体,除非转义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运算符的特殊性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;=～ &lt;code&gt;匹配&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;==  &lt;code&gt;相等&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;=   &lt;code&gt;赋值&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编码运行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;welcome to use perl test \n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;please input the value:\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$well&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;chomp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$well&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$well&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=~&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt; /^[0-9]+$/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;你是数字\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;不是数字\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; perl -w &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; welcome to use perl &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;    &lt;/span&gt;please input the value:
    101
    你是数字
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;918&#34;&gt;9/18更新&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;注意精通regex  p49总结&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;sr&#34;&gt;s/regex/replacement/i&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;忽略大小写的替换&lt;/span&gt;
&lt;span class=&#34;sr&#34;&gt;s/regex/replacement/g&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;所有行都进行替换&lt;/span&gt;
&lt;span class=&#34;sr&#34;&gt;m/regex/i&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;或者&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;可以不用加&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;意会即可&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;任务来了,老板给了一个超级大的文件,是的html文件(然而所有的代码都挤在了一块),他说让我让这个文档层次感显示,小意思,我去做,但是&lt;b&gt;mmp&lt;/b&gt;914行,本来我说使用&lt;b&gt;notepad++&lt;/b&gt;毕竟能匹配括号,但是这并没有卵用啊,914行,所以说我只能借助正则婊了,但是完全不会用啊摔!那么只能先使用perl把标签分出来,让其单行显示&lt;/p&gt;
&lt;p&gt;&lt;b style=&#39;color:red&#39;&gt;v0.01&lt;/b&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;@meta$&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;perl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;s/(&amp;lt;(!| )*([a-z!-])+ *[^&amp;gt;&amp;lt;]*&amp;gt;)/\n\1\n/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/home/m&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eta&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/Desktop/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;@meta$&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;perl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;s/(&amp;lt;\/ *[^&amp;gt;&amp;lt;]+ *&amp;gt;)/\n\1\n/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/home/m&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eta&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/Desktop/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;真是呵呵,现在的自己好辣鸡,而且还是分两次做完的单行&lt;/p&gt;
&lt;p&gt;&lt;b&gt;部分解释&lt;/b&gt;&lt;br /&gt;
1. 其实在perl中&lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt;, 可以代替 &lt;code&gt;\1&lt;/code&gt;, &lt;code&gt;\2&lt;/code&gt;, &lt;code&gt;\3&lt;/code&gt;作为捕获文本的&lt;br /&gt;
2. 我们都知道正则&lt;code&gt;()&lt;/code&gt; 可以用来捕获文本,但是如果不需要捕获,它偏偏捕获了,这样只会肆意拓展$型变量的长度,所以使用了非捕获型规则,即&lt;code&gt;(?:...)&lt;/code&gt;, 但凡出现在这个括号里面,都不会被捕获的.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;那么我现在有一个&lt;b style=&#39;color:red&#39;&gt;疑问&lt;/b&gt;还没有&lt;del&gt;思考出来&lt;/del&gt;实践验证出来, &lt;code&gt;(|)&lt;/code&gt; 会 不会被捕获&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;b&gt;Perl参数含义&lt;/b&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;参数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-p&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;对目标文件的每一行进行查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-w&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;like gdb, 和warning一个意思,打开perl额外警告功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-e&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;表示整个程序接在命令后面[&lt;b style=&#39;color:green&#39;&gt;不明觉li&lt;/b&gt;]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/regex01.html</id>
    <title>regex(一)</title>
    <link href="/Language/regex01.html" />
    <published>2017-08-26T21:00:00+08:00</published>

    
    <updated>2017-08-26T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;If you are a web Programer and you are not familiar with Regex,HeHe:-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;知识背景&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;数学背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;形式化语言描述&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;算子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;基本常量&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;涉及理论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;基本语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;工程应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;元字符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;脑洞时间&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;知识背景&lt;/h3&gt;
&lt;h4 id=&#34;_2&#34;&gt;数学背景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%85%8B%E8%8E%B1%E5%B0%BC%E4%BB%A3%E6%95%B0&#34;&gt;克莱尼代数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_3&#34;&gt;形式化语言描述&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;运算符(算子)+常量(变量)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;_4&#34;&gt;算子&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;顺序[联系算子.]&lt;/li&gt;
&lt;li&gt;选择[联系算子|]&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环[联系算子+、?、* ]&lt;/p&gt;
&lt;p&gt;实现了程序控制的三大基本基本结构&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;_5&#34;&gt;基本常量&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;“空集” ∅指示集合∅&lt;/li&gt;
&lt;li&gt;“空串” ε指示集合{ε}&lt;/li&gt;
&lt;li&gt;“文字字符” 在Σ中的a指示集合{a}&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_6&#34;&gt;涉及理论&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a&gt;形式语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a&gt;自动机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a&gt;自动控制理论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a&gt;....&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_7&#34;&gt;基本语法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个表达式可以称为一个pattern，匹配正则语言&lt;/li&gt;
&lt;li&gt;表达式结构&lt;ul&gt;
&lt;li&gt;选择&lt;/li&gt;
&lt;li&gt;数量限定[使用量词]&lt;/li&gt;
&lt;li&gt;作用范围和优先级[见下]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_8&#34;&gt;工程应用&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;优先级&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;符号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;最高&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;高&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;( )、(?: )、(?= )、[ ]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;中&lt;/td&gt;
&lt;td align=&#34;center&#34; n=&#34;n&#34;&gt;*、+、?、&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;低&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;^、$、中介字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;最低&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;|&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;_9&#34;&gt;元字符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&#34;&gt;WIKI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_10&#34;&gt;脑洞时间&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;正则 pattern    VS   三代目中的function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;正则 direction  VS   三代目的顺序&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;([|])*----QAQ脑子暂时短路这里以后补上&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/About/introSite.html</id>
    <title>关于此站</title>
    <link href="/About/introSite.html" />
    <published>2017-08-26T21:00:00+08:00</published>

    
    <updated>2017-08-26T21:00:00+08:00</updated>
    

    
    <category term="About" />
    

    
    <content type="html">&lt;h2 id=&#34;intro&#34;&gt;intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以Wiki的形式介绍知识，而并非真正的wiki&lt;/li&gt;
&lt;li&gt;文章&lt;strong&gt;Free&lt;/strong&gt;，我并不认为我的文章有多好，但他们绝对具有价值&lt;/li&gt;
&lt;li&gt;引用该网站文章需要经过本人同意,联系邮箱-&lt;a href=&#34;vmit@qq.com&#34;&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;此网站只会存储我知识量的&lt;strong&gt;10%&lt;/strong&gt;，仅仅因为数据安全性考虑&lt;/li&gt;
&lt;li&gt;可以任意金额&lt;strong&gt;打赏&lt;/strong&gt;，但并&lt;strong&gt;不强迫&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a&gt;打赏链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;_1&#34;&gt;误操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不能算是Bug,在书写latex公式时不能使用,由于刚开学,简直大脑生生锈,竟然忘记了发现问题本质原因的思想,好了，废话不多说,“bug”就是该网站使用的md解释引擎在遇到&lt;code&gt;\\&lt;/code&gt;时直接转译为&lt;code&gt;\&lt;/code&gt;致使&lt;code&gt;\\&lt;/code&gt;不能使用,想要使用的最简单办法就是将&lt;code&gt;\\&lt;/code&gt;换成&lt;code&gt;\\\&lt;/code&gt;,everything is ok.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[TOC]&lt;/code&gt;注意保持一个空行&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/intro.html</id>
    <title>语言介绍</title>
    <link href="/Language/intro.html" />
    <published>2017-08-25T21:00:00+08:00</published>

    
    <updated>2017-08-25T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;我认为能够形成一定的完备的系统，&lt;br /&gt;
且可以作为信源的符号集合可以成为语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[评论]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;同时推荐喀什的这首歌...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=27317272&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;人类语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;[1]视觉语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;图像语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;甲骨文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;图片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;文/数字语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;代表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;[2]听觉语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;语言的发声&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;音乐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;[3]触觉语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;盲文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;计算机语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;[一代目]机器语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_12&#34;&gt;特点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_13&#34;&gt;[二代目]汇编语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_14&#34;&gt;特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_15&#34;&gt;代表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_16&#34;&gt;[三代目]高级语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_17&#34;&gt;特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_18&#34;&gt;代表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_19&#34;&gt;[四代目]面向问题语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_20&#34;&gt;特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_21&#34;&gt;代表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_22&#34;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_23&#34;&gt;[五代目]人工智能语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_24&#34;&gt;特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_25&#34;&gt;代表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_26&#34;&gt;语言概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_27&#34;&gt;语法/语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_28&#34;&gt;语法糖&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; left:80px; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/fire.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;_1&#34;&gt;人类语言&lt;/h2&gt;
&lt;h3 id=&#34;1&#34;&gt;[1]视觉语言&lt;/h3&gt;
&lt;h4 id=&#34;_2&#34;&gt;图像语言&lt;/h4&gt;
&lt;h5 id=&#34;_3&#34;&gt;甲骨文&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;了解的很少哇&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;_4&#34;&gt;图片&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;一张图片透漏的信息的数量级极其高&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_5&#34;&gt;文/数字语言&lt;/h4&gt;
&lt;h5 id=&#34;_6&#34;&gt;代表&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;各国文字&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;数学&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;理化公式等等&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;2&#34;&gt;[2]听觉语言&lt;/h3&gt;
&lt;h4 id=&#34;_7&#34;&gt;语言的发声&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;传说中的闻风丧旦&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_8&#34;&gt;音乐&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;啊哈哈，巴赫我现在还不太懂&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;推荐《音乐的奉献》如果你有这种欣赏水平的话&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;3&#34;&gt;[3]触觉语言&lt;/h3&gt;
&lt;h4 id=&#34;_9&#34;&gt;盲文&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;海伦凯勒&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;_10&#34;&gt;计算机语言&lt;/h2&gt;
&lt;h3 id=&#34;_11&#34;&gt;[一代目]机器语言&lt;/h3&gt;
&lt;h4 id=&#34;_12&#34;&gt;特点&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.01&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;位串组成&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;有关计算机三进制、二进制、十进制的权衡略过&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;过于繁琐&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;操作级别高&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_13&#34;&gt;[二代目]汇编语言&lt;/h3&gt;
&lt;h4 id=&#34;_14&#34;&gt;特点&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语法倾向自然语言，抽象的第一大步&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;过于依赖底层&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;助记码不适宜软件工程&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_15&#34;&gt;代表&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.8086&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;汇编&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_16&#34;&gt;[三代目]高级语言&lt;/h3&gt;
&lt;h4 id=&#34;_17&#34;&gt;特点&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;走向了更加自然地处理方式&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;走向性能与功能博弈的通用稳定状态&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;注重过程&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;出现了面向对象思想&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;可以作为程序员自由灵活设计的通用编程语言&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GPPL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;General&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Purpose&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Programming&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Language&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;图灵完备&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;出现了所谓的拥护者&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;摊手&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;8.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;学习的人占领市场，出现普遍水平地下的社会现状&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_18&#34;&gt;代表&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Java&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Perl&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PHP&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JavaScript&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_19&#34;&gt;[四代目]面向问题语言&lt;/h3&gt;
&lt;h4 id=&#34;_20&#34;&gt;特点&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DSL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DPP&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;探索式编程&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;人员发挥空间小，多数扔给了引擎&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;多数非图灵完备&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;重在目标而非过程、重在描述而非实现&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_21&#34;&gt;代表&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;SQL&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SAS&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SPSS&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LaTeX&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Regex&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Markdown&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HTML&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CSS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_22&#34;&gt;说明&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Markdown&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HTML&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CSS&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;是我自认为可以分为此类&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_23&#34;&gt;[五代目]人工智能语言&lt;/h3&gt;
&lt;h4 id=&#34;_24&#34;&gt;特点&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;学术界争议大，小小码农不敢造次&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_25&#34;&gt;代表&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Prolog&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Mercury&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OPS5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;_26&#34;&gt;语言概念&lt;/h2&gt;
&lt;h3 id=&#34;_27&#34;&gt;语法/语法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In linguistics, grammar is the set of structural rules governing the composition of clauses, phrases, and words in any given natural language. The term refers also to the study of such rules, and this field includes morphology, syntax, and phonology, often complemented by phonetics, semantics, and pragmatics.&lt;br /&gt;
在语言学中,语法是句子、短语和词汇在任何给定的自然语言中的结构规则组成。这个领域也包括这些规则的研究,这一领域包括形态学、语构、语音,常常辅以语音学,语义学和语用学。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;center style=&#34;&#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/parser.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;词法：语言的最小组成单元&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;名代数冠介连形&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语法：连接语言单元的规则&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语义：连接上下文&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;得到的语言含义&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_28&#34;&gt;语法糖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;$(\lambda)$ 演算的创始人创造&lt;/li&gt;
&lt;li&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;[介绍]意指那些没有给计算机语言添加新功能，而只是对人类来说更“甜蜜”的语法。语法糖往往给程序员提供了更实用的编码方式，有益于更好的编码风格，更易读。&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;[Example]：A[i] &amp;lt;---&amp;gt; *(A+i) 面向对象更像是面向过程的sugar &lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/pythonkey.html</id>
    <title>[词法目][python目]关键字/特殊概念</title>
    <link href="/Language/pythonkey.html" />
    <published>2017-08-28T21:00:00+08:00</published>

    
    <updated>2017-08-28T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;更新....&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;文档类型：&lt;/strong&gt;&lt;b&gt;[ &lt;a href=&#34;https://www.ibm.com/developerworks/cn/opensource/os-cn-pythonwith/&#34;&gt;引&lt;/a&gt; ]&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[自.评论]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;这个女的竟然不为大众所知&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=409102911&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;关键字&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#with&#34;&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;with&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;自定义上下文管理器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;变量&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sysargv&#34;&gt;&lt;b&gt;sys.argv&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__name__&#34;&gt;&lt;b&gt;__name__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;方法&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#__str__&#34;&gt;&lt;b&gt;__str__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__repr__&#34;&gt;&lt;b&gt;__repr__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__iter__&#34;&gt;&lt;b&gt;__iter__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__next__&#34;&gt;&lt;b&gt;__next__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__getitem__&#34;&gt;&lt;b&gt;__getitem__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__getattr__&#34;&gt;&lt;b&gt;__getattr__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__call__&#34;&gt;&lt;b&gt;__call__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;_1&#34;&gt;关键字&lt;/h2&gt;
&lt;h3 id=&#34;with&#34;&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;with&lt;/b&gt;&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_2&#34;&gt;概念&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;上下文管理协议（Context Management Protocol）&lt;/b&gt;：包含方法 &lt;code&gt;__enter__()&lt;/code&gt; 和 &lt;code&gt;__exit__()&lt;/code&gt;，支持该协议的对象要实现这两个方法。&lt;/li&gt;
&lt;li&gt;&lt;b&gt;上下文管理器（Context Manager）&lt;/b&gt;：支持上下文管理协议的对象，这种对象实现了&lt;code&gt;__enter__()&lt;/code&gt; 和 &lt;code&gt;__exit__()&lt;/code&gt; 方法。上下文管理器定义执行with 语句时要建立的运行时上下文，负责执行 with 语句块上下文中的进入与退出操作。通常使用 with 语句调用上下文管理器，也可以通过直接调用其方法来使用。&lt;/li&gt;
&lt;li&gt;&lt;b&gt;运行时上下文（runtime context）&lt;/b&gt;：由上下文管理器创建，通过上下文管理器的 &lt;code&gt;__enter__()&lt;/code&gt;和&lt;code&gt;__exit__()&lt;/code&gt; 方法实现，&lt;code&gt;__enter__()&lt;/code&gt; 方法在语句体执行之前进入运行时上下文，&lt;code&gt;__exit__()&lt;/code&gt; 在语句体执行完后从运行时上下文退出。with 语句支持运行时上下文这一概念。&lt;/li&gt;
&lt;li&gt;&lt;b&gt;上下文表达式（Context Expression）&lt;/b&gt;：with 语句中跟在关键字 with 之后的表达式，该表达式要返回一个上下文管理器对象。&lt;/li&gt;
&lt;li&gt;&lt;b&gt;语句体（with-body）&lt;/b&gt;：with 语句包裹起来的代码块，在执行语句体之前会调用上下文管理器的 &lt;code&gt;__enter__()&lt;/code&gt; 方法，执行完语句体之后执行&lt;code&gt;__exit__()&lt;/code&gt; 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_3&#34;&gt;格式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;标准用法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context_expression&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]:&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;         &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;这里&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context_expression&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;要返回一个上下文管理器对象，该对象并不赋值给&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;子句中的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;如果指定了&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;子句的话，会将上下文管理器的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__enter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;方法的返回值赋值给&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;可以是单个变量，或者由“&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;”括起来的元组（不能是仅仅由“&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;”分隔的变量列表，必须加“&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;”）。&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对一些内建对象进行改进，加入了对上下文管理器的支持，可以用于&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;语句中，比如可以自动关闭&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;文件、线程锁的自动获取和释放等。假设要对一个文件进行操作，使用&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;语句可以有如下代码：&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;操作文件对象[with]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&amp;#39;somefileName&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;somefile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;somefile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;        &lt;span class=&#34;c&#34;&gt;# ...more code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;操作文件对象[try/except]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;somefile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&amp;#39;somefileName&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;somefile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;        &lt;span class=&#34;c&#34;&gt;# ...more code&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;somefile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;with 语句执行过程描述&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context_expression&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__enter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# True 表示正常执行，即便有异常也忽略；False 表示重新抛出异常，需要对异常进行处理&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;8.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 如果使用了 as 子句&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;9.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 执行 with-body&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;10.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;11.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 执行过程中有异常发生&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;12.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;13.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 如果 __exit__ 返回 True，则异常被忽略；如果返回 False，则重新抛出异常&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;14.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 由外层代码对异常进行处理&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;15.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exc_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;16.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;17.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;18.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 正常退出，或者通过 statement-body 中的 break/continue/return 语句退出&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;19.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 或者忽略异常退出&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;20.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;21.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;22.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 缺省返回 None，None 在布尔上下文中看做是 False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;执行&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context_expression&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，生成上下文管理器&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;调用上下文管理器的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__enter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;方法；如果使用了&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;子句，则将&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__enter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;方法的返回值赋值给&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;子句中的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;执行语句体&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;不管是否执行过程中是否发生了异常，执行上下文管理器的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;方法，&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;方法负责执行“清理”工作，如释放资源等。如果执行过程中没有出现异常，&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;或者语句体中执行了语句&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，则以&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;作为参数&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;调用&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;如果执行过程中出现异常，则使用&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exc_info&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;得到的异常信息为参数&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;调用&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exc_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc_traceback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;出现异常时，&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;如果&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;traceback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;返回&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，则会重新抛出&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;异常，让&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;之外的语句逻辑来处理异常，这也是通用做法；如果返回&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;则忽略异常，不再对异常进行处理&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_4&#34;&gt;自定义上下文管理器&lt;/h4&gt;
&lt;p&gt;开发人员可以自定义支持上下文管理协议的类。自定义的上下文管理器要实现上下文管理协议所需要的 &lt;strong&gt;enter&lt;/strong&gt;() 和 &lt;strong&gt;exit&lt;/strong&gt;() 两个方法：&lt;br /&gt;
context_manager.&lt;strong&gt;enter&lt;/strong&gt;() ：进入上下文管理器的运行时上下文，在语句体执行前调用。with 语句将该方法的返回值赋值给 as 子句中的 target，如果指定了 as 子句的话&lt;br /&gt;
context_manager.&lt;strong&gt;exit&lt;/strong&gt;(exc_type, exc_value, exc_traceback) ：退出与上下文管理器相关的运行时上下文，返回一个布尔值表示是否对发生的异常进行处理。参数表示引起退出操作的异常，如果退出时没有发生异常，则3个参数都为None。如果发生异常，返回&lt;br /&gt;
True 表示不处理异常，否则会在退出该方法后重新抛出异常以由 with 语句之外的代码逻辑进行处理。如果该方法内部产生异常，则会取代由 statement-body 中语句产生的异常。要处理异常时，不要显示重新抛出异常，即不能重新抛出通过参数传递进来的异常，只需要将返回值设置为 False 就可以了。之后，上下文管理代码会检测是否 &lt;strong&gt;exit&lt;/strong&gt;() 失败来处理异常&lt;br /&gt;
下面通过一个简单的示例来演示如何构建自定义的上下文管理器。注意，上下文管理器必须同时提供 &lt;strong&gt;enter&lt;/strong&gt;() 和 &lt;strong&gt;exit&lt;/strong&gt;() 方法的定义，缺少任何一个都会导致 AttributeError；with 语句会先检查是否提供了 &lt;strong&gt;exit&lt;/strong&gt;() 方法，然后检查是否定义了 &lt;strong&gt;enter&lt;/strong&gt;() 方法。&lt;br /&gt;
假设有一个资源 DummyResource，这种资源需要在访问前先分配，使用完后再释放掉；分配操作可以放到 &lt;strong&gt;enter&lt;/strong&gt;() 方法中，释放操作可以放到 &lt;strong&gt;exit&lt;/strong&gt;() 方法中。简单起见，这里只通过打印语句来表明当前的操作，并没有实际的资源分配与释放。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义支持 with 语句的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DummyResource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Resource [&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__enter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[Enter &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]: Allocate resource.&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.&lt;/span&gt;       &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;# 可以返回不同的对象&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;8.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc_tb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;9.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[Exit &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]: Free resource.&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;10.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc_tb&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;11.&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[Exit &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]: Exited without exception.&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;12.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;13.&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[Exit &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]: Exited with exception raised.&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;14.&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;# 可以省略，缺省的None也是被看做是False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DummyResource 中的 &lt;strong&gt;enter&lt;/strong&gt;() 返回的是自身的引用，这个引用可以赋值给 as 子句中的 target 变量；返回值的类型可以根据实际需要设置为不同的类型，不必是上下文管理器对象本身。&lt;br /&gt;
&lt;strong&gt;exit&lt;/strong&gt;() 方法中对变量 exc_tb 进行检测，如果不为 None，表示发生了异常，返回 False 表示需要由外部代码逻辑对异常进行处理；注意到如果没有发生异常，缺省的返回值为 None，在布尔环境中也是被看做 False，但是由于没有异常发生，&lt;strong&gt;exit&lt;/strong&gt;() 的三个参数都为 None，上下文管理代码可以检测这种情况，做正常处理。&lt;br /&gt;
下面在 with 语句中访问 DummyResource ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用自定义的支持 with 语句的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DummyResource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Normal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[with-body] Run without exceptions.&amp;#39;&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DummyResource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;With-Exception&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[with-body] Run with exception.&amp;#39;&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[with-body] Run with exception. Failed to finish statement-body!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第1个 with 语句的执行结果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with 语句1执行结果&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Resource&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Enter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Allocate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Run&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;without&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exceptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Free&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exited&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;without&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exception&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，正常执行时会先执行完语句体 with-body，然后执行 &lt;strong&gt;exit&lt;/strong&gt;() 方法释放资源。&lt;br /&gt;
第2个 with 语句的执行结果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with 语句2执行结果&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Resource&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;With&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Enter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;With&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Allocate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Run&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exception&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;With&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Free&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;With&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exited&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exception&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;raised&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Traceback&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;most&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;G:/demo&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;
&lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，with-body 中发生异常时with-body 并没有执行完，但资源会保证被释放掉，同时产生的异常由 with 语句之外的代码逻辑来捕获处理。&lt;br /&gt;
可以自定义上下文管理器来对软件系统中的资源进行管理，比如数据库连接、共享资源的访问控制等。Python 在线文档 &lt;b&gt;&lt;a href=&#34;http://docs.python.org/release/2.6/whatsnew/2.6.html#module-contextlib&#34;&gt;Writing Context Managers&lt;/a&gt;&lt;/b&gt; 提供了一个针对数据库连接进行管理的上下文管理器的简单范例。&lt;/p&gt;
&lt;h3 id=&#34;_5&#34;&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;变量&lt;/b&gt;&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;sysargv&#34;&gt;&lt;b&gt;sys.argv&lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sys&lt;/code&gt;模块有一个&lt;code&gt;argv&lt;/code&gt;变量，用list存储了命令行的所有参数。argv至少有一个元素，因为第一个参数永远是该&lt;code&gt;.py&lt;/code&gt;文件的名称，例如：&lt;/p&gt;
&lt;p&gt;运行&lt;code&gt;python hello.py&lt;/code&gt;获得的&lt;code&gt;sys.argv&lt;/code&gt;就是&lt;code&gt;[&#39;hello.py&#39;]&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;运行&lt;code&gt;python hello.py -t&lt;/code&gt;获得的sys.argv就是&lt;code&gt;[&#39;hello.py&#39;, &#39;-t&#39;]&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;__name__&#34;&gt;&lt;b&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#hello.py&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量&lt;code&gt;__name__&lt;/code&gt;置为&lt;code&gt;__main__&lt;/code&gt;，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是&lt;b style=&#39;color:green&#39;&gt;运行测试&lt;/b&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;python3 hello.py
Hello, world!
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;python hello.py World
Hello, World!
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;python3
Python 3.4.3 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;v3.4.3:9b73f1c3e601, Feb 23 2015, 02:52:03&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;GCC 4.2.1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Apple Inc. build 5666&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dot 3&lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt; on darwin
Type &lt;span class=&#34;s2&#34;&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class=&#34;s2&#34;&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for &lt;/span&gt;more information.
&amp;gt;&amp;gt;&amp;gt; import hello
&amp;gt;&amp;gt;&amp;gt;
&lt;span class=&#34;c&#34;&gt;#屁都没有&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_6&#34;&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;方法&lt;/b&gt;&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;__str__&#34;&gt;&lt;b&gt;&lt;code&gt;__str__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;与object绑定print方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;#调用__str__()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;__repr__&#34;&gt;&lt;b&gt;&lt;code&gt;__repr__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;交互模式下输出调用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;#调用__repr__()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;__iter__&#34;&gt;&lt;b&gt;&lt;code&gt;__iter__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;返回迭代对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;__next__&#34;&gt;&lt;b&gt;&lt;code&gt;__next__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;迭代对象调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;__getitem__&#34;&gt;&lt;b&gt;&lt;code&gt;__getitem__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;下标取值&lt;/li&gt;
&lt;li&gt;切片&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;__getattr__&#34;&gt;&lt;b&gt;&lt;code&gt;__getattr__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;动态返回属性&lt;/li&gt;
&lt;li&gt;动态返回函数 [可以写成高级函数或return 朗姆达表达式]&lt;/li&gt;
&lt;li&gt;可以实现链式调用chain()&lt;b style=&#39;color:green&#39;&gt;[很棒]&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;__call__&#34;&gt;&lt;b&gt;&lt;code&gt;__call__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;任何类，只需要定义一个__call__()方法，就可以直接对实例进行调用&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;My name is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Student&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; s&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# self参数不要传入&lt;/span&gt;
My name is hi.
&lt;/pre&gt;&lt;/div&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/regex00.html</id>
    <title>[Regex纲]Regex概论</title>
    <link href="/Language/regex00.html" />
    <published>2017-08-31T21:00:00+08:00</published>

    
    <updated>2017-08-31T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;思索中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
今日无音乐,只有乱.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;混乱的思想,难以安眠的嘈杂,生命的歌与诗,坠落在绚烂多彩的深渊.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;以下均为不成熟的思想,为了记录脑中知识,故将知识扔到这一片荒芜之地.&lt;br /&gt;
1. 规则即命题&lt;br /&gt;
2. 将表达式看做命题&lt;br /&gt;
3. 将匹配分为确定匹配与规则匹配&lt;/p&gt;
&lt;p&gt;好了现在我要创造正则表达式,那么我知道正则表达式的目的就是描述模式,&lt;b&gt;描述&lt;/b&gt;本身应该有什么性质,对的，他要遵循&lt;b&gt;精准性&lt;/b&gt;,&lt;b&gt;客观性&lt;/b&gt;还有&lt;b&gt;灵活性&lt;/b&gt;这意味这要减小描述的复杂度,为了减小描述的复杂度，那就提高符号抽象程度。&lt;br /&gt;
此处引入集合论的混乱观点，毕竟数学都是建立在它上面的，我使用一下应该不会有太大的出入，那么开始吧。&lt;br /&gt;
1. 集合内的元素被认为元对象&lt;br /&gt;
2. 集合上面的运算形成新的集合&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[草稿.篇]&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;大局观：代表对元素集合的描述，考虑的是整个元素集合的性质&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;例如数量&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;　微观：代表对单个元素的描述&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;考虑的是单个索引上元素的值，例如位置和值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面也说过描述要具有精准性，我们要知道他的位置，他的值才能唯一描述他，他的值可能是常项也可能是变项，常项可能包括空集,变项引入符号‘|’,所以元素是变动的“null|{set}”&amp;lt;---&amp;gt;&#34;{set}?&#34;&lt;br /&gt;
$$Regex \Rightarrow \begin{cases} 大局观  &amp;amp;  \begin{cases}&lt;br /&gt;
                                  数量观 &amp;amp;  \begin{cases}有限 \\&lt;br /&gt;
                                                        无限(有限是无限的子集)&lt;br /&gt;
                                            \end{cases}\\  &lt;br /&gt;
                                  \end{cases}&lt;br /&gt;
                                  \\&lt;br /&gt;
                        \\&lt;br /&gt;
                        微观    &amp;amp;  \begin{cases}&lt;br /&gt;
                                    基本元素 &amp;amp; \begin{cases}常项 &amp;amp; \begin{cases}特殊元素 \\&lt;br /&gt;
                                                                              其他元素&lt;br /&gt;
                                                                   \end{cases}\\  &lt;br /&gt;
                                                          变项 &amp;amp; \\&lt;br /&gt;
                                                \end{cases}&lt;br /&gt;
                                    \\&lt;br /&gt;
                                    位置 &amp;amp;     \begin{cases}绝对位置\\&lt;br /&gt;
                                                           相对位置\\&lt;br /&gt;
                                              \end{cases}&lt;br /&gt;
                                     \\&lt;br /&gt;
                                  \end{cases}\\&lt;br /&gt;
                         \end{cases}&lt;br /&gt;
$$&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;对草稿篇出现疑问&lt;br /&gt;
1. 量词的引入是为了简化描述吗?&lt;br /&gt;
2. 有点混乱...&lt;br /&gt;
3. 我一开始为什么要执着引入谓词逻辑？&lt;/p&gt;
&lt;p&gt;以下为写在本子上的公式&lt;/p&gt;
&lt;p&gt;$$运算\begin{smallmatrix}&amp;amp;抽象&amp;amp;\\ &amp;amp;\Longleftrightarrow&amp;amp;\end{smallmatrix}规则\begin{smallmatrix}&amp;amp;实体化&amp;amp;\\ &amp;amp;\Longleftrightarrow&amp;amp;\end{smallmatrix}命题\begin{smallmatrix}&amp;amp;使用&amp;amp;\\ &amp;amp;\longrightarrow&amp;amp;\end{smallmatrix}谓词$$&lt;/p&gt;
&lt;p&gt;看来真正的理解只能去写一个正则引擎了QAQ&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/Panalyse1.html</id>
    <title>python源码分析</title>
    <link href="/Language/Panalyse1.html" />
    <published>2017-08-27T21:00:00+08:00</published>

    
    <updated>2017-08-27T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[网评]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;谢谢网易云音乐让我知道真相.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=624751&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;写在开头&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;架构图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;结构剖析&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;编译安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#c&#34;&gt;调用c函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;_1&#34;&gt;写在开头&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;本系列文章的理解水平建立在编译原理&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语言&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语言的了解基础上&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;如果不知道&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Scaner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;抽象语法树&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compiler&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Code&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Evaluator&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;建议进修&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;_2&#34;&gt;架构图&lt;/h2&gt;
&lt;p&gt;&lt;center &gt;&lt;br /&gt;
&lt;div style=&#34;width:644px&#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/pyarchive&#34; /&gt;&lt;br /&gt;
&lt;/div&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Scaner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;---&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Code&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Evaluator&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;         &lt;span class=&#34;n&#34;&gt;use&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Structure&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;       &lt;span class=&#34;n&#34;&gt;use&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;memory&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Allocator&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Code&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Evaluator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;modify&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2 id=&#34;_3&#34;&gt;结构剖析&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;编写&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;模块的头文件源&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;自带标准库#速度慢&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;由&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;编写#速度快&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scaner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;some&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tools&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;所有内建对象&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;运行时的对象实现&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;运行核心&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Evaluator&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PcBuild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;windows&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;工程文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_4&#34;&gt;编译安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;windows 没错这就是我格式化windows的原因&lt;/li&gt;
&lt;li&gt;Linux/Unix&lt;br /&gt;
    1.&lt;code&gt;&amp;gt;  ./configure --prefix=&#39;PATH&#39;&lt;/code&gt;&lt;br /&gt;
    2.&lt;code&gt;&amp;gt;  make&lt;/code&gt;&lt;br /&gt;
    3.&lt;code&gt;&amp;gt;  make install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c&#34;&gt;调用c函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coolshell.cn/articles/671.html&#34;&gt;陈皓&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;暂停睡觉&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/net/net001.html</id>
    <title>arp介绍</title>
    <link href="/net/net001.html" />
    <published>2017-09-01T11:00:00+08:00</published>

    
    <updated>2017-09-01T11:00:00+08:00</updated>
    

    
    <category term="net" />
    

    
    <content type="html">&lt;h2 id=&#34;_1&#34;&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;电脑维修中....&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;文档状态：&lt;a style=&#34;color:red;background-color:gray&#34;&gt;电脑维修中....&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;b style=&#34;color:red&#34;&gt;电脑维修中,只能先备份了...&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;arp协议的具体，什么是arp，固定长度42？&lt;/li&gt;
&lt;li&gt;广播&lt;ul&gt;
&lt;li&gt;是只有网关发广播吗？[x]&lt;/li&gt;
&lt;li&gt;一直不停地发广播吗&lt;/li&gt;
&lt;li&gt;广播以什么样的形式发送出去？&lt;/li&gt;
&lt;li&gt;发送广播的目的是什么？[建立ARP表？]&lt;ul&gt;
&lt;li&gt;建立Arp的顺序是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;什么是IGMPv3？&lt;/li&gt;
&lt;/ol&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/入门/python01.html</id>
    <title>python入门级教程</title>
    <link href="/入门/python01.html" />
    <published>2017-09-11T21:00:00+08:00</published>

    
    <updated>2017-09-11T21:00:00+08:00</updated>
    

    
    <category term="入门" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;人生苦短&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#919&#34;&gt;9.19更新&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;命令行特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;脚本书写&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;开发环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#io&#34;&gt;IO&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;输出函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;输入函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;语法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;书写&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;运算&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;运算符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_12&#34;&gt;操作数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_13&#34;&gt;控制结构&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_14&#34;&gt;循环&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_15&#34;&gt;函数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_16&#34;&gt;分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_17&#34;&gt;常见内建函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_18&#34;&gt;参数问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_19&#34;&gt;类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_20&#34;&gt;使用&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_21&#34;&gt;方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_22&#34;&gt;对象&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_23&#34;&gt;模块&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_24&#34;&gt;常见&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_25&#34;&gt;开发程序&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_26&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_27&#34;&gt;异常控制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_28&#34;&gt;高级特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_29&#34;&gt;获取帮助&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;919&#34;&gt;9.19更新&lt;/h2&gt;
&lt;h3 id=&#34;_1&#34;&gt;特性&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;健壮性&lt;/li&gt;
&lt;li&gt;易维护性&lt;/li&gt;
&lt;li&gt;可移植&lt;/li&gt;
&lt;li&gt;易读易学&lt;/li&gt;
&lt;li&gt;面向对象&lt;/li&gt;
&lt;li&gt;可拓展&lt;/li&gt;
&lt;li&gt;可升级&lt;/li&gt;
&lt;li&gt;高阶函数(haskell, lisp)&lt;/li&gt;
&lt;li&gt;内存管理&lt;/li&gt;
&lt;li&gt;非编译型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_2&#34;&gt;命令行特性&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;-c &#34;cmd&#34;&lt;br /&gt;
&lt;code&gt;python -c &#34;print (1+2)&#34;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-d&lt;br /&gt;
&lt;code&gt;调试输出&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-v&lt;br /&gt;
&lt;code&gt;冗余输出&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-m mod&lt;br /&gt;
&lt;code&gt;模块以脚本形式运行&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-O&lt;br /&gt;
&lt;code&gt;生成优化的字节码 .pyo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-S&lt;/li&gt;
&lt;li&gt;-Q&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_3&#34;&gt;脚本书写&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;文本开头搜索python解释器&lt;ul&gt;
&lt;li&gt;开头&lt;code&gt;#!Python解释器的路径&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;#!/usr/bin/python&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;或者&lt;code&gt;#!/usr/bin/env python&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;从env环境变量中搜索&lt;/code&gt;     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_4&#34;&gt;开发环境&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;VIM+PYTHON插件&lt;/li&gt;
&lt;li&gt;pycharm&lt;/li&gt;
&lt;li&gt;spyder&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;io&#34;&gt;IO&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_5&#34;&gt;模块&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;sys.stderr&lt;br /&gt;
&lt;code&gt;标准错误输出&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_6&#34;&gt;输出函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;交互使用repr()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print调用str()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;print输出默认加换行&lt;br /&gt;
&lt;code&gt;使用print a, 加逗号即可改变,但是自动加空格&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;格式化输出&lt;br /&gt;
&lt;code&gt;print &#34;%s %d&#34; %(a,b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重定向输出&lt;br /&gt;
&lt;code&gt;print &amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_7&#34;&gt;输入函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;raw_input()&lt;code&gt;py 2.x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;input &lt;code&gt;py 3.x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_8&#34;&gt;语法&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_9&#34;&gt;书写&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\&lt;/code&gt;继续上一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt;两个语句在一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt;将代码头体分离&lt;/li&gt;
&lt;li&gt;缩进&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_10&#34;&gt;运算&lt;/h4&gt;
&lt;h5 id=&#34;_11&#34;&gt;运算符&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**(乘方)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt;浮点除法(四舍五入)真正的除法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;传统除法(操作数为整型时执行地板除)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!= &amp;lt;&amp;gt;&lt;/code&gt;都是不等于&lt;/li&gt;
&lt;li&gt;逻辑运算 &lt;code&gt;and or not&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增量赋值 +=,-=&lt;/li&gt;
&lt;li&gt;多重赋值 x =y =z=1&lt;/li&gt;
&lt;li&gt;多元赋值 a,b = b+1, a[涉及元祖特性][可实现简单交换]&lt;br /&gt;
&lt;code&gt;x,y = y,x[不明觉厉]显然赋值之前已经做好了计算&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;友情提示:多使用括号,增强代码可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;_12&#34;&gt;操作数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;注意complex虽然不常用&lt;/li&gt;
&lt;li&gt;字符串知识(切片,索引,克莱尼星号,连接)&amp;lt;-[只读]&lt;/li&gt;
&lt;li&gt;列表元素个数和值可变 (切片,索引,克莱尼星号,连接)&amp;lt;-[读写]&lt;/li&gt;
&lt;li&gt;元组元素个数和值不可变(可切片,克莱尼星号,索引,连接)&amp;lt;-[只读]&lt;/li&gt;
&lt;li&gt;字典 (&lt;b style=&#39;color:red&#39;&gt;有重点待续...&lt;/b&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_13&#34;&gt;控制结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;没什么好讲的&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;注意缩进&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;_14&#34;&gt;循环&lt;/h5&gt;
&lt;p&gt;&lt;del&gt;不值得专门一节写&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搞清可迭代对象(序列/迭代器)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_15&#34;&gt;函数&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_16&#34;&gt;分类&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;有副作用&lt;/li&gt;
&lt;li&gt;无副作用&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;_17&#34;&gt;常见内建函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;abs()&lt;br /&gt;
&lt;code&gt;取绝对值&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;dir([obj])&lt;br /&gt;
&lt;code&gt;显示对象属性,如果无参数,则显示全局变量的名字&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;help([obj])&lt;br /&gt;
&lt;code&gt;帮助&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;int([obj])&lt;br /&gt;
&lt;code&gt;将对象转换为整数&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;len(obj)&lt;br /&gt;
&lt;code&gt;返回对象长度&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;open(fn,mode)&lt;br /&gt;
&lt;code&gt;fn为文件名或者handle, mode取[&#39;r&#39;,&#39;w&#39;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;range([start],stop[,step])&lt;br /&gt;
&lt;code&gt;生成列表0~n-1&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;常见搭配 for i in range(len(str))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;str(obj)&lt;br /&gt;
&lt;code&gt;将一个对象转换为字符串&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;type(obj)&lt;br /&gt;
&lt;code&gt;返回对象类型&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_18&#34;&gt;参数问题&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;暂时书写架构&lt;/code&gt;&lt;br /&gt;
- 默认参数&lt;br /&gt;
- 可变参数&lt;br /&gt;
- 关键字参数&lt;br /&gt;
- etc&lt;/p&gt;
&lt;h3 id=&#34;_19&#34;&gt;类&lt;/h3&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_20&#34;&gt;使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定义&lt;br /&gt;
&lt;code&gt;class classname(baseclass[es]):&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建&lt;br /&gt;
&lt;code&gt;a = classB(pram)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_21&#34;&gt;方法&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;做到访问权限控制&lt;/code&gt;&lt;br /&gt;
1. 特殊方法&lt;br /&gt;
&lt;code&gt;__method__()&lt;/code&gt;&lt;br /&gt;
    ``&lt;/p&gt;
&lt;h4 id=&#34;_22&#34;&gt;对象&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;自身实例引用&lt;br /&gt;
&lt;code&gt;self类似this&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_23&#34;&gt;模块&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;这个是我现在还比较方的东西&lt;/code&gt;&lt;br /&gt;
1. 每个python脚本文件都可以当做一个模块&lt;br /&gt;
2. 模块太大?可以自己&lt;b style=&#39;color:red&#39;&gt;拆&lt;/b&gt;&lt;/p&gt;
&lt;h4 id=&#34;_24&#34;&gt;常见&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;sys&lt;ul&gt;
&lt;li&gt;platform&lt;/li&gt;
&lt;li&gt;version&lt;/li&gt;
&lt;li&gt;stdout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_25&#34;&gt;开发程序&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_26&#34;&gt;文档&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;注释&lt;br /&gt;
&lt;code&gt;#单行&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;自定义范围 &#39;&#39;&#39; comment &#39;&#39;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_27&#34;&gt;异常控制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;捕获try-except&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生成&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`raise()`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_28&#34;&gt;高级特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;列表解析&lt;br /&gt;
&lt;code&gt;暂时不写 特牛x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_29&#34;&gt;获取帮助&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;使用help(函数名)&lt;code&gt;交互模式使用&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;什么是PEP?&lt;br /&gt;
&lt;code&gt;PYTHON增强提案&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Linux/os01.html</id>
    <title>系统概论</title>
    <link href="/Linux/os01.html" />
    <published>2017-09-06T21:00:00+08:00</published>

    
    <updated>2017-09-06T21:00:00+08:00</updated>
    

    
    <category term="Linux" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;学习操作系统,如果仅仅将眼光局限于计算机,成就仅仅止于计算机,更重要的是,设计系统的策略.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;b style=&#34;color:red&#34;&gt;电脑维修中,只能先备份了...&lt;/b&gt;&lt;/p&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-is&#34;&gt;what is&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;发展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;开始&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#temp&#34;&gt;temp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;与设备交互&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;来源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;处理时间&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;寄存器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;what-is&#34;&gt;what is&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每当谈到操作系统时,我更倾向于把它称为系统,很多人只是在界限上给操作系统划分为一个系统软件类别,而在我眼里,并不是那么粗糙的去定义它,它的确是一个软件,但是在逻辑上讲,更像是一组提高用户交互性,管理计算机资源与实现流程控制的一组功能之上的策略的集合。任何系统都是策略的集合,无论是计算机操作系统,还是计算机网络系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_1&#34;&gt;发展&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单道批处理()&lt;/li&gt;
&lt;li&gt;多道批处理&lt;/li&gt;
&lt;li&gt;分时&lt;/li&gt;
&lt;li&gt;并发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算机网络中对于cs模型具有重复型或并发型，看起来具有共同之处&lt;/p&gt;
&lt;h3 id=&#34;_2&#34;&gt;开始&lt;/h3&gt;
&lt;h4 id=&#34;temp&#34;&gt;temp&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;加电 cs:ip = 0xf000:fff0&lt;/li&gt;
&lt;li&gt;post自检[寻找显卡和执行BIOS]&lt;/li&gt;
&lt;li&gt;加载bootloader 到 0x7c00+512字节 控制转移&lt;/li&gt;
&lt;li&gt;加载内核&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_3&#34;&gt;与设备交互&lt;/h4&gt;
&lt;h5 id=&#34;_4&#34;&gt;来源&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;面向外设 中断+io处理&lt;/li&gt;
&lt;li&gt;面向系统程序 系统调用和异常提供服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;_5&#34;&gt;处理时间&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;中断:异步&lt;/li&gt;
&lt;li&gt;异常:同步&lt;/li&gt;
&lt;li&gt;系统调用: 同步或异步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IA-32 Intel ® Architecture&lt;/p&gt;
&lt;p&gt;Software Developer’s Manual Volume 1: Basic Architecture给出的解释:&lt;/p&gt;
&lt;p&gt;6.4.INTERRUPTS AND EXCEPTIONS&lt;br /&gt;
The processor provides two mechanisms for interrupting program execution: interrupts and exceptions:An interrupt is an asynchronous event that is typically triggered by an I/O device.An exception is a synchronous event that is generated when the processor detects one or more predefined conditions while executing an instruction. The IA-32 architecture specifies three classes of exceptions: faults, traps, and aborts.&lt;br /&gt;
The processor responds to interrupts and exceptions in essentially the same way. When an interrupt or exception is signaled, the processor halts execution of the current program or task and switches to a handler procedure that has been written specifically to handle the interrupt or exception condition.&lt;br /&gt;
 The processor accesses the handler procedure through an entry in the interrupt descriptor table (IDT). When the handler has completed handling the interrupt or exception,program control is returned to the interrupted program or task.&lt;br /&gt;
The operating system, executive, and/or device drivers normally handle interrupts and exceptions independently from application programs or tasks. Application programs can, however,access the interrupt and exception handlers incorporated in an operating system or executive through assembly-language calls. The remainder of this section gives a brief overview of theprocessor’s interrupt and exception handling mechanism. See Chapter 5, Interrupt and Exception Handling in the IA-32 Intel Architecture Software Developer’s Manual, Volume 3, for a detailed description of this mechanism.&lt;br /&gt;
The IA-32 Architecture defines 17 predefined interrupts and exceptions and 224 user defined interrupts, which are associated with entries in the IDT. Each interrupt and exception in the IDT is identified with a number, called a vector. Table 6-1 lists the interrupts and exceptions with entries in the IDT and their respective vector numbers. Vectors 0 through 8, 10 through 14, and16 through 19 are the predefined interrupts and exceptions, and vectors 32 through 255 are the user-defined interrupts, called mask-able interrupts.&lt;br /&gt;
&lt;b&gt;定义&lt;/b&gt;：&lt;br /&gt;
中断和异常是强制性的执行流的转移，从当前正在执行的程序或任务转移到一个特殊的例程或任务。当处理器收到中断信号或检测到异常时，便挂起当前正在运行的进程或者任务，而转去执行中断或异常处理例程。中断或异常处理例程执行完毕之后，处理器继续执行被中断的进程或任务。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;分类&lt;/b&gt;：&lt;br /&gt;
&lt;b&gt;中断&lt;b&gt;：又称为异步中断，是其他硬件依照CPU时钟信号随机产生的。中断又被分为可屏蔽硬件中断和不可屏蔽中断。在微机原理课程中，处理器中有两个引脚NMI和INTR负责接受中断信号，还有高级可编程中断控制器（APIC），如8259A管理中断信号。则可屏蔽硬件中断：任何通过INTR或着局部APIC传递到处理器的中断信号都被称为可屏蔽硬件中断，由IO设备产生的IRQ（Interrupt ReQuest）也是可屏蔽硬件中断。但是通过INTR引脚传递的可屏蔽硬件中断可使用Intel架构定义的中断向量（0-255），而局部的APIC传递的部分只能使用16-255号向量。若中断信号从NMI引脚传递过来，则发生的是一个不可屏蔽中断。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;异常&lt;/b&gt;：又称为同步中断，是当指令执行时CPU控制单元产生的，之所以称为同步，是因为只有在一条指令终止执行后CPU才会发出中断。在不失进程执行连续性的同时，按引起的异常的指令是否能重新执行,且依据它们被报告的方式，异常分为错误，陷阱，和终止三种情况。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;错误&lt;/b&gt;：错误是一种通常可以能够被修正的异常，一旦修正，程序能够不失去连续性地接着执行。当报告错误发生时，处理器将机器状态恢复到执行错误之前的状态。错误处理例程的返回地址指向产生错误的指令，而不是错误指令之后的的那条指令。如页错误。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;陷阱&lt;/b&gt;：当引起陷阱的指令发生时，马上产生该异常。陷阱允许程序不失去连续性的继续执行。陷阱处理例程的返回地址指向引起陷阱的指令的下一条指令（与错误本质上的区别）。如溢出。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;终止&lt;/b&gt;：它并不总是报告产生异常的指令的确定位置，也不允许引起终止的进程或任务重新执行。如总线错误导致异常终止。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;中断向量&lt;/b&gt;：&lt;br /&gt;
Intel x86共支持256中向量中断，Intel给每种中断源编号，从0-255,并把这个无符号整数叫做一个中断向量。不可屏蔽中断的向量和异常的向量是固定的，而可屏蔽的硬件中断可以通过对中断控制器编程来改变。&lt;/p&gt;
&lt;p&gt;Linux中的中断向量：&lt;/p&gt;
&lt;p&gt;0-19的中断向量对应于异常和非屏蔽中断。&lt;/p&gt;
&lt;p&gt;20-31Intel保留&lt;/p&gt;
&lt;p&gt;32-127可屏蔽硬件中断&lt;/p&gt;
&lt;p&gt;128用于系统调用的可编程异常&lt;/p&gt;
&lt;p&gt;129-238可屏蔽硬件中断&lt;/p&gt;
&lt;p&gt;239本地APIC时钟中断&lt;/p&gt;
&lt;p&gt;240本地APIC高温中断&lt;/p&gt;
&lt;p&gt;241-250由Linux留作将来使用&lt;/p&gt;
&lt;p&gt;251-253处理器间中断&lt;/p&gt;
&lt;p&gt;254本地APIC错误中断&lt;/p&gt;
&lt;p&gt;255本地APIC伪中断(CPU屏蔽某个中断时产生的)&lt;/p&gt;
&lt;p&gt;中断描述符表：&lt;br /&gt;
中断描述符表（Interrupt Descriptor Table，IDT）是一个系统表，它与每一个中断或异常向量相关，每一个向量在表中有相应的中断或异常处理程序的入口地址。内核在允许中断发生前，必须适当地初始化IDT，用lidt汇编指令初始化idtr。&lt;/p&gt;
&lt;p&gt;任务门：当中断信号发生时，必须取代当前进程的那个进程的TSS选择符存放在任务门中。&lt;/p&gt;
&lt;p&gt;中断门：包含段选择符和中断或异常处理程序的段内偏移量。当控制权转移到一个适当的段时，处理器清IF标志，从而关闭将来会发生的可屏蔽中断。&lt;/p&gt;
&lt;p&gt;陷阱门：与中断门相似，只是控制权传递到一个适当的段时处理器不修改IF标志。&lt;/p&gt;
&lt;p&gt;Linux利用中断门处理中断，利用陷阱门处理异常。&lt;/p&gt;
&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;区分用户态与内核态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中断处理与子程序调用的区别&lt;br /&gt;
&lt;code&gt;反正中断处理一定会保护程序状态字寄存器，而子程序调用不会&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;中断向量地址是&lt;br /&gt;
&lt;code&gt;中断服务例程地址的地址&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通用库函数可以执行特权吗？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用程序发生异常时操作系统可能做什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统执行中断处理的流程包括&lt;br /&gt;
&lt;code&gt;保护现场与恢复现场是编译器做的&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;执行中断应该不是他做的吧&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下列程序工作在内核态的有&lt;br /&gt;
&lt;code&gt;系统调用[]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;中断处理程序[]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;进程调度[]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;内存管理[]&lt;/code&gt;&lt;br /&gt;
系统调用在用户态发生，内核态执行，外部中断随时发生，应用程序执行时可能发生缺页&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中断处理例程主要做什么&lt;br /&gt;
&lt;code&gt;执行开/关中断特权指令&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_6&#34;&gt;寄存器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;psw(程序状态字)&lt;br /&gt;
&lt;code&gt;用于记录当前处理器状态和控制指令的执行顺序，并且保留与运行相关的各种信息&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;主要作用:实现程序状态的恢复与保护&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;中断经常用到，但子程序调用不会用到，因为子程序调用在程序内部执行&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/java00.html</id>
    <title>[java纲]Java概论</title>
    <link href="/Language/java00.html" />
    <published>2017-09-01T21:00:00+08:00</published>

    
    <updated>2017-09-01T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;完备的系统在演变中浑然天成,要想在系统中添加新的功能,必须能够忍受带来的递归增长的问题.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;面向对象&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;五大特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;设计目标&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;安全性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;易维护性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;灵活性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;高效性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;内聚性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;特性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_12&#34;&gt;章节细化&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_13&#34;&gt;运算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_14&#34;&gt;流程控制结构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_15&#34;&gt;至少会用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;_1&#34;&gt;面向对象&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_2&#34;&gt;说明&lt;/h3&gt;
&lt;p&gt;自始至终,编程语言一步一步的提供着高程度的抽象给开发人员，从最开始的简单的自然语言的抽象,到数学语言的抽象的函数式编程，到待解决问题的抽象的面向对象,看起来，能解决问题的复杂程度取决于问题的抽象程度,程序员作为计算机与现实世界的沟通桥梁,同时承载着现实世界问题的待解决问题建模(问题空间)与所应用的计算机的机器建模(解空间)，建立这两种空间的桥梁是很复杂的，这也是面向对象的挑战，编程语言的出现无非是从这两个空间上削弱复杂度，看起来,Java语言做的不错.&lt;/p&gt;
&lt;h3 id=&#34;_3&#34;&gt;五大特性&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;万物皆对象&lt;/li&gt;
&lt;li&gt;程序是对象的集合,通过互相发送消息运作&lt;/li&gt;
&lt;li&gt;对象可以包含子对象&lt;/li&gt;
&lt;li&gt;对象具有类型&lt;/li&gt;
&lt;li&gt;某一特定类型的对象可以接受相同的消息&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;对象具有状态&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;内部数据&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;行为&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;方法&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;标识&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;类型&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_4&#34;&gt;设计目标&lt;/h3&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;没有不付出代价的特性.牺牲空间或者时间以获得安全或者效率上的出众&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_5&#34;&gt;安全性&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;我们将类库的创建者称为类创建者&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;将使用类库&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;API&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的称为客户端程序猿&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端程序员使用类库时如果操作了敏感程度高的代码可能会触发安全故障[引入访问权限控制]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;道理我都懂,那么仅仅使用public和privated不就行了吗?为什么还要有protected和default？&lt;br /&gt;
    答: 为了解决继承的访问权限问题,谁让你引入继承&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#39;#inherit&#39;&gt;可是我为什么要引入继承？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存泄漏,通用诟病,如果将对象的控制权交付给程序员本身的化容易出现人为失误,出现内存泄漏&lt;br /&gt;
&lt;code&gt;c++与java走了不同的道路,因为理念不同,c++追求效率,为了让程序猿获得更大的效率控制能力,复杂化了处理过程,程序员必须自己管理内存的分配,而java比较注重灵活性与安全性,引入了垃圾回收器,内存泄露的监控与防范交付给虚拟机灵活是必然的,但是机器毕竟不是人，会容易在效率上大打折扣.&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异常控制，java引入了错误处理将异常看做为对象,而且在众多语言中地位颇高,&lt;br /&gt;
&lt;code&gt;关于java语言的异常处理机制,目前没有深入过&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组越界&lt;br /&gt;
&lt;code&gt;引入范围检查&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;没有被初始化的类型乱用(不适用方法内变量[“局部”变量])&lt;br /&gt;
&lt;code&gt;基本类型自动数据初始化,自定义类类型引用默认NULL&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;局部&lt;/code&gt;变量不适用怎么办&lt;br /&gt;
&lt;code&gt;编译器警告&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自定义的类型包怎么初始化&lt;br /&gt;
&lt;code&gt;使用构造器&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;_6&#34;&gt;易维护性&lt;/h4&gt;
&lt;p&gt;受c语言的静态绑定影响,方法在&lt;b&gt;编译阶段绑定&lt;/b&gt;,那么问题来了,拥有一个这样的方法,子类型不断创造,但不影响方法的执行,那么就引入泛化概念吧,但是怎么解决静态绑定问题,我们这样做只是为了&lt;b&gt;方法与类型分离&lt;/b&gt;,准确的说是&lt;b&gt;方法与引用&lt;/b&gt;分离,泛化方法功能,那么,方法的地址应该是由动态创建的对象中含有的特定信息计算出来的,不像C++,为了实现这种功能,引入了virtual关键字,来告诉别人,这个方法是与类型分离的,不需要在编译期去计算方法的地址,由此看来java好像默默的给你做好了这件事,在这方面，看起来java更胜一筹.&lt;br /&gt;
&lt;code&gt;使用动态绑定&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;_7&#34;&gt;灵活性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;类库代码改变可能会影响客户端程序猿的代码[所以尽量除了API，其他的都隐藏]&lt;br /&gt;
&lt;code&gt;使用访问权限控制&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有的类对象都可以有公用的方法[比如我想使用一个可以回收任何对象垃圾的垃圾回收器]&lt;br /&gt;
&lt;code&gt;使用单根继承&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如何动态扩充存储对象的空间,运行前有可能不知道对象的多少&lt;br /&gt;
&lt;code&gt;使用容器,java提供了很多容器可选择,当然需要在性能与功能上做权衡&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;c的链表可以看做为容器的一个具体实例&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;容器里存储对对象的引用,但是要想让容器具有通用性,有可能用到单根继承的思想,即在引用中放入父类型的声明&lt;br /&gt;
&lt;code&gt;当然这延伸出了新的问题--&amp;gt;转型问题..向上转型丢失身份&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;那么有没有可能使容器存储记录对象的类型呢?&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;解决方案:引入范型(参数化类型)[Java SE5]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_8&#34;&gt;高效性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;两个问题拥有相似的解决方案,仅仅有一点差别,没必要使用两次重复的代码吧.[引入继承]&lt;span id=&#39;inherit&#39;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;code&gt;使用继承&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_9&#34;&gt;内聚性&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;动态发生的组合(composition)叫做聚合(aggregation)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/wanghuaijun/p/5421419.html&#34;&gt;聚合,组合&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将对象看作是提供服务的信息体,可以提高对象的内聚性,因为他齿轮化了问题.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_10&#34;&gt;特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;并发编程&lt;/li&gt;
&lt;li&gt;Java web&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_11&#34;&gt;最佳实践&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;设计时优先考虑组合其次考虑继承&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_12&#34;&gt;章节细化&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_13&#34;&gt;运算&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;运算符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意赋值运算符,赋值不是简简单单的数理符号,如果他的操作数是对象的话.&lt;/li&gt;
&lt;li&gt;注意运算优先级&lt;/li&gt;
&lt;li&gt;逻辑运算符的“短路”特性&lt;/li&gt;
&lt;li&gt;按位运算符&lt;/li&gt;
&lt;li&gt;移位运算符&lt;/li&gt;
&lt;li&gt;语法糖运算符&lt;ul&gt;
&lt;li&gt;+=&lt;/li&gt;
&lt;li&gt;-=&lt;/li&gt;
&lt;li&gt;/=&lt;/li&gt;
&lt;li&gt;*=&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三元运算符&lt;/li&gt;
&lt;li&gt;类型转换&lt;ul&gt;
&lt;li&gt;基本类型的转换&lt;/li&gt;
&lt;li&gt;截断与舍入[暂时忘了]&lt;/li&gt;
&lt;li&gt;自定义类型的转换&lt;ul&gt;
&lt;li&gt;不会丢失信息&lt;/li&gt;
&lt;li&gt;会丢失身份&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接量&lt;ul&gt;
&lt;li&gt;类型与进制&lt;ul&gt;
&lt;li&gt;33f,33d,33l[直接量的显示声明]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编译器对直接量的选择&lt;/li&gt;
&lt;li&gt;通常将指数以double形式使用&lt;/li&gt;
&lt;li&gt;通常普通整数以int形式存储使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_14&#34;&gt;流程控制结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;foreach[Java SE5]&lt;br /&gt;
&lt;code&gt;用于数组和容器的迭代,也可以迭代字符串&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;n&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;c:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;i am very happy today&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//range为自己定制的Range&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;a:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)){&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;void 方法末尾添加隐式的&lt;code&gt;return&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;label&lt;br /&gt;
&lt;code&gt;与continue和break结合使用,类似goto,用起来还不错&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;java限制的很,label只能紧邻循环体结构之上&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;switch&lt;br /&gt;
&lt;code&gt;Only convertible int values and emun variables are permitted&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;c1&#34;&gt;//以下代码就是错误的,注意char可以转int&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//switch目前只支持整数，char和emun，long也不行哦&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;missing&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_15&#34;&gt;至少会用&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Random&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;你认为什么人可以说自己精通面向对象&lt;br /&gt;
&lt;code&gt;将面向对象与class分离吧，类是面向对象的特性,但不是全部&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;什么是类&lt;br /&gt;
&lt;code&gt;问题空间问题的抽象建模&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为什么使用类&lt;br /&gt;
&lt;code&gt;大概java设计者学习过算法吧:)[笑],个人以为这是看透了问题空间问题与问题的关系&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为什么普通字段不能在对象之间共享&lt;br /&gt;
&lt;code&gt;破坏了问题的独立性,现实生活中不也是这么,你以为面相对象是解决什么问题的&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;谈一谈方法有什么要注意的&lt;br /&gt;
&lt;code&gt;对编译器来说,如果不想出现歧义的调用方法,那么就得在语法上限制方法,需要找一个东西唯一标识,那么我们就把它称为签名吧,一开始学c的时候我和同学讨论,c对方法的检查虽然简单,是啊,但是课本里至少讲一下吧,老师用看智障的眼神说,谁特么秀逗的在一个文件里写两个一模一样的方法名,但是面向对象引入重载后,就不得不谈了,方法之间必须有明确的界限,而且还要提到教育高度笑～&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;能不能讲一下static？&lt;br /&gt;
&lt;code&gt;不会自己思考么？&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;如果不是学妹长得漂亮就不回答了....&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;首先相当于c中的全局方法吧,没有对象我也想有方法啊？总不能为了实现一个简单的功能我必须创建对象吧,它能够在对象之前产生,所以你说在它里面使用this合适不？别说编译器给你检查这个问题了，在eclipse中文本编辑器都给你检查出红色波浪线，其实这样说过于轻率了,从设计思想来说吧,不可避免的比如你的兄弟节点想得知有多少兄弟们,人类可以通过观察计数,对于对象来说,他没有主动观察能力,只能靠外界信息传递,有必要提供这么一个信息接口,而且要独立在对象之外,放在类里面.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你喜欢java哪一点?&lt;br /&gt;
&lt;code&gt;可以定制更强大的sdk？最主要写起来方便&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;有人说看见java的helloworld这么难写就放弃了,你有什么看法？&lt;br /&gt;
&lt;code&gt;自己不会定制一下？mdzz,再不济也可以用inport static 啊&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;谈一谈sizeof,为什么java没有&lt;br /&gt;
&lt;code&gt;因为java不需要在语言级别解决平台移植问题,至于c++中的小打小闹用其他方式替代了&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;java引用到底和指针有什么区别呢?&lt;br /&gt;
&lt;code&gt;区别很大,指针是自由的,引用并非自由,指针理论能操纵任意一块地址,但一旦引用的对象死亡,引用就再也不能用了&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;能不能简略的讲一下java文档能力？&lt;br /&gt;
&lt;code&gt;这个我会专门的写一篇文章&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/markdown下编辑公式教程.html</id>
    <title>页面渲染Latex字符</title>
    <link href="/Language/markdown下编辑公式教程.html" />
    <published>2017-08-26T00:00:00+08:00</published>

    
    <updated>2017-08-26T00:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mathjax&#34;&gt;MathJax功能引入&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;外联引入使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#customize-configuration&#34;&gt;内联Customize Configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;页面使用&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;基本用法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;常见的转字符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;希腊字母&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;字体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;常见的表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;已完善&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;_1&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;满怀欢喜的以为Markdown支持了Latex渲染，然而并没有在此WIKI使用,没有办法只能自己渲染，还好网络上有提供的开源的库直接使用。&lt;/p&gt;
&lt;h1 id=&#34;mathjax&#34;&gt;MathJax功能引入&lt;/h1&gt;
&lt;h2 id=&#34;_2&#34;&gt;外联引入使用&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;#官方有可能慢&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#国内&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;//cdn.bootcss.com/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;customize-configuration&#34;&gt;内联Customize Configuration&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/x-mathjax-config&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
MathJax.Hub.Config({
  #customize
});
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;path-to-MathJax/MathJax.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;_3&#34;&gt;页面使用&lt;/h1&gt;
&lt;h2 id=&#34;_4&#34;&gt;基本用法&lt;/h2&gt;
&lt;p&gt;行间公式：&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;$$&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;quot;公式&amp;quot;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;行内公式:&lt;code&gt;$&#34;公式&#34;$&lt;/code&gt;  注：有的地方可能需要用小括号将公式括起来：&lt;code&gt;$(&#34;公式&#34;)$&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;_5&#34;&gt;常见的转字符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;求和: \sum_{i=1}^n{x_i}  ($(\sum_{i=1}^n{x_i})$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;趋近于: \to  ($(\to)$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无穷大: \infty ($(\infty)$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二元关系: \times ($(\times)$), \div ($(\div)$), \pm ($(\pm)$), \circ ($(\circ)$), \cdot ($(\cdot)$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系运算符：如\leq(≤), \geq(≥), \subset(⊂), \supset(⊃), \in(∈), \bigcup $(\bigcup)$, \bigcap $(\bigcap)$, \iint $(\iint)$, \int $(\int)$;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;否定关系运算符：如\not=(≠), \not&amp;lt;(≮), \not\supset (⊅);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;箭头, \leftarrow(←), \rightarrow(→), \longrightarrow(⟶), \uparrow(↑)等;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绝对值， \vert{x}\vert ($(\vert{x}\vert)$), \Vert{x}\Vert ($(\Vert{x}\Vert)$), \langle{x}\rangle ($(\langle{x}\rangle)$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其它符号, \nabla(∇), \angle(∠), \forall(∀), \exists(∃), \prime(导数的撇′).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而对于专有名词,如一些函数名, 如sin x中的sin, 就要用罗马体, 而不是一般的数学斜体排印,我们可以用sinx, 也可以用TeX提供的直接在函数名前加”\”的方法: sinx,一般的函数均有定义, 如\sin, \cos, \lim, \log等.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_6&#34;&gt;希腊字母&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;字母名称&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;大写&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;markdown语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;小写&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;markdown语法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;alpha&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(A)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\alpha)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\alpha&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;beta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(B)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\beta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\beta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gamma&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Gamma)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Gamma&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\gamma)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\gamma&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;delta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Delta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Delta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\delta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\delta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;epsilon&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(E)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;E&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\epsilon)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\epsilon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\varepsilon)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\varepsilon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;zeta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(Z)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Z&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\zeta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\zeta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;eta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(E)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;E&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\eta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\eta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;theta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Theta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Theta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\theta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\theta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;iota&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(I)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;I&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\iota)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\iota&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;kappa&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(K)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;K&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\kappa)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\kappa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;lambda&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Lambda)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Lambda&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\lambda)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\lambda&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Mu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(M)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;M&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\mu)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\mu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;nu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(N)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\nu)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\nu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;xi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Xi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Xi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Xi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\xi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;omicron&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(O)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\omicron)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\omicron&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;pi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(Pi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Pi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\pi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;pi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;rho&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(P)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;P&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\rho)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\rho&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;sigma&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Sigma)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Sigma&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\sigma)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\sigma&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;tau&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(T)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;T&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\tau)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\tau&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;upsilon&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Upsilon)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Upsilon&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\upsilon)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\upsilon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;phi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Phi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Phi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\phi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\phi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\varphi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\varphi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;chi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(X)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\chi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\chi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;psi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Psi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Psi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\psi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\psi&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;_7&#34;&gt;字体&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use \mathbb or \Bbb for &#34;blackboard bold&#34;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathbb{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathbf for boldface:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathbf{abcefghijklmnopqrstuvwxyz})$.&lt;/li&gt;
&lt;li&gt;$(\mathbf{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathtt for &#34;typewriter&#34; font:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathtt{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathtt{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathrm for roman font:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathrm{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathrm{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathsf for sans-serif font:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathsf{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathsf{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathcal for &#34;calligraphic&#34; letters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathcal{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathcal{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathscr for script letters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathscr{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathscr{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathfrak for &#34;Fraktur&#34; (old German style) letters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathfrak{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathfrak{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_8&#34;&gt;常见的表达式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分数：$$\frac{a+1}{a-1}$$&lt;br /&gt;
语法： \frac{a+1}{a-1}&lt;/li&gt;
&lt;li&gt;$$\sum_{i=0}^n {i^2} ={\frac{(i+1)(i^2+6)}{i-1}}$$&lt;br /&gt;
语法：\sum_{i=0}^n {i^2} ={\frac{(i+1)(i^2+6)}{i-1}}&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;_9&#34;&gt;参考文献&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/Linear_Luo/article/details/52224996&#34;&gt;MarkDown(LaTex) 数学公式&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&#34;&gt;MATHEMATICS meta&lt;/a&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Life/杂想一.html</id>
    <title>关于恐惧</title>
    <link href="/Life/杂想一.html" />
    <published>2017-08-25T19:00:00+08:00</published>

    
    <updated>2017-08-25T19:00:00+08:00</updated>
    

    
    <category term="Life" />
    

    
    <content type="html">&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;人类的恐惧&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;听觉类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;视觉类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;触觉类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; left:80px; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/scared.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h1 id=&#34;_1&#34;&gt;人类的恐惧&lt;/h1&gt;
&lt;h2 id=&#34;_2&#34;&gt;听觉类&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;Example:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;指甲抓黑板，泡沫摩擦&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;厌恶类&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、电影制作中采用的音乐&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;恐惧类&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;科学数据：&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;来源见文献参考&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;人类厌恶的声音频段&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kHz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kHz&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生理观点：人类耳道的架构决定了其在&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kHz&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;频段产生共振，最高可将该频段的声音放大&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dB&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;心理观点：人会主观性的对一些行为厌恶&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;进化观点：与远古时期人类被怪兽咬骨头时发出的声音相似&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;个人倾向&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;&#34;&gt;未完待续&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;_3&#34;&gt;视觉类&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;Example:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;骷髅头、恐怖谷效应、带血的眼睛&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;进化观点：视觉危机预警&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;&#34;&gt;未完待续&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;_4&#34;&gt;触觉类&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;Example:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;在暗箱触摸虫类&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;心理观点：大多数人对未知充满恐惧&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;&#34;&gt;未完待续&lt;/a&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Linux/fileMean.html</id>
    <title>文件介绍</title>
    <link href="/Linux/fileMean.html" />
    <published>2017-09-08T21:00:00+08:00</published>

    
    <updated>2017-09-08T21:00:00+08:00</updated>
    

    
    <category term="Linux" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;b style=&#34;color:red&#34;&gt;电脑维修中,只能先备份了...&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[/etc/services] 存放服务器服务及其占用端口号&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
</feed>
