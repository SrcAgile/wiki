<?xml version="1.0" encoding="utf-8"?>

  

<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://simiki.org/" version="1.6.2.1">Simiki</generator>
  <title>Meta's Wiki</title>
  <link href="/" />
  <link href="/atom.xml" rel="self" type="application/atom+xml" />
  <updated>2017-10-09T11:00:13+08:00</updated>
  <id></id>
  <author>
    <name>Guozhen Li</name>
  </author>
  
    
  <entry>
    <id>/Tool/vim01.html</id>
    <title>VIM大法</title>
    <link href="/Tool/vim01.html" />
    <published>2017-09-20T02:00:00+08:00</published>

    
    <updated>2017-09-20T02:00:00+08:00</updated>
    

    
    <category term="Tool" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;EMACSer们,亮剑吧!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/vim.gif&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;问题集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;起源&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#root&#34;&gt;root保存权限问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;intro&#34;&gt;Intro&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;宇宙第一不介绍&lt;/p&gt;
&lt;h3 id=&#34;_1&#34;&gt;问题集&lt;/h3&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_2&#34;&gt;起源&lt;/h3&gt;
&lt;p&gt;事情是这样的,那是大一的春天,有一天我打开vim进行保存的时候,呵呵.&lt;br /&gt;
&lt;b style=&#39;color:white; background-color:red&#39;&gt;&#34;m&#34; E212: Can&#39;t open file for writing&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;有&lt;del&gt;毛病&lt;/del&gt;错误?爸爸来整你!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开始&lt;code&gt;:help E212&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;得到答案&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&#39;background-color:black; color:green&#39;&gt;                                                       &lt;b&gt;*E190* *E212*
  Cannot open &#34;{filename}&#34; for writing
  Can&#39;t open file for writing For some reason the file you are writing to cannot be created or overwritten.
The reason could be that you do not have permission to write in the directory
or the file name is not valid.
&lt;/b&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;搜了得出使用 &lt;code&gt;w !sudo tee %&lt;/code&gt;,从此踏上不归路&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;root&#34;&gt;root保存权限问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/at&t.html</id>
    <title>AT&amp;T汇编速览</title>
    <link href="/Language/at&t.html" />
    <published>2017-09-20T21:00:00+08:00</published>

    
    <updated>2017-09-20T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;为了完成操作系统也是蛮拼的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=31789216&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#80386&#34;&gt;80386寄存器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;句法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;语法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#num&#34;&gt;立即数$num&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regis&#34;&gt;寄存器$regis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#symbol-constant&#34;&gt;symbol constant(符号常量)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#length-of-operator&#34;&gt;length of Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sign-and-zero-extension&#34;&gt;Sign and Zero Extension(符号扩展和零扩展)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#call-and-jump&#34;&gt;Call and Jump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prefix&#34;&gt;Prefix(&lt;b&gt;操作码&lt;/b&gt;前缀)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#memory-reference&#34;&gt;Memory Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;内联汇编&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;前言&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;为了开发linux下的os,使用到了汇编语言,虽然对8086的汇编基本了解,但是众所周知这里我如果使用GCC+GAS的话必须了解AT&amp;amp;T汇编语言.&lt;/p&gt;
&lt;h3 id=&#34;80386&#34;&gt;80386寄存器&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;16bit寄存器实际上是32bit寄存器的低16位&lt;/li&gt;
&lt;li&gt;8bit寄存器实际上是16bit寄存器&lt;code&gt;%ax,%bx,%cx,%dx&lt;/code&gt;的低8位和高8位&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;32bit&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;16bit&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;8bit&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;%eax&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%ax&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%ah&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;%ebx&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%bx&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%al&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;%ecx&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%cx&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%bh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;%edx&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%dx&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%bl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;%edi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%di&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%ch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;%esi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%si&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%cl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;%ebp&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%bp&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%dh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;%esp&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%sp&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;%dl&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;6个段寄存器&lt;ul&gt;
&lt;li&gt;%cs(code)&lt;/li&gt;
&lt;li&gt;%ds(data)&lt;/li&gt;
&lt;li&gt;%ss(satck)&lt;/li&gt;
&lt;li&gt;%es&lt;/li&gt;
&lt;li&gt;%fs&lt;/li&gt;
&lt;li&gt;%gs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3个控制寄存器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;%cr0(control)&lt;/li&gt;
&lt;li&gt;%cr2&lt;/li&gt;
&lt;li&gt;%cr3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6个debug寄存器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;%db0&lt;/li&gt;
&lt;li&gt;%db1&lt;/li&gt;
&lt;li&gt;%db2&lt;/li&gt;
&lt;li&gt;%db3&lt;/li&gt;
&lt;li&gt;%db6&lt;/li&gt;
&lt;li&gt;%db7&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个测试存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;%tr6&lt;/li&gt;
&lt;li&gt;%tr7&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;8个浮点寄存器栈&lt;ul&gt;
&lt;li&gt;%str(0)&lt;/li&gt;
&lt;li&gt;%str(1)&lt;/li&gt;
&lt;li&gt;%str(2)&lt;/li&gt;
&lt;li&gt;%str(3)&lt;/li&gt;
&lt;li&gt;%str(4)&lt;/li&gt;
&lt;li&gt;%str(5)&lt;/li&gt;
&lt;li&gt;%str(6)&lt;/li&gt;
&lt;li&gt;%str(7)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;_2&#34;&gt;法&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_3&#34;&gt;句法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;左源右目的&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;_4&#34;&gt;语法&lt;/h4&gt;
&lt;h5 id=&#34;num&#34;&gt;立即数&lt;code&gt;$num&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;regis&#34;&gt;寄存器&lt;code&gt;$regis&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;symbol-constant&#34;&gt;symbol constant(符号常量)&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;nl&#34;&gt;value:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x12a3f2de&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;movl&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#装&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x12a3f2de&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ebx&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;movl&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#装符号&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的地址&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ebx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;length-of-operator&#34;&gt;length of Operator&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bl&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bx&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;b&gt;W&lt;/b&gt;:如果没有指定操作数长度的话,编译期按照目标操作数的长度来设置,如果目标操作数无指定长度,编译器报错,例如 &lt;code&gt;push $4&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;sign-and-zero-extension&#34;&gt;Sign and Zero Extension(符号扩展和零扩展)&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;符号扩展指令和零扩展指令需要指定源操作数长度和目的操作数长度,即使在某些指令中这些操作数是隐含的。&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;在&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;语法中&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;符号扩展和零扩展指令的格式为&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;基本部分&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;movs&amp;quot;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;和&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;movz&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对应&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Intel&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;语法的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movsx&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;和&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movzx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;后面跟上源操作数长度和目的操作数长度。&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movsbl&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;意味着&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;movs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movbw&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;意味着&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movswl&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;意味着&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。对于&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movz&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指令也一样。比如指令“&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movsbl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;”&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;意味着将&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;al&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;寄存器的内容进行符号扩展后放置到&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;edx&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;寄存器中。&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;其它的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Intel&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;格式的符号扩展指令还有&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cbw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extend&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cwde&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extend&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cwd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extend&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cdq&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extend&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quad&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;对应的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;语法的指令为&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cbtw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cwtl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cwtd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cltd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;call-and-jump&#34;&gt;Call and Jump&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;段内call+jump&lt;br /&gt;
&lt;code&gt;call&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;ret&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;jmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;段间call+jump&lt;br /&gt;
&lt;code&gt;lcall&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;lret&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;ljmp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;prefix&#34;&gt;Prefix(&lt;b&gt;操作码&lt;/b&gt;前缀)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;. 字符串重复操作指令(rep,repne);&lt;br /&gt;
&lt;code&gt;用来让字符串操作重复“%ecx” 次&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;. 指定被操作的段(cs,ds,ss,es,fs,gs);&lt;/li&gt;
&lt;li&gt;. 进行总线加锁(lock)&lt;br /&gt;
&lt;code&gt;多处理器环境&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;.  指定地址和操作的大小(data16,addr16)&lt;br /&gt;
&lt;code&gt;它们被用来在 32-bit 操作数/地址
代码中指定 16-bit 的操作数/地址&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;在&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;汇编语法中&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;操作码前缀通常被单独放在一行&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;后面不跟任何操作数。例如&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;对于重复&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scas&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指令&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;其写法为&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;repne&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;scas&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;memory-reference&#34;&gt;Memory Reference&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Intel&lt;br /&gt;
&lt;code&gt;section:[base+index*scale+displacement]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;AT&amp;amp;&lt;br /&gt;
&lt;code&gt;section:displacement(base,index,scale)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;nl&#34;&gt;EXAMPLE1:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;EXPLAIN1:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;displacement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;没有指定&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;err&#34;&gt;因&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;故&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scale&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;没有指定&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;则&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;为&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;EXAMPLE2:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;EXPLAIN2:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;displacement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;
            &lt;span class=&#34;err&#34;&gt;其它域没有指定&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;默认&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;EXAMPLE3:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;EXPLAIN3:&lt;/span&gt;
            &lt;span class=&#34;err&#34;&gt;这个表达式引用的是指针&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指向的地址所存放的值&lt;/span&gt;
            &lt;span class=&#34;err&#34;&gt;这是一种异常语法&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;但却合法&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;EXAMPLE4:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;EXPLAIN4:&lt;/span&gt;
            &lt;span class=&#34;err&#34;&gt;表达式引用的是放置于&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gs&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;段里变量&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_5&#34;&gt;内联汇编&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;暂停&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/java00.html</id>
    <title>语言[J]概论</title>
    <link href="/Language/java00.html" />
    <published>2017-09-01T21:00:00+08:00</published>

    
    <updated>2017-09-01T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;完备的系统在演变中浑然天成,要想在系统中添加新的功能,必须能够忍受带来的递归增长的问题.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;面向对象&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;五大特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;设计目标&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;安全性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;易维护性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;灵活性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;高效性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;内聚性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;特性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_12&#34;&gt;章节细化&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_13&#34;&gt;运算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_14&#34;&gt;流程控制结构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_15&#34;&gt;至少会用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;_1&#34;&gt;面向对象&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_2&#34;&gt;说明&lt;/h3&gt;
&lt;p&gt;自始至终,编程语言一步一步的提供着高程度的抽象给开发人员，从最开始的简单的自然语言的抽象,到数学语言的抽象的函数式编程，到待解决问题的抽象的面向对象,看起来，能解决问题的复杂程度取决于问题的抽象程度,程序员作为计算机与现实世界的沟通桥梁,同时承载着现实世界问题的待解决问题建模(问题空间)与所应用的计算机的机器建模(解空间)，建立这两种空间的桥梁是很复杂的，这也是面向对象的挑战，编程语言的出现无非是从这两个空间上削弱复杂度，看起来,Java语言做的不错.&lt;/p&gt;
&lt;h3 id=&#34;_3&#34;&gt;五大特性&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;万物皆对象&lt;/li&gt;
&lt;li&gt;程序是对象的集合,通过互相发送消息运作&lt;/li&gt;
&lt;li&gt;对象可以包含子对象&lt;/li&gt;
&lt;li&gt;对象具有类型&lt;/li&gt;
&lt;li&gt;某一特定类型的对象可以接受相同的消息&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;对象具有状态&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;内部数据&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;行为&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;方法&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;标识&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;类型&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_4&#34;&gt;设计目标&lt;/h3&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;没有不付出代价的特性.牺牲空间或者时间以获得安全或者效率上的出众&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_5&#34;&gt;安全性&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;我们将类库的创建者称为类创建者&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;将使用类库&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;API&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的称为客户端程序猿&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端程序员使用类库时如果操作了敏感程度高的代码可能会触发安全故障[引入访问权限控制]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;道理我都懂,那么仅仅使用public和privated不就行了吗?为什么还要有protected和default？&lt;br /&gt;
    答: 为了解决继承的访问权限问题,谁让你引入继承&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#39;#inherit&#39;&gt;可是我为什么要引入继承？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存泄漏,通用诟病,如果将对象的控制权交付给程序员本身的化容易出现人为失误,出现内存泄漏&lt;br /&gt;
&lt;code&gt;c++与java走了不同的道路,因为理念不同,c++追求效率,为了让程序猿获得更大的效率控制能力,复杂化了处理过程,程序员必须自己管理内存的分配,而java比较注重灵活性与安全性,引入了垃圾回收器,内存泄露的监控与防范交付给虚拟机灵活是必然的,但是机器毕竟不是人，会容易在效率上大打折扣.&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异常控制，java引入了错误处理将异常看做为对象,而且在众多语言中地位颇高,&lt;br /&gt;
&lt;code&gt;关于java语言的异常处理机制,目前没有深入过&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组越界&lt;br /&gt;
&lt;code&gt;引入范围检查&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;没有被初始化的类型乱用(不适用方法内变量[“局部”变量])&lt;br /&gt;
&lt;code&gt;基本类型自动数据初始化,自定义类类型引用默认NULL&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;局部&lt;/code&gt;变量不适用怎么办&lt;br /&gt;
&lt;code&gt;编译器警告&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自定义的类型包怎么初始化&lt;br /&gt;
&lt;code&gt;使用构造器&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;_6&#34;&gt;易维护性&lt;/h4&gt;
&lt;p&gt;受c语言的静态绑定影响,方法在&lt;b&gt;编译阶段绑定&lt;/b&gt;,那么问题来了,拥有一个这样的方法,子类型不断创造,但不影响方法的执行,那么就引入泛化概念吧,但是怎么解决静态绑定问题,我们这样做只是为了&lt;b&gt;方法与类型分离&lt;/b&gt;,准确的说是&lt;b&gt;方法与引用&lt;/b&gt;分离,泛化方法功能,那么,方法的地址应该是由动态创建的对象中含有的特定信息计算出来的,不像C++,为了实现这种功能,引入了virtual关键字,来告诉别人,这个方法是与类型分离的,不需要在编译期去计算方法的地址,由此看来java好像默默的给你做好了这件事,在这方面，看起来java更胜一筹.&lt;br /&gt;
&lt;code&gt;使用动态绑定&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;_7&#34;&gt;灵活性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;类库代码改变可能会影响客户端程序猿的代码[所以尽量除了API，其他的都隐藏]&lt;br /&gt;
&lt;code&gt;使用访问权限控制&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有的类对象都可以有公用的方法[比如我想使用一个可以回收任何对象垃圾的垃圾回收器]&lt;br /&gt;
&lt;code&gt;使用单根继承&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如何动态扩充存储对象的空间,运行前有可能不知道对象的多少&lt;br /&gt;
&lt;code&gt;使用容器,java提供了很多容器可选择,当然需要在性能与功能上做权衡&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;c的链表可以看做为容器的一个具体实例&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;容器里存储对对象的引用,但是要想让容器具有通用性,有可能用到单根继承的思想,即在引用中放入父类型的声明&lt;br /&gt;
&lt;code&gt;当然这延伸出了新的问题--&amp;gt;转型问题..向上转型丢失身份&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;那么有没有可能使容器存储记录对象的类型呢?&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;解决方案:引入范型(参数化类型)[Java SE5]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_8&#34;&gt;高效性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;两个问题拥有相似的解决方案,仅仅有一点差别,没必要使用两次重复的代码吧.[引入继承]&lt;span id=&#39;inherit&#39;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;code&gt;使用继承&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_9&#34;&gt;内聚性&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;动态发生的组合(composition)叫做聚合(aggregation)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/wanghuaijun/p/5421419.html&#34;&gt;聚合,组合&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将对象看作是提供服务的信息体,可以提高对象的内聚性,因为他齿轮化了问题.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_10&#34;&gt;特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;并发编程&lt;/li&gt;
&lt;li&gt;Java web&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_11&#34;&gt;最佳实践&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;设计时优先考虑组合其次考虑继承&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_12&#34;&gt;章节细化&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_13&#34;&gt;运算&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;运算符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意赋值运算符,赋值不是简简单单的数理符号,如果他的操作数是对象的话.&lt;/li&gt;
&lt;li&gt;注意运算优先级&lt;/li&gt;
&lt;li&gt;逻辑运算符的“短路”特性&lt;/li&gt;
&lt;li&gt;按位运算符&lt;/li&gt;
&lt;li&gt;移位运算符&lt;/li&gt;
&lt;li&gt;语法糖运算符&lt;ul&gt;
&lt;li&gt;+=&lt;/li&gt;
&lt;li&gt;-=&lt;/li&gt;
&lt;li&gt;/=&lt;/li&gt;
&lt;li&gt;*=&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三元运算符&lt;/li&gt;
&lt;li&gt;类型转换&lt;ul&gt;
&lt;li&gt;基本类型的转换&lt;/li&gt;
&lt;li&gt;截断与舍入[暂时忘了]&lt;/li&gt;
&lt;li&gt;自定义类型的转换&lt;ul&gt;
&lt;li&gt;不会丢失信息&lt;/li&gt;
&lt;li&gt;会丢失身份&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接量&lt;ul&gt;
&lt;li&gt;类型与进制&lt;ul&gt;
&lt;li&gt;33f,33d,33l[直接量的显示声明]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编译器对直接量的选择&lt;/li&gt;
&lt;li&gt;通常将指数以double形式使用&lt;/li&gt;
&lt;li&gt;通常普通整数以int形式存储使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_14&#34;&gt;流程控制结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;foreach[Java SE5]&lt;br /&gt;
&lt;code&gt;用于数组和容器的迭代,也可以迭代字符串&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;n&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;c:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;i am very happy today&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//range为自己定制的Range&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;a:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)){&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;void 方法末尾添加隐式的&lt;code&gt;return&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;label&lt;br /&gt;
&lt;code&gt;与continue和break结合使用,类似goto,用起来还不错&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;java限制的很,label只能紧邻循环体结构之上&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;switch&lt;br /&gt;
&lt;code&gt;Only convertible int values and emun variables are permitted&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;c1&#34;&gt;//以下代码就是错误的,注意char可以转int&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//switch目前只支持整数，char和emun，long也不行哦&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;missing&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_15&#34;&gt;至少会用&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Random&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;你认为什么人可以说自己精通面向对象&lt;br /&gt;
&lt;code&gt;将面向对象与class分离吧，类是面向对象的特性,但不是全部&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;什么是类&lt;br /&gt;
&lt;code&gt;问题空间问题的抽象建模&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为什么使用类&lt;br /&gt;
&lt;code&gt;大概java设计者学习过算法吧:)[笑],个人以为这是看透了问题空间问题与问题的关系&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为什么普通字段不能在对象之间共享&lt;br /&gt;
&lt;code&gt;破坏了问题的独立性,现实生活中不也是这么,你以为面相对象是解决什么问题的&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;谈一谈方法有什么要注意的&lt;br /&gt;
&lt;code&gt;对编译器来说,如果不想出现歧义的调用方法,那么就得在语法上限制方法,需要找一个东西唯一标识,那么我们就把它称为签名吧,一开始学c的时候我和同学讨论,c对方法的检查虽然简单,是啊,但是课本里至少讲一下吧,老师用看智障的眼神说,谁特么秀逗的在一个文件里写两个一模一样的方法名,但是面向对象引入重载后,就不得不谈了,方法之间必须有明确的界限,而且还要提到教育高度笑～&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;能不能讲一下static？&lt;br /&gt;
&lt;code&gt;不会自己思考么？&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;如果不是学妹长得漂亮就不回答了....&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;首先相当于c中的全局方法吧,没有对象我也想有方法啊？总不能为了实现一个简单的功能我必须创建对象吧,它能够在对象之前产生,所以你说在它里面使用this合适不？别说编译器给你检查这个问题了，在eclipse中文本编辑器都给你检查出红色波浪线，其实这样说过于轻率了,从设计思想来说吧,不可避免的比如你的兄弟节点想得知有多少兄弟们,人类可以通过观察计数,对于对象来说,他没有主动观察能力,只能靠外界信息传递,有必要提供这么一个信息接口,而且要独立在对象之外,放在类里面.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你喜欢java哪一点?&lt;br /&gt;
&lt;code&gt;可以定制更强大的sdk？最主要写起来方便&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;有人说看见java的helloworld这么难写就放弃了,你有什么看法？&lt;br /&gt;
&lt;code&gt;自己不会定制一下？mdzz,再不济也可以用inport static 啊&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;谈一谈sizeof,为什么java没有&lt;br /&gt;
&lt;code&gt;因为java不需要在语言级别解决平台移植问题,至于c++中的小打小闹用其他方式替代了&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;java引用到底和指针有什么区别呢?&lt;br /&gt;
&lt;code&gt;区别很大,指针是自由的,引用并非自由,指针理论能操纵任意一块地址,但一旦引用的对象死亡,引用就再也不能用了&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;能不能简略的讲一下java文档能力？&lt;br /&gt;
&lt;code&gt;这个我会专门的写一篇文章&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/Intro.html</id>
    <title>目录地图</title>
    <link href="/Language/Intro.html" />
    <published>2017-08-25T21:00:00+08:00</published>

    
    <updated>2017-08-25T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Language目录下的文章均属于&lt;a href=&#34;../Tool&#34;&gt;工具类&lt;/a&gt;的子集,语言本身就是描述与研究世界现象的工具.&lt;br /&gt;
由于选用的此Wiki暂时没有建立页面目录分级功能,且此类文章较多故只能将其分离出来&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;编程语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#python&#34;&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_1&#34;&gt;编程语言&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;java&#34;&gt;Java&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;./java00.html&#34;&gt;语言J概论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./java01.html&#34;&gt;创建J清理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./java03.html&#34;&gt;数据J类型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;python&#34;&gt;python&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;./pythonkey.html&#34;&gt;关键字及特殊概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./Panalyse.html&#34;&gt;源码分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Os/config.html</id>
    <title>Syscof/1</title>
    <link href="/Os/config.html" />
    <published>2017-09-08T21:00:00+08:00</published>

    
    <updated>2017-09-08T21:00:00+08:00</updated>
    

    
    <category term="Os" />
    

    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;致力学习到策略,而非限制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#linux&#34;&gt;linux配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;环境变量&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;查看&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;常见&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;使用语言&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;linux&#34;&gt;linux配置&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;配置是具有范围的,时效的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;_1&#34;&gt;环境变量&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_2&#34;&gt;分类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;生命周期&lt;br /&gt;
&lt;code&gt;永久的,修改配置文件生效&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;暂时的,使用export在shell生效&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;作用域&lt;br /&gt;
&lt;code&gt;系统环境变量,对所有用户生效&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;用户环境变量,对指定用户生效&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;当前shell&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_3&#34;&gt;配置&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;作用域:所有用户+生命周期:永久的&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;vim /etc/profile
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CLASSPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./JAVA_HOME/lib;&lt;span class=&#34;nv&#34;&gt;$JAVA_HOME&lt;/span&gt;/jre/lib
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; /etc/profile
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;作用域:当前用户+生命周期:永久的&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;vim ~/.bash.profile
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CLASSPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./JAVA_HOME/lib;&lt;span class=&#34;nv&#34;&gt;$JAVA_HOME&lt;/span&gt;/jre/lib
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.bash.profile
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;作用域:当前shell+生命周期:临时的&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CLASSPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./JAVA_HOME/lib;&lt;span class=&#34;nv&#34;&gt;$JAVA_HOME&lt;/span&gt;/jre/lib
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_4&#34;&gt;查看&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;#注意大小写&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_5&#34;&gt;常见&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;查看所有shell变量&lt;br /&gt;
&lt;code&gt;$ export&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看所有环境变量&lt;br /&gt;
&lt;code&gt;$ env&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PATH 指定命令的搜索路径&lt;br /&gt;
&lt;code&gt;$ export PATH=$PATH:/NEW/PATH&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_6&#34;&gt;使用语言&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;C语言&lt;/strong&gt;&lt;br /&gt;
- getenv()返回一个环境变量&lt;br /&gt;
- setenv()设置一个环境变量&lt;br /&gt;
- unsetenv()清除一个环境变量&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/编码/进制.html</id>
    <title>进制介绍</title>
    <link href="/编码/进制.html" />
    <published>2017-09-06T11:00:00+08:00</published>

    
    <updated>2017-09-06T11:00:00+08:00</updated>
    

    
    <category term="编码" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;编码让少量的数据存储大量的信息.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;计算机进制&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;进制的转换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;谈谈语言中的进制转换&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;_1&#34;&gt;计算机进制&lt;/h2&gt;
&lt;p&gt;在 二进制,三进制,十进制的筛选中,选择了二进制,但这并不意味着二进制在某种程度上优于三进制&lt;/p&gt;
&lt;h3 id=&#34;_2&#34;&gt;进制的转换&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;b&gt;整数二进制转换&lt;/b&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;trans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;trans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;b&gt;纯小数二进制转换&lt;/b&gt;&lt;br /&gt;
设小数二进制为0.$a_1,a_2,a_3...a_n$&lt;br /&gt;
设小数十进制为0.$b_1,b_2,b_3...b_n$&lt;br /&gt;
转化十进制公式 $(2^{-1}\times(a_1+2^{-1}\times(a_2+2^{-1}\times(...))))$&lt;br /&gt;
所以&lt;br /&gt;
对于十进制纯小数来说&lt;br /&gt;
在公式层面每乘一次相当于拆一层外围括号,露出里面的部分&lt;br /&gt;
在二进制运算层面相当于左移一位,此时看一看小数点左边第一位就行,如果是1就写1,反之则反.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;如果,上述的介绍你没有理解,那么,我有专门提供的简单方法,但是这种方法是答案,原理并不是显而易见&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这种办法和我上面说的实质上是一样的,所以这个是我从网上找的例子,&lt;a&gt;版权问题请联系&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;以&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.5&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;转换为例，&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;转换后变为&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;10100&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;要转换二进制，需要乘&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;乘完之后&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;取整数部分，然后用乘的结果减去整数部分，&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;然后&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;接着乘&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;直至最后没有小数或者小数出现循环&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;即乘完&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;如果等于&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;就取前面不为&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的部分&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;（取&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;所以&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;转换后&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;所以&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.5&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;转换二进制后，&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10100.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;二进制&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;--------------------------------&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;再看一个浮点数&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.3&lt;/span&gt;
 &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10100&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;二进制&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.2&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.4&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.8&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.8&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.6&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;计算到这里，&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将再出现&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;进入循环了，所以，结果&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.010011001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1001&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;所以&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;20.3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10100.010011001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1001&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;二进制&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_3&#34;&gt;谈谈语言中的进制转换&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;java&#34;&gt;Java&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;仅在次怀念怎么都学不好的zz们&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Float_Double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f_v1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;  
        &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f_v2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.3f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;  
        &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f_v3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.5f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;  

        &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_v1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;  
        &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_v2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;  
        &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_v3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f_v1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_v1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)?&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f_v2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_v2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;  
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f_v3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d_v3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我看了一秒说出true,false,true时,学弟由等待出糗的表情变成了吃鲸...&lt;br /&gt;
他癫狂的说在Java中&lt;br /&gt;
float 占四个字节&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;符号位&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;指数位&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;尾数位&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1位&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;占8位&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;占23位&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;double 占8个字节&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;符号位&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;指数位&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;尾数位&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1位&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;占11位&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;占52位&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;先把20.5转化为二进制数,对于float来说,指数的值加127存入指数位,尾数为看着补零放入&lt;br /&gt;
对于double来说,指数的值加1023存入指数位,尾数为看着补零放入&lt;br /&gt;
在转型比较时,指数恢复原型减去127和减去1023,8位的指数位前面补三个0后进行指数位比较&lt;br /&gt;
23位的尾数位在后面补29个0,再进行尾数比较&lt;br /&gt;
这样才能算出啊=_=|&lt;/p&gt;
&lt;p&gt;&lt;b&gt;听到这里我突然震惊了,0.3循环左移出现死循环永远移不完,而0.5移一次就行,肯定会在20.3转型时出现循环截断,那时候再往后面补0肯定是不会匹配的,一看就是20.3肯定不行,20.5肯定行&lt;/b&gt;&lt;br /&gt;
他还狡辩到你这是对数据的不尊重,不适用严谨的无误的逻辑去推理.&lt;br /&gt;
&lt;b&gt;大概是你还不了解什么是工程吧.&lt;/b&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/前景分析/pattern.html</id>
    <title>模式识别</title>
    <link href="/前景分析/pattern.html" />
    <published>2017-08-26T21:00:00+08:00</published>

    
    <updated>2017-08-26T21:00:00+08:00</updated>
    

    
    <category term="前景分析" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=356034&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;写在开始&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;什么是模式识别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;百度指数查询&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;国内谷歌搜索指数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;国外谷歌搜索指数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;相关查询&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;前景&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;众说纷纭[注意讨论问题年份]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;网络声音&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;个人见解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;待遇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_12&#34;&gt;专业相关硕士博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;_1&#34;&gt;写在开始&lt;/h2&gt;
&lt;p&gt;&lt;b style=&#39;color:red&#39;&gt;本文涉及外链，如有数据显示问题，请自备梯子(VPN)&lt;/b&gt;&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;什么是模式识别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://phddreamer.blog.163.com/blog/static/18993409620117384646629&#34;&gt;模式识别科学发展与现状(1.介绍) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://phddreamer.blog.163.com/blog/static/18993409620117384850365/&#34;&gt;模式识别科学发展与现状(2.模式识别四种方法)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://phddreamer.blog.163.com/blog/static/1899340962011738515345/&#34;&gt;模式识别科学发展与现状(3.成就)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://phddreamer.blog.163.com/blog/static/18993409620117385234298/&#34;&gt;模式识别科学发展与现状(4.展望)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://phddreamer.blog.163.com/blog/static/18993409620117385437506/&#34;&gt;模式识别科学发展与现状(5.挑战)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://phddreamer.blog.163.com/blog/static/18993409620117385625772/&#34;&gt;模式识别科学发展与现状(6.结束语)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关会议:CVPR[PR即为模式识别]&lt;/li&gt;
&lt;li&gt;流行：20世纪70年代和80年代&lt;/li&gt;
&lt;li&gt;强调:如何让一个计算机程序去做一些看起来很“智能”的事情,例如数字识别&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_3&#34;&gt;百度指数查询&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://index.baidu.com/&#34;&gt;自行输入关键字&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_4&#34;&gt;国内谷歌搜索指数&lt;/h2&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://ssl.gstatic.com/trends_nrtr/1127_RC02/embed_loader.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
  trends.embed.renderExploreWidget(&#34;TIMESERIES&#34;, {&#34;comparisonItem&#34;:[{&#34;keyword&#34;:&#34;模式识别&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;},{&#34;keyword&#34;:&#34;机器学习&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;},{&#34;keyword&#34;:&#34;深度学习&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;}],&#34;category&#34;:0,&#34;property&#34;:&#34;&#34;}, {&#34;exploreQuery&#34;:&#34;date=2004-01-01 2017-08-27&amp;q=%E6%A8%A1%E5%BC%8F%E8%AF%86%E5%88%AB,%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0,%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&#34;,&#34;guestPath&#34;:&#34;https://trends.google.com:443/trends/embed/&#34;});
&lt;/script&gt;

&lt;p&gt;&lt;center&gt;&lt;code&gt;2014.1-2017.8的统计数据&lt;/code&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;_5&#34;&gt;国外谷歌搜索指数&lt;/h2&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://ssl.gstatic.com/trends_nrtr/1127_RC02/embed_loader.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
  trends.embed.renderExploreWidget(&#34;TIMESERIES&#34;, {&#34;comparisonItem&#34;:[{&#34;keyword&#34;:&#34;pattern recognition&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;},{&#34;keyword&#34;:&#34;machine learning&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;},{&#34;keyword&#34;:&#34;deep learning&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;}],&#34;category&#34;:0,&#34;property&#34;:&#34;&#34;}, {&#34;exploreQuery&#34;:&#34;date=2004-01-01 2017-08-27&amp;q=pattern%20recognition,machine%20learning,deep%20learning&#34;,&#34;guestPath&#34;:&#34;https://trends.google.com:443/trends/embed/&#34;});
&lt;/script&gt;

&lt;p&gt;&lt;center&gt;&lt;code&gt;2014.1-2017.8的统计数据&lt;/code&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;_6&#34;&gt;相关查询&lt;/h2&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://ssl.gstatic.com/trends_nrtr/1127_RC02/embed_loader.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
  trends.embed.renderExploreWidget(&#34;RELATED_QUERIES_0&#34;, {&#34;comparisonItem&#34;:[{&#34;keyword&#34;:&#34;pattern recognition&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;},{&#34;keyword&#34;:&#34;machine learning&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;},{&#34;keyword&#34;:&#34;deep learning&#34;,&#34;geo&#34;:&#34;&#34;,&#34;time&#34;:&#34;2004-01-01 2017-08-27&#34;}],&#34;category&#34;:0,&#34;property&#34;:&#34;&#34;}, {&#34;exploreQuery&#34;:&#34;date=2004-01-01 2017-08-27&amp;q=pattern%20recognition,machine%20learning,deep%20learning&#34;,&#34;guestPath&#34;:&#34;https://trends.google.com:443/trends/embed/&#34;});
&lt;/script&gt;

&lt;p&gt;&lt;center&gt;&lt;code&gt;2014.1-2017.8的统计数据&lt;/code&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;_7&#34;&gt;前景&lt;/h2&gt;
&lt;h3 id=&#34;_8&#34;&gt;众说纷纭[注意讨论问题年份]&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thinkface.cn/thread-3312-1-1.html&#34;&gt;浅谈模式识别/图像处理方向的就业前景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ihowandwhy.com/z/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%93%E4%B8%9A%E8%AF%BB%E7%A0%94%E6%96%B9%E5%90%91%E7%9A%84%E9%80%89%E6%8B%A9(%E5%8F%8C%E6%8E%A7or%E6%A8%A1%E5%BC%8F%E8%AF%86%E5%88%AB)&#34;&gt;双控or模式识别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.leiphone.com/news/201610/XhSks5O93JVgrjjA.html&#34;&gt;大数据时代的模式识别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_9&#34;&gt;网络声音&lt;/h3&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;旧&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;文&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我也是学模式识别的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;但是研究方向是遥感图像处理和识别&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;总的来说这个方向是比较专&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;但也是目前图像处理中比较难做的一个方向&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;因为遥感图像的复杂性超过我们所见过的任何图像&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;其实谈到就业问题&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我觉得如果研究方向比较适合&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;特别是读研期间能到斑竹谈的那些牛比的公司实习&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;了解企业真正需要的方向可能做起来有目标性&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[Quora.社论]&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;What&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;about&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;recognition?&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;What‘s&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;funture&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;about&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;recognition?&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;答案少之又少&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_10&#34;&gt;个人见解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;b style=&#39;color:red&#39;&gt;见解并不一定对&lt;/b&gt;]模式识别的温度并不算高,基于算法底蕴，就业貌似多数转向算法工程师&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_11&#34;&gt;待遇&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://zhaopin.baidu.com/quanzhi?query=%E6%A8%A1%E5%BC%8F%E8%AF%86%E5%88%AB&amp;amp;city=%E5%8C%97%E4%BA%AC&#34;&gt;百度招聘.北京&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lagou.com/jobs/list_模式识别?labelWords=&amp;amp;fromSearch=true&amp;amp;suginput=&#34;&gt;拉勾网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_12&#34;&gt;专业相关硕士博客&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://johnhany.net/about/&#34;&gt;岳翰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://liaoxl.github.io/about/&#34;&gt;廖祥俐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/SE/lab1.html</id>
    <title>LAB1</title>
    <link href="/SE/lab1.html" />
    <published>2017-09-20T02:00:00+08:00</published>

    
    <updated>2017-09-20T02:00:00+08:00</updated>
    

    
    <category term="SE" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#lab1-erport&#34;&gt;Lab1 erport&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;[练习1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;[练习2]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;[练习3]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4&#34;&gt;[练习4]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5&#34;&gt;[练习5]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6&#34;&gt;[练习6]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7&#34;&gt;[练习7]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id=&#34;lab1-erport&#34;&gt;Lab1 erport&lt;/h1&gt;
&lt;h2 id=&#34;1&#34;&gt;[练习1]&lt;/h2&gt;
&lt;p&gt;[练习1.1] 操作系统镜像文件 ucore.img 是如何一步一步生成的?(需要比较详细地解释 Makefile 中&lt;br /&gt;
每一条相关命令和命令参数的含义,以及说明命令导致的结果)&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ucore.img&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ucore.img&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的相关代码为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UCOREIMG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;zero&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;notrunc&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seek&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;notrunc&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;为了生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ucore.img&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，首先需要生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的相关代码为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toobj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootfiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totarget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ld&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LDFLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-N&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Ttext&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x7C00&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;na&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toobj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OBJDUMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-S&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;objfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;asmfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OBJCOPY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-S&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-O&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;binary&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;objfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;outfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totarget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;outfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;为了生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，首先需要生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootasm.o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootmain.o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;boot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootasm.o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;boot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootmain.o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootasm.o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootmain.o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的相关&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;makefile&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;代码为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bootfiles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;listf_cc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;boot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootfiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cc_compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CFLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Os&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-nostdinc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;实际代码由宏批量生成&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootasm.o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;需要&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootasm.S&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;实际命令为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gcc&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Iboot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-fno-builtin&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Wall&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-ggdb&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-m32&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-gstabs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-nostdinc&lt;/span&gt;  &lt;span class=&#34;na&#34;&gt;-fno-stack-protector&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Ilibs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Os&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-nostdinc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-c&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;boot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootasm.S&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;boot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootasm.o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;其中关键的参数为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-ggdb&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;生成可供&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;使用的调试信息。这样才能用&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;qemu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;来调试&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootloader&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ucore&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-m32&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;生成适用于&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;位环境的代码。我们用的模拟硬件是&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;80386&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，所以&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ucore&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;也要是&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;位的软件。&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-gstabs&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stabs&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;格式的调试信息。这样要&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ucore&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;monitor&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;可以显示出便于开发者阅读的函数调用栈信息&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-nostdinc&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;不使用标准库。标准库是给应用程序用的，我们是编译&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ucore&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;内核，&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OS&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;内核是提供服务的，所以所有的服务要自给自足。&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-fno-stack-protector&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;不生成用于检测缓冲区溢出的代码。这是&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;应用程序的，我们是编译内核，&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ucore&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;内核好像还用不到此功能。&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-Os&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;为减小代码大小而进行优化。根据硬件&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，主引导扇区只有&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;字节，我们写的简单&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootloader&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的最终大小不能大于&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;510&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;字节。&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-I&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;添加搜索头文件的路径&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootmain.o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;需要&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootmain.c&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;实际命令为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gcc&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Iboot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-fno-builtin&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Wall&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-ggdb&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-m32&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-gstabs&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-nostdinc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-fno-stack-protector&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Ilibs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Os&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-nostdinc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-c&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;boot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootmain.c&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;boot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootmain.o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;新出现的关键参数有&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-fno-builtin&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;除非用&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;__builtin_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;前缀，&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;                 &lt;span class=&#34;err&#34;&gt;否则不进行&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;builtin&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;函数的优化&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;工具的&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;makefile&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;代码为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;add_files_host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign.c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;create_target_host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;实际命令为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gcc&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Itools&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-g&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Wall&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-O2&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-c&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign.c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign.o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gcc&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-g&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Wall&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-O2&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign.o&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;首先生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock.o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ld&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-m&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;elf_i386&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-nostdlib&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-N&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Ttext&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x7C00&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;boot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootasm.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;boot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootmain.o&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock.o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;其中关键的参数为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;emulation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;模拟为&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i386&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;上的连接器&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-nostdlib&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;不使用标准库&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-N&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;设置代码段和数据段均可读写&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;指定入口&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-Ttext&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;制定代码段开始位置&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;拷贝二进制代码&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock.o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;到&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock.out&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;objcopy&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-S&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-O&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;binary&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock.out&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;其中关键的参数为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-S&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;移除所有符号和重定位信息&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-O&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bfdname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;指定输出格式&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;使用&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;工具处理&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock.out&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sign&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock.out&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的相关代码为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel.ld&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;KOBJS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ld&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LDFLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-T&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel.ld&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;KOBJS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OBJDUMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-S&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;asmfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OBJDUMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-t&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;1,/SYMBOL TABLE/d; s/ .* / /; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;|   |       /^$$/d&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;symfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;为了生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，首先需要&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;kernel.ld&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;init.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readline.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stdio.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;kdebug.o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;kmonitor.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;panic.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;clock.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;intr.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;picirq.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;trap.o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;trapentry.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;vectors.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pmm.o&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;printfmt.o&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;kernel.ld&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;已存在&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/*/*&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生成这些&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;文件的相关&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;makefile&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;代码为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;add_files_cc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;listf_cc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;KSRCDIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;KCFLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;这些&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;生成方式和参数均类似，仅举&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init.o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;为例，其余不赘述&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init.o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;编译需要&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init.c&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;实际命令为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;gcc&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Ikern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-fno-builtin&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Wall&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-ggdb&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-m32&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;na&#34;&gt;-gstabs&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-nostdinc&lt;/span&gt;  &lt;span class=&#34;na&#34;&gt;-fno-stack-protector&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;na&#34;&gt;-Ilibs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Ikern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Ikern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;na&#34;&gt;-Ikern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-Ikern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-c&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init.c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;na&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init.o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生成&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;时，&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;makefile&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的几条指令中有&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;前缀的都不必需&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;必需的命令只有&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ld&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-m&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;elf_i386&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-nostdlib&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-T&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel.ld&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;libs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readline.o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;libs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stdio.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kdebug.o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kmonitor.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;panic.o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clock.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;console.o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;intr.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;picirq.o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trap.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trapentry.o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;trap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;vectors.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pmm.o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;libs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;printfmt.o&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;libs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string.o&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;其中新出现的关键参数为&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;-T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scriptfile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;让连接器使用指定的脚本&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生成一个有&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;个块的文件，每个块默认&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;字节，用&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;填充&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;zero&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ucore.img&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;把&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;中的内容写到第一个块&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bootblock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ucore.img&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;notrunc&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;从第二个块开始写&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;中的内容&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ucore.img&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seek&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;notrunc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[练习1.2] 一个被系统认为是符合规范的硬盘主引导扇区的特征是什么?&lt;/p&gt;
&lt;p&gt;从sign.c的代码来看，一个磁盘主引导扇区只有512字节。且&lt;br /&gt;
第510个（倒数第二个）字节是0x55，&lt;br /&gt;
第511个（倒数第一个）字节是0xAA。&lt;/p&gt;
&lt;h2 id=&#34;2&#34;&gt;[练习2]&lt;/h2&gt;
&lt;p&gt;[练习2.1] 从 CPU 加电后执行的第一条指令开始,单步跟踪 BIOS 的执行。&lt;/p&gt;
&lt;p&gt;练习2可以单步跟踪，方法如下：&lt;/p&gt;
&lt;p&gt;1 修改 lab1/tools/gdbinit,内容为:&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;architecture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i8086&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remote&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1234&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2 在 lab1目录下，执行&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;make&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3 在看到gdb的调试界面(gdb)后，在gdb调试界面下执行如下命令&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;si&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即可单步跟踪BIOS了。&lt;/p&gt;
&lt;p&gt;4 在gdb界面下，可通过如下命令来看BIOS的代码&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//显示当前eip处的汇编指令&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;[进一步的补充]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;改写&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Makefile&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;文件&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;debug:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UCOREIMG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TERMINAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;$(QEMU) -S -s -d in_asm -D $(BINDIR)/q.log -parallel stdio -hda $&amp;lt; -serial null&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
        &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TERMINAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;gdb -q -tui -x tools/gdbinit&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在调用qemu时增加&lt;code&gt;-d in_asm -D q.log&lt;/code&gt;参数，便可以将运行的汇编指令保存在q.log中。&lt;br /&gt;
为防止qemu在gdb连接后立即开始执行，删除了&lt;code&gt;tools/gdbinit&lt;/code&gt;中的&lt;code&gt;continue&lt;/code&gt;行。&lt;/p&gt;
&lt;p&gt;[练习2.2] 在初始化位置0x7c00 设置实地址断点,测试断点正常。&lt;/p&gt;
&lt;p&gt;在tools/gdbinit结尾加上&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;architecture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i8086&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//设置当前调试的CPU是8086&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x7c00&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//在0x7c00处设置断点。此地址是bootloader入口点地址，可看boot/bootasm.S的start地址处&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;//continue简称，表示继续执行&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//显示当前eip处的汇编指令&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;architecture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i386&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//设置当前调试的CPU是80386&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行&#34;make debug&#34;便可得到&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;n&#34;&gt;Breakpoint&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00007c00&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x7c00&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;cli&lt;/span&gt;    
       &lt;span class=&#34;mh&#34;&gt;0x7c01&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;cld&lt;/span&gt;    
       &lt;span class=&#34;mh&#34;&gt;0x7c02&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;xor&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;
       &lt;span class=&#34;mh&#34;&gt;0x7c04&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;
       &lt;span class=&#34;mh&#34;&gt;0x7c06&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;es&lt;/span&gt;
       &lt;span class=&#34;mh&#34;&gt;0x7c08&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ss&lt;/span&gt;
       &lt;span class=&#34;mh&#34;&gt;0x7c0a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;
       &lt;span class=&#34;mh&#34;&gt;0x7c0c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;
       &lt;span class=&#34;mh&#34;&gt;0x7c0e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;jne&lt;/span&gt;    &lt;span class=&#34;mh&#34;&gt;0x7c0a&lt;/span&gt;
       &lt;span class=&#34;mh&#34;&gt;0x7c10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xd1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[练习2.3] 在调用qemu 时增加-d in_asm -D q.log 参数，便可以将运行的汇编指令保存在q.log 中。&lt;br /&gt;
将执行的汇编代码与bootasm.S 和 bootblock.asm 进行比较，看看二者是否一致。&lt;/p&gt;
&lt;p&gt;在tools/gdbinit结尾加上&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x7c00&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;便可以在q.log中读到&#34;call bootmain&#34;前执行的命令&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c00&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;cli&lt;/span&gt;    

    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c01&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;cld&lt;/span&gt;    
    &lt;span class=&#34;mh&#34;&gt;0x00007c02&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;xor&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c04&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c06&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;es&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c08&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ss&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c0a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c0c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c0e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;jne&lt;/span&gt;    &lt;span class=&#34;mh&#34;&gt;0x7c0a&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xd1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x64&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c14&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c16&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c18&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;jne&lt;/span&gt;    &lt;span class=&#34;mh&#34;&gt;0x7c14&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c1a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xdf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c1c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x60&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c1e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;lgdtw&lt;/span&gt;  &lt;span class=&#34;mh&#34;&gt;0x7c6c&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c23&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cr0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c26&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;or&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c2a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cr0&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c2d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ljmp&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x7c32&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c36&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c38&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;es&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c3a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c3c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gs&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c3e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ss&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c40&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ebp&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c45&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x7c00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;esp&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007c4a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;   &lt;span class=&#34;mh&#34;&gt;0x7d0d&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;----------------&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;IN:&lt;/span&gt;
    &lt;span class=&#34;mh&#34;&gt;0x00007d0d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ebp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其与bootasm.S和bootblock.asm中的代码相同。&lt;/p&gt;
&lt;h2 id=&#34;3&#34;&gt;[练习3]&lt;/h2&gt;
&lt;p&gt;分析bootloader 进入保护模式的过程。&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;%cs=0 $pc=0x7c00&lt;/code&gt;，进入后&lt;/p&gt;
&lt;p&gt;首先清理环境：包括将flag置0和将段寄存器置0&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code16&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cli&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cld&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;xorw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;movw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;movw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;es&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;movw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ss&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;开启A20：通过将键盘控制器上的A20线置于高电位，全部32条地址线可用，&lt;br /&gt;
可以访问4G的内存空间。&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;n&#34;&gt;seta20&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;               &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;等待&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8042&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;键盘控制器不忙&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;inb&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;testb&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;jnz&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seta20&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1&lt;/span&gt;        &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;movb&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xd1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;发送写&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8042&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;输出端口的指令&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;outb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x64&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;seta20&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;               &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;等待&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8042&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;键盘控制器不忙&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;inb&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;testb&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;jnz&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seta20&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1&lt;/span&gt;        &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;movb&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xdf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;打开&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A20&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;outb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;al&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x60&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;初始化GDT表：一个简单的GDT表和其描述符已经静态储存在引导区中，载入即可&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;        &lt;span class=&#34;n&#34;&gt;lgdt&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gdtdesc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入保护模式：通过将cr0寄存器PE位置1便开启了保护模式&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;        &lt;span class=&#34;n&#34;&gt;movl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cr0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;orl&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CR0_PE_ON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;movl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cr0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过长跳转更新cs的基地址&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;     &lt;span class=&#34;n&#34;&gt;ljmp&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PROT_MODE_CSEG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;protcseg&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code32&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;protcseg:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置段寄存器，并建立堆栈&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;        &lt;span class=&#34;n&#34;&gt;movw&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PROT_MODE_DSEG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;movw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;movw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;es&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;movw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;movw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gs&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;movw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ss&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;movl&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ebp&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;movl&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;esp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;转到保护模式完成，进入boot主方法&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;        &lt;span class=&#34;n&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bootmain&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;4&#34;&gt;[练习4]&lt;/h2&gt;
&lt;p&gt;分析bootloader加载ELF格式的OS的过程。&lt;/p&gt;
&lt;p&gt;首先看readsect函数，&lt;br /&gt;
&lt;code&gt;readsect&lt;/code&gt;从设备的第secno扇区读取数据到dst位置&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;readsect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secno&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;waitdisk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;outb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1F2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                         &lt;span class=&#34;c1&#34;&gt;// 设置读取扇区的数目为1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;outb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1F3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secno&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;outb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1F4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;secno&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;outb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1F5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;secno&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;outb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1F6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;secno&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xE0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// 上面四条指令联合制定了扇区号&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// 在这4个字节线联合构成的32位参数中&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//   29-31位强制设为1&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//   28位(=0)表示访问&amp;quot;Disk 0&amp;quot;&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//   0-27位是28位的偏移量&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;outb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1F7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                      &lt;span class=&#34;c1&#34;&gt;// 0x20命令，读取扇区&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;waitdisk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;insl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1F0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SECTSIZE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;// 读取到dst位置，&lt;/span&gt;
                                                &lt;span class=&#34;c1&#34;&gt;// 幻数4因为这里以DW为单位&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;readseg简单包装了readsect，可以从设备读取任意长度的内容。&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;readseg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uintptr_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;va&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;uintptr_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_va&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;va&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;va&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SECTSIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secno&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SECTSIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 加1因为0扇区被引导占用&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// ELF文件从1扇区开始&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;va&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_va&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;va&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SECTSIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secno&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;readsect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;va&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secno&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在bootmain函数中，&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;bootmain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 首先读取ELF的头部&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;readseg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uintptr_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ELFHDR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SECTSIZE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// 通过储存在头部的幻数判断是否是合法的ELF文件&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ELFHDR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e_magic&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ELF_MAGIC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proghdr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// ELF头部有描述ELF文件应加载到内存什么位置的描述表，&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 先将描述表的头地址存在ph&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ph&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proghdr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uintptr_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ELFHDR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ELFHDR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e_phoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;eph&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ph&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ELFHDR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e_phnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// 按照描述表将ELF文件中数据载入内存&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ph&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ph&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;readseg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ph&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_va&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xFFFFFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ph&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_memsz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ph&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// ELF文件0x1000位置后面的0xd1ec比特被载入内存0x00100000&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// ELF文件0xf000位置后面的0x1d20比特被载入内存0x0010e000&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// 根据ELF头部储存的入口信息，找到内核的入口&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ELFHDR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e_entry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xFFFFFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))();&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;bad:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;outw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x8A00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x8A00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;outw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x8A00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x8E00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;5&#34;&gt;[练习5]&lt;/h2&gt;
&lt;p&gt;实现函数调用堆栈跟踪函数&lt;/p&gt;
&lt;p&gt;ss:ebp指向的堆栈位置储存着caller的ebp，以此为线索可以得到所有使用堆栈的函数ebp。&lt;br /&gt;
ss:ebp+4指向caller调用时的eip，ss:ebp+8等是（可能的）参数。&lt;/p&gt;
&lt;p&gt;输出中，堆栈最深一层为&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;nx&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x00007bf8&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x00007d68&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00007c4f&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unknow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00007d67&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其对应的是第一个使用堆栈的函数，bootmain.c中的bootmain。&lt;br /&gt;
bootloader设置的堆栈从0x7c00开始，使用&#34;call bootmain&#34;转入bootmain函数。&lt;br /&gt;
call指令压栈，所以bootmain中ebp为0x7bf8。&lt;/p&gt;
&lt;h2 id=&#34;6&#34;&gt;[练习6]&lt;/h2&gt;
&lt;p&gt;完善中断初始化和处理&lt;/p&gt;
&lt;p&gt;[练习6.1] 中断向量表中一个表项占多少字节？其中哪几位代表中断处理代码的入口？&lt;/p&gt;
&lt;p&gt;中断向量表一个表项占用8字节，其中2-3字节是段选择子，0-1字节和6-7字节拼成位移，&lt;br /&gt;
两者联合便是中断处理程序的入口地址。&lt;/p&gt;
&lt;p&gt;[练习6.2] 请编程完善kern/trap/trap.c中对中断向量表进行初始化的函数idt_init。&lt;/p&gt;
&lt;p&gt;见代码&lt;/p&gt;
&lt;p&gt;[练习6.3] 请编程完善trap.c中的中断处理函数trap，在对时钟中断进行处理的部分填写trap函数&lt;/p&gt;
&lt;p&gt;见代码&lt;/p&gt;
&lt;h2 id=&#34;7&#34;&gt;[练习7]&lt;/h2&gt;
&lt;p&gt;增加syscall功能，即增加一用户态函数（可执行一特定系统调用：获得时钟计数值），&lt;br /&gt;
当内核初始完毕后，可从内核态返回到用户态的函数，而用户态的函数又通过系统调用得到内核态的服务&lt;/p&gt;
&lt;p&gt;在idt_init中，将用户态调用SWITCH_TOK中断的权限打开。&lt;br /&gt;
    SETGATE(idt[T_SWITCH_TOK], 1, KERNEL_CS, __vectors[T_SWITCH_TOK], 3);&lt;/p&gt;
&lt;p&gt;在trap_dispatch中，将iret时会从堆栈弹出的段寄存器进行修改&lt;br /&gt;
    对TO User&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;        &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf_cs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;USER_CS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf_ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;USER_DS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf_es&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;USER_DS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf_ss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;USER_DS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;对&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Kernel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;        &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf_cs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KERNEL_CS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf_ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KERNEL_DS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf_es&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KERNEL_DS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在lab1_switch_to_user中，调用T_SWITCH_TOU中断。&lt;br /&gt;
注意从中断返回时，会多pop两位，并用这两位的值更新ss,sp，损坏堆栈。&lt;br /&gt;
所以要先把栈压两位，并在从中断返回后修复esp。&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;n&#34;&gt;asm&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;quot;sub $0x8, %%esp &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;quot;int %0 &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;quot;movl %%ebp, %%esp&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T_SWITCH_TOU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在lab1_switch_to_kernel中，调用T_SWITCH_TOK中断。&lt;br /&gt;
注意从中断返回时，esp仍在TSS指示的堆栈中。所以要在从中断返回后修复esp。&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;n&#34;&gt;asm&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;quot;int %0 &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;quot;movl %%ebp, %%esp &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T_SWITCH_TOK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但这样不能正常输出文本。根据提示，在trap_dispatch中转User态时，将调用io所需权限降低。&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf_eflags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Algorithm/Intro.html</id>
    <title>算法起引</title>
    <link href="/Algorithm/Intro.html" />
    <published>2017-09-06T21:00:00+08:00</published>

    
    <updated>2017-09-06T21:00:00+08:00</updated>
    

    
    <category term="Algorithm" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;设计的魅力在于能让人在枯燥中感受快乐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;什么是算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;数学化描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;降低时间复杂度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;图书推荐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_1&#34;&gt;前言&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;本来我是不想写关于算法类的介绍的,原因很简单,我不想分享知识,这不是自私的原因,而是懒得去做,设计本身就是很复杂的东西,设计一个算法就像是在微分方程一样,没有固定的解法,不一定有解法[&lt;b&gt;可计算性&lt;/b&gt;],但是如果仅仅是为了结果去设计,人总会陷入漫长的枯燥中,真正的设计者享受着设计的每一个过程,像是认真捏造一个细碎的星星,企图窥探银河的壮观,那是一种特殊的感受,无法用语言描述,总而言之很壮观,很美丽,那么到底是什么驱动了我的书写,一个是知识的系统化,另一个是来自开源社区的共享精神,可以说互联网思维吧笑：),但愿每一个看过这些东西的算法爱好者能感受其中的魅力,自认为在抒情方面的语言组织能力不够好,所以废话不多说。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_2&#34;&gt;什么是算法&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;有限性&lt;/li&gt;
&lt;li&gt;可行性&lt;/li&gt;
&lt;li&gt;输入&lt;/li&gt;
&lt;li&gt;输出&lt;/li&gt;
&lt;li&gt;确定性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;满足以上特性的叫做算法.&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;有限是指算法中的指令不能是没有边界的数量&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;没有边界就像死循环一样&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;如何让产生答案&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;如果一个算法缺少有限性只能叫做计算方法&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;确定性是指每一个基本步骤必须是无歧义的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;不能出现让执行机器为难的事情，程序语言就是用来干这个的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;输入&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;个输入或多个输入&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;输出&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;至少一个输出&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;可行性&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;运算的基本指令单位必须是充分的基本的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;比如你直接写一个函数求解常微分方程这就有点不合适了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上仅仅是基本的需求,在这些需求出现了之后,人开始发现,条条大路通罗马,一个问题有很多的解决方案,这么多方案哪个最好呢？就像是选美大赛,选美肯定有一定的标准,所以算法的比较也一定有自己的标准,标准很简单,时间复杂度与空间复杂度,鉴于硬件容量的迅猛发展,人们更倾向于时间复杂度,将其作为计算机世界的货币,无论是时间复杂度还是空间复杂度都可以被量化为performance,很多人把所有的赞誉都给了时间复杂度,其实如果不是空间复杂度的割肉,怎会在时间上取得那么多的好效果,自从得到了货币,有些人开始想着去购买东西,购买其他性能,购买其他功能,这不过是一场权衡的游戏,看谁能在context下做出更好的决策罢了.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_3&#34;&gt;数学化描述&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;数学不好的可以绕行&lt;/code&gt;&lt;br /&gt;
按特性描述算法,果然不严谨,老师说过的既要有数学家的严谨又要有工程师的直觉,这句话果然很重要,作为数学的基石,不用集合描述都感觉是在浪费。&lt;br /&gt;
定义一个四元组 ($(Q,I,\Psi,f)$)&lt;br /&gt;
满足以下条件:&lt;br /&gt;
Q代表计算状态&lt;br /&gt;
I代表输入&lt;br /&gt;
$(\Psi)$代表输出&lt;br /&gt;
$(f)$代表计算规则&lt;br /&gt;
$(I\subset Q,\Psi\subset Q)$&lt;br /&gt;
$(\forall x_i \in \Psi,f(x_i)=x_i)$&lt;br /&gt;
对$(I)$中的任意一个x定义一个计算序列$(x_1,x_2,x_3...x_k)$&lt;br /&gt;
$(如果 k 是满足 f(x_k)\in \Psi 的最小值,那么必然存在f(x_k+n)=f(x_k))$&lt;/p&gt;
&lt;p&gt;&lt;b&gt;限制&lt;/b&gt;&lt;br /&gt;
$(\Psi)$不为空&lt;br /&gt;
$(f)$是基本充分的&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_4&#34;&gt;降低时间复杂度&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;数据结构&lt;br /&gt;
&lt;code&gt;牺牲时间换取空间，学排序算法与动态规划时很明显&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内联汇编&lt;br /&gt;
&lt;code&gt;目前只是使用过gcc内联汇编[AT&amp;amp;T]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;奇技淫巧[套用数学公式]&lt;br /&gt;
&lt;code&gt;比如斐波那契的黄金数&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用底层技巧&lt;br /&gt;
&lt;code&gt;例如CSAPP中对swap函数使用了位操作从而不需要借助中间变量实现了替换&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;err&#34;&gt;#有时间一定码上&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Orz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_5&#34;&gt;图书推荐&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://dl.download.csdn.net/down10/20150409/44c594f043b8cd70a1abe830abb4a7ca.pdf?response-content-disposition=attachment%3Bfilename%3D%22%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_%E5%8E%9F%E4%B9%A6%E7%AC%AC3%E7%89%88_CHS.pdf%22&amp;amp;OSSAccessKeyId=9q6nvzoJGowBj4q1&amp;amp;Expires=1505477606&amp;amp;Signature=a3Iz%2F1yCJjtdOL0ay84Xe%2Fjgczw%3D&amp;amp;user=mosao3725&amp;amp;sourceid=8577653&#34;&gt;算法导论.第三版&lt;/a&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/java03.html</id>
    <title>数据[J]类型</title>
    <link href="/Language/java03.html" />
    <published>2017-09-02T21:00:00+08:00</published>

    
    <updated>2017-09-02T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;完备的系统在演变中浑然天成,要想在系统中添加新的功能,必须能够忍受带来的递归增长的问题.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;浮点数存储&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;浮点数存储&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JAVA中的浮点数是如何存储的？&lt;br /&gt;
见本站&lt;a href=&#34;../编码/进制.html&#34;&gt;进制&lt;/a&gt;讨论&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/web/flask01.html</id>
    <title>Flask</title>
    <link href="/web/flask01.html" />
    <published>2017-09-07T21:00:00+08:00</published>

    
    <updated>2017-09-07T21:00:00+08:00</updated>
    

    
    <category term="web" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=144199&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;无FUCK说&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#mmp&#34;&gt;MMP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;设计杂论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#918-post&#34;&gt;9/18 Post&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;&lt;b style=&#39;color:red&#39;&gt;已解决&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;&lt;b style=&#39;color:red&#39;&gt;待解决&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;基础不稳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;mmp&#34;&gt;MMP&lt;/h3&gt;
&lt;p&gt;我刚学,有很多问题...&lt;/p&gt;
&lt;h3 id=&#34;_1&#34;&gt;设计杂论&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;关于在flask中request对象的概念定位&lt;br /&gt;
作为单次参数传递给视图函数的话,每个视图函数都要写,如果增加其他对象,增加了了调用的混乱度,如果设置成全局变量的话,在多线程服务器中是不可能的,毕竟每个线程都会处理不同的request对象,作为全局对象,无法实现多线程,所以flask引入context(上下文)控制request在单个线程里面称为全局对象.&lt;br /&gt;
对于上面的话,目前我还有一部分&lt;b style=&#39;color:red&#39;&gt;疑问&lt;/b&gt;&lt;br /&gt;
context 有点像缓冲区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;请求调度 路由指定请求方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四种钩子 java类似监视器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;918-post&#34;&gt;9/18 Post&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;本次主要是注重实践,在一下午看完了前四章,还没来的及吸收&lt;br /&gt;
开发工具: VIM&lt;br /&gt;
语言选择: PY&lt;br /&gt;
模板选择: Jinja2&lt;br /&gt;
模块选择: python_script, python_bootstrap, python_mement,flask_wtf&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;del&gt;我说这么多屁话干嘛&lt;/del&gt;&lt;/del&gt;&lt;/p&gt;
&lt;h4 id=&#34;_2&#34;&gt;信息&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Flask 中有两种上下文:程序上下文和请求上下文&lt;br /&gt;
&lt;code&gt;Flask 在分发请求之前激活(或推送)程序和请求上下文,请求处理完成后再将其删除。程序上下文被推送后,就可以在线程中使用 current_app 和 g 变量。类似地,请求上下文被推送后,就可以使用 request 和 session 变量。如果使用这些变量时我们没有激活程序上下文或请求上下文,就会导致错误。&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;flask&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_app&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
&lt;span class=&#34;ne&#34;&gt;RuntimeError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;working&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outside&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;application&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app_ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app_ctx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app_ctx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;#在程序实例上调用 app.app_context() 可获得一个程序上下文&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;b style=&#39;color:red&#39;&gt;至于为什么输出hello,我们以后解释&lt;/b&gt;&lt;/p&gt;
&lt;h4 id=&#34;_3&#34;&gt;使用&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;先用Flask创造一个app对象&lt;br /&gt;
&lt;code&gt;Flask初始化参数必须只有一个指定的参数,即程序主模块或包的名字&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Flask 用这个参数决定程序的根目录,以便稍后能够找到相对于程
序根目录的资源文件位置&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为了灵活使用app.run(),我们加入&lt;b style=&#39;color:yellow&#39;&gt;python_script&lt;/b&gt;&lt;br /&gt;
&lt;code&gt;看看Moment对app进行的劳动改造&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Moment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init_app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init_app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;extensions&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;moment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_moment&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_processor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_processor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;context_processor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;#39;moment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;moment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;moment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;动态url匹配的路由&lt;b style=&#39;color:red&#39; id=&#39;tro001&#39;&gt;存在问题&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;nd&#34;&gt;@app.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;/user/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;% s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;!&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
  &lt;span class=&#34;c&#34;&gt;#这三个name必须都是一样的变量名吗?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;请求 - 响应循环&lt;/li&gt;
&lt;li&gt;程序和请求上下文&lt;br /&gt;
&lt;code&gt;Flask 从客户端收到请求时,要让视图函数能访问一些对象,这样才能处理请求。请求对象就是一个很好的例子,它封装了客户端发送的 HTTP 请求。&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Flask 使用上下文临时把某些对象变为全局可访问。有了上下文,就可以写出下面的视图函数:&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;flask&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;
  &lt;span class=&#34;nd&#34;&gt;@app.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;user_agent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;Your browser is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;% s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_agent&lt;/span&gt;

  &lt;span class=&#34;o&#34;&gt;//===============================================&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;事实上&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;不可能是&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;全局变量。试想&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;在多线程服务器中&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;多个线程同时处理不同客户端发送的不同请求时&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;每个线程看到的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对象必然不同。&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Falsk&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;使用上下文让特定的变量在一个线程中全局可访问&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;与此同时却不会干扰其他线程。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_4&#34;&gt;&lt;b style=&#39;color:red&#39;&gt;已解决&lt;/b&gt;&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;the flowing&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39; __main__ &amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;是&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的惯常用法&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;在这里确保直接执行这个脚本时才启动开发&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Web&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;服务器。如果这个脚本由其他脚本引入&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;程序假定父级脚本会启动不同的服务器&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;因此不会执行&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;。只有真正执行到才会运行哦&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;所以经常用来做测试&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;我以前说过&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_5&#34;&gt;&lt;b style=&#39;color:red&#39;&gt;待解决&lt;/b&gt;&lt;/h3&gt;
&lt;h4 id=&#34;_6&#34;&gt;基础不稳&lt;/h4&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;import的加载问题&lt;/li&gt;
&lt;li&gt;不太理解每一个工程目录下的隐式的__init__文件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tro001&#34;&gt;使用顺序-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;current_app是什么?&lt;/del&gt;&lt;br /&gt;
&lt;code&gt;当前激活程序的程序实例&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;current_app有什么用?&lt;/li&gt;
&lt;/ol&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/SE/se_define.html</id>
    <title>LAB1</title>
    <link href="/SE/se_define.html" />
    <published>2017-09-28T12:00:00+08:00</published>

    
    <updated>2017-09-28T12:00:00+08:00</updated>
    

    
    <category term="SE" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;谈数据流图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;intro&#34;&gt;Intro&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;一切都是在上下文中的可计算问题的探究罢了...&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_1&#34;&gt;谈数据流图&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;今天思考了一下软件工程设计，在可行性分析中的数据流图的一些东西出现了和以前不一样的看法，但是由于思考的时间比较短，所以得到的信息比较混乱.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;自1900年Paris，从希尔伯特的问题到哥德尔不完备性定理再到图灵对计算建立的模型，&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Algorithm/Experience.html</id>
    <title>编程技巧</title>
    <link href="/Algorithm/Experience.html" />
    <published>2017-09-01T16:19:32+08:00</published>

    
    <updated>2017-09-01T16:19:32+08:00</updated>
    

    
    <category term="Algorithm" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=461080452&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;../Experience.html&#34;&gt;详情见&lt;/a&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/net/net001.html</id>
    <title>arp介绍</title>
    <link href="/net/net001.html" />
    <published>2017-09-01T11:00:00+08:00</published>

    
    <updated>2017-09-01T11:00:00+08:00</updated>
    

    
    <category term="net" />
    

    
    <content type="html">&lt;h2 id=&#34;_1&#34;&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;电脑维修中....&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;文档状态：&lt;a style=&#34;color:red;background-color:gray&#34;&gt;电脑维修中....&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;b style=&#34;color:red&#34;&gt;电脑维修中,只能先备份了...&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;arp协议的具体，什么是arp，固定长度42？&lt;/li&gt;
&lt;li&gt;广播&lt;ul&gt;
&lt;li&gt;是只有网关发广播吗？[x]&lt;/li&gt;
&lt;li&gt;一直不停地发广播吗&lt;/li&gt;
&lt;li&gt;广播以什么样的形式发送出去？&lt;/li&gt;
&lt;li&gt;发送广播的目的是什么？[建立ARP表？]&lt;ul&gt;
&lt;li&gt;建立Arp的顺序是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;什么是IGMPv3？&lt;/li&gt;
&lt;/ol&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/入门/python03.html</id>
    <title>包与模块</title>
    <link href="/入门/python03.html" />
    <published>2015-09-27T20:20:37+08:00</published>

    
    <updated>2015-09-27T20:20:37+08:00</updated>
    

    
    <category term="入门" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Intro&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#messy&#34;&gt;messy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;本Blog目的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是模块&lt;/li&gt;
&lt;li&gt;如果把数据从模块导入到程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;短暂说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包组织模块&lt;/li&gt;
&lt;li&gt;模块组织代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;messy&#34;&gt;messy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;作用域的规则是名称空间实现的&lt;/li&gt;
&lt;li&gt;名称空间可以实体化一张内存结构表&lt;/li&gt;
&lt;li&gt;Python 加入的一个新特性允许你把一个已经安装的模块作为脚本执行&lt;/li&gt;
&lt;li&gt;不会发生级联导入模块&lt;/li&gt;
&lt;li&gt;from module import * 过来的全局变量是值拷贝&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Life/emotion-sum.html</id>
    <title>情绪概论</title>
    <link href="/Life/emotion-sum.html" />
    <published>2017-08-26T19:00:00+08:00</published>

    
    <updated>2017-08-26T19:00:00+08:00</updated>
    

    
    <category term="Life" />
    

    
    <content type="html">&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情绪&lt;/strong&gt;，是对一系列主观认知经验的通称，是多种感觉、思想和行为综合产生的心理和生理状态。&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%83%85%E7%BB%AA&#34;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;包含&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a&gt;情绪&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a&gt;钦佩&lt;/a&gt; &lt;a&gt;爱意&lt;/a&gt; &lt;a&gt;畏&lt;/a&gt; &lt;a&gt;躁动&lt;/a&gt; &lt;a&gt;疼痛&lt;/a&gt; &lt;a&gt;滑稽&lt;/a&gt; &lt;a&gt;愤怒&lt;/a&gt; &lt;a&gt;精神痛苦&lt;/a&gt; &lt;a&gt;烦恼&lt;/a&gt; &lt;a&gt;焦虑&lt;/a&gt; &lt;a&gt;冷漠&lt;/a&gt; &lt;a&gt;警醒&lt;/a&gt; &lt;a&gt;人际吸引力&lt;/a&gt; &lt;a&gt;敬畏&lt;/a&gt; &lt;a&gt;厌烦&lt;/a&gt; &lt;a&gt;冷静&lt;a/&gt; &lt;a&gt;同情&lt;/a&gt; &lt;a&gt;轻视&lt;/a&gt; &lt;a&gt;满足&lt;/a&gt; &lt;a&gt;失败主义&lt;/a&gt; &lt;a&gt;抑郁&lt;/a&gt; &lt;a&gt;绝望&lt;/a&gt; &lt;a&gt;欲望&lt;/a&gt; &lt;a&gt;失望&lt;/a&gt; &lt;a&gt;厌恶&lt;/a&gt; &lt;a&gt;狂喜&lt;/a&gt; &lt;a&gt;尴尬&lt;/a&gt; &lt;a&gt;同理心&lt;/a&gt; &lt;a&gt;注意&lt;/a&gt; &lt;a&gt;热心&lt;/a&gt; &lt;a&gt;羡慕&lt;/a&gt; &lt;a&gt;欣快&lt;/a&gt; &lt;a&gt;兴奋&lt;/a&gt; &lt;a&gt;恐惧&lt;/a&gt; &lt;a&gt;挫折&lt;/a&gt; &lt;a&gt;感恩&lt;/a&gt; &lt;a&gt;丧恸&lt;/a&gt; &lt;a&gt;罪恶感&lt;/a&gt; &lt;a&gt;快乐&lt;/a&gt; &lt;a&gt;仇恨&lt;/a&gt; &lt;a&gt;思乡病&lt;/a&gt; &lt;a&gt;希望&lt;/a&gt; &lt;a&gt;恐怖 (Horror and terror)&lt;/a&gt; &lt;a&gt;敌意&lt;/a&gt; &lt;a&gt;羞辱&lt;/a&gt; &lt;a&gt;歇斯底里&lt;/a&gt; &lt;a&gt;迷恋&lt;/a&gt; &lt;a&gt;不安&lt;/a&gt; &lt;a&gt;侮辱&lt;/a&gt; &lt;a&gt;兴趣&lt;/a&gt; &lt;a&gt;应激性&lt;/a&gt; &lt;a&gt;孤立&lt;/a&gt; &lt;a&gt;妒忌&lt;/a&gt; &lt;a&gt;欢乐&lt;/a&gt; &lt;a&gt;孤单&lt;/a&gt; &lt;a&gt;爱&lt;/a&gt; &lt;a&gt;贪念&lt;/a&gt; &lt;a&gt;忧郁&lt;/a&gt; &lt;a&gt;物哀&lt;/a&gt; &lt;a&gt;忽视&lt;/a&gt; &lt;a&gt;怀旧&lt;/a&gt; &lt;a&gt;恐慌&lt;/a&gt; &lt;a&gt;激情&lt;/a&gt; &lt;a&gt;可惜&lt;/a&gt; &lt;a&gt;愉快&lt;/a&gt; &lt;a&gt;骄傲&lt;/a&gt;  &lt;a&gt;傲慢&lt;/a&gt;   &lt;a&gt;暴怒&lt;/a&gt; &lt;a&gt;后悔&lt;/a&gt; &lt;a&gt;排挤&lt;/a&gt; &lt;a&gt;悔恨&lt;/a&gt; &lt;a&gt;不满&lt;/a&gt; &lt;a&gt;报复&lt;/a&gt; &lt;a&gt;悲伤&lt;/a&gt; &lt;a&gt;萨乌达德&lt;/a&gt; &lt;a&gt;幸灾乐祸&lt;/a&gt; &lt;a&gt;怀念&lt;/a&gt; &lt;a&gt;感伤&lt;/a&gt; &lt;a&gt;羞耻&lt;/a&gt; &lt;a&gt;急性压力反应&lt;/a&gt; &lt;a&gt;害羞&lt;/a&gt; &lt;a&gt;忧伤&lt;/a&gt; &lt;a&gt;恼怒&lt;/a&gt; &lt;a&gt;压力&lt;/a&gt; &lt;a&gt;痛苦&lt;/a&gt; &lt;a&gt;惊讶&lt;/a&gt; &lt;a&gt;同感 (Sympathy)&lt;/a&gt; &lt;a&gt;慢性压力&lt;/a&gt; &lt;a&gt;好奇&lt;/a&gt; &lt;a&gt;担心&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Math/Probablity01.html</id>
    <title>随机变量</title>
    <link href="/Math/Probablity01.html" />
    <published>2016-02-25T11:02:20+08:00</published>

    
    <updated>2016-02-25T11:02:20+08:00</updated>
    

    
    <category term="Math" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;&lt;b&gt;待修正....&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;一个问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;关系讨论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;一个问题&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;center style=&#34;position:relative &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/probab.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_2&#34;&gt;概念&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;随机事件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在概率论中，随机事件（或简称事件）指的是一个被赋予机率的事物集合，也就是样本空间中的一个子集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件&lt;br /&gt;
&lt;del&gt;哲学范畴不予讨论&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随机变量&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;b&gt;&lt;/p&gt;
&lt;p&gt;给定样本空间 $({\displaystyle (S,\mathbb {F} )} )$ ，如果其上的实值函数 $({\displaystyle X:S\to \mathbb {R} } )$ 是 $({\displaystyle \mathbb {F} } )$ (实值)可测函数，则称 $({\displaystyle X})$ 为（实值）随机变量。初等概率论中通常不涉及到可测性的概念，而直接把任何 $({\displaystyle X:S\to \mathbb {R} } )$ 的函数称为随机变量。&lt;br /&gt;
如果 $({\displaystyle X})$ 指定给概率空间 $({\displaystyle S})$ 中每一个事件 $({\displaystyle e})$ 有一个实数 $({\displaystyle X(e)})$ ，同时针对每一个实数 $({\displaystyle r})$ 都有一个事件集合 $({\displaystyle A_{r}} )$ 与其相对应，其中 $( A_{r}= {  e:X(e) ≤ r })$ ，那么 $({\displaystyle X} )$ 被称作随机变量。随机变量一般用大写拉丁字母或小写希腊字母（比如 $({\displaystyle X,Y,Z,\xi ,\eta })$ )来表示，从上面的定义注意到，随机变量实质上是函数，不能把它的定义与变量的定义相混淆，另外概率函数 $({\displaystyle P})$ 并没有在考虑之中。&lt;/p&gt;
&lt;p&gt;&lt;/b&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_3&#34;&gt;关系讨论&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;div style=&#39;font-weight:bold;text-decoration: line-through; color:green&#39; &gt;随机事件的解释很明显，随机事件是可以用样本点来描述的，即事件 $(A)$ = {具有特征的某些点}，此处出现一层抽象，现实世界的通过在时间上的独立实验得到的结果通过降维到一个样本空间中，样本空间中的样本是具有多种属性的，而我们通常需要得到样本的某一属性在统计上的结果，于是又出现一层降维，那就是通过事件中样本的某一属性作为样本的标识符，然后向一维几何空间投影到实数轴，这个投影函数被称作&lt;span style=&#39;color:red&#39;&gt; 随机变量&lt;/span&gt;，投影到实数轴上的目的很单纯 ，当然是&lt;span style=&#39;color:red&#39;&gt; 方便数理运算&lt;/span&gt;，有人谈到样本的属性值是不是必须要是数值类的才能投影呢？这个实在是小看人类的抽象能力了，比如 骰子6面6种颜色，假设事件 $(B)$ 为当前投掷的骰子的落地面的颜色，难道这就不能进行一维空间的映射了吗？不！我们可以假设某一种颜色投影为实数域上的数值1，其他颜色为0，此时的我们就很容易计算 $(B)$ 的数学期望了，算法学习中有一种东西叫做&lt;span style=&#39;color:red&#39;&gt; 指示器变量&lt;/span&gt;，是一个很好的应用！&lt;/div&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;此处应该存在一个很大的灵感,目前没有想出来&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;从排列组合的淤泥中飞升到数值运算中？&lt;/p&gt;
&lt;/blockquote&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Os/Syn-process.html</id>
    <title>进程同步与互斥问题</title>
    <link href="/Os/Syn-process.html" />
    <published>2017-09-23T17:09:00+08:00</published>

    
    <updated>2017-09-23T17:09:00+08:00</updated>
    

    
    <category term="Os" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Intro[起因]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;四大准则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;同步机制&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;硬件同步机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;信号量机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;信号量的应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;思索&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;杂.想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;外延&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;intro&#34;&gt;Intro[起因]&lt;/h3&gt;
&lt;p&gt;每个策略的引进都是为了解决所面临的一定的问题，同步策略的原因也是为了解决改善利用率，提高系统吞吐量，如同在算法学习中一样，无非是性能与功能的权衡，灵活性与复杂性的抉择。&lt;br /&gt;
权衡不久引入了同步机制，&lt;br /&gt;
&lt;b style=&#39;color:red&#39;&gt;[补]:&lt;/b&gt;&lt;b&gt;同步本身就是一种通信&lt;/b&gt;&lt;br /&gt;
&lt;b style=&#39;color:red&#39;&gt;[补]:&lt;/b&gt;&lt;b&gt;因为同步可以实现互斥，所以互斥可以回归到同步中&lt;/b&gt;&lt;/p&gt;
&lt;h3 id=&#34;_1&#34;&gt;四大准则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;空闲让进&lt;/li&gt;
&lt;li&gt;忙则等待&lt;/li&gt;
&lt;li&gt;有限等待&lt;/li&gt;
&lt;li&gt;让权等待&lt;br /&gt;
&lt;code&gt;‘权’--&amp;gt;处理机&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;准则就类似于范式&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;_2&#34;&gt;同步机制&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;宏观上的同步包括互斥和微观上的同步&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_3&#34;&gt;硬件同步机制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;关中断&lt;br /&gt;
&lt;code&gt;实现互斥&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;自我认为关中断并不是为计算机提高资源利用准备的，因为关了中断不仅降低了计算机与外界的交互能力而且大大削弱了资源利用率&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TS[Test-and-Set]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SWAP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_4&#34;&gt;信号量机制&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;发展:整型信号量-&amp;gt;记录型信号量-&amp;gt;信号量集&lt;br /&gt;
应用:单处理机，多处理机，计算机网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;整型信号量机制&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;c1&#34;&gt;//P操作&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*DO-NO-OP*/&lt;/span&gt;  &lt;span class=&#34;cm&#34;&gt;/*注意出现死循环忙等*/&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//V操作&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有人看出来了当进程操作时如果s&amp;lt;=0,在这个时间片他就会一直问S&amp;lt;=0吗？什么都没有做，正所谓占着&lt;em&gt;不&lt;/em&gt;,当时有一个学弟问我直接把wait改成&lt;code&gt;if(S&amp;gt;=0) S--;&lt;/code&gt;不就行了嘛？WOC，脑回路清奇，你的意思是，当S&amp;lt;0时，即使我有进程也不做了，看见有人占着就跑路了？不过这种想法还是很好的，至少他是希望出现让权等待，但是不要为了让权等待让它失去了进程同步的意义，如果我们认真想的话，while实际上类似一种运行中的信息阻塞，我们不如引入阻塞，如果发现资源被占直接阻塞进程，当资源释放后，然后唤醒进程，那么问题来了，谁去唤醒，去哪唤醒？是一个很重要的问题，因为一旦P操作使进程A阻塞了，A便不具有消息通知的能力，这时候不要说轮询比较占用资源了，没人通知它，和上面的学弟说的有什么区别，所以我们应该打算，专门添加唤醒操作，在每个进程运行结束后，就去唤醒沉睡的进程们，至于去哪里唤醒这个很简单，申请一块公共空间(&lt;span style=&#39;color:green&#39;&gt;喂我叫PCB&lt;del&gt;我怎么绿了&lt;/del&gt;&lt;/span&gt;)存放沉睡的进程们，然后唤醒他们，其实这相当于去通知他们，signal()的由来也可以解释了，因为你不通知，他们都会阻塞到死...由此也可以看出PV为什么必须在一起！&lt;del&gt;[FFF!!!!]&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;记录型信号量机制&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;//修正后的信号量机制&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//资源数量&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PCB&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//阻塞列表&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wakeup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//改个名字吧，叫做记录型信号量&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;AND型信号量&lt;/li&gt;
&lt;li&gt;信号量集&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_5&#34;&gt;信号量的应用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b style=&#34;color:red&#34;&gt;暂停中....&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;实现互斥&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;//先码为敬&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;semaphore&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;PA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*互斥资源代码*/&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;PB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*互斥资源代码*/&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;实现前趋&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_6&#34;&gt;思索&lt;/h3&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;这正是我最头痛的事情，在课堂上一直对同步机制建模，也许是大一修的离散数学基础不够好，我依旧没有将其通过通信原理映射到图论中，所以有点passive,但是不能有始无终，我仍然准备建立模型，通信原理抛了～，图论抛了～我只是准备用自己不成熟的思想去非合理描述同步机制在通信机制的解释&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_7&#34;&gt;杂.想&lt;/h4&gt;
&lt;p&gt;&lt;b style=&#39;color:red&#39;&gt;[知识点1]:&lt;/b&gt;前面提到的信号量本质是一种进程间的&lt;b&gt;异步通信方式&lt;/b&gt;，进程不是通过轮询获得资源的，而是通过被通知的方式获得资源.&lt;br /&gt;
&lt;b style=&#39;color:red&#39;&gt;[知识点2]:&lt;/b&gt;通过在通信部分对&lt;b&gt;死锁&lt;/b&gt;的原因探索可以得到很有用的信息&lt;br /&gt;
&lt;b style=&#39;color:red&#39;&gt;[知识点3]:&lt;/b&gt;二维的图形加上操作者[我]通过使用笔延伸通信数据流引入三维时间概念足以描述整个系统进程的运行。&lt;br /&gt;
&lt;b style=&#39;color:red&#39;&gt;[知识点4]:&lt;/b&gt;通过分析边界问题很容易发现死锁所在处&lt;/p&gt;
&lt;p&gt;先放两张图&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/real.gif&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/false.gif&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_8&#34;&gt;外延&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;OK&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Os/fileMean.html</id>
    <title>文件介绍</title>
    <link href="/Os/fileMean.html" />
    <published>2017-09-08T21:00:00+08:00</published>

    
    <updated>2017-09-08T21:00:00+08:00</updated>
    

    
    <category term="Os" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;b style=&#34;color:red&#34;&gt;电脑维修中,只能先备份了...&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[/etc/services] 存放服务器服务及其占用端口号&lt;/li&gt;
&lt;li&gt;[/usr/share/fonts ] 字体存放处&lt;/li&gt;
&lt;li&gt;[/usr/share/fonts/truetype]&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/regex00.html</id>
    <title>语言[R]概论</title>
    <link href="/Language/regex00.html" />
    <published>2017-08-31T21:00:00+08:00</published>

    
    <updated>2017-08-31T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;思索中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
今日无音乐,只有乱.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;混乱的思想,难以安眠的嘈杂,生命的歌与诗,坠落在绚烂多彩的深渊.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;以下均为不成熟的思想,为了记录脑中知识,故将知识扔到这一片荒芜之地.&lt;br /&gt;
1. 规则即命题&lt;br /&gt;
2. 将表达式看做命题&lt;br /&gt;
3. 将匹配分为确定匹配与规则匹配&lt;/p&gt;
&lt;p&gt;好了现在我要创造正则表达式,那么我知道正则表达式的目的就是描述模式,&lt;b&gt;描述&lt;/b&gt;本身应该有什么性质,对的，他要遵循&lt;b&gt;精准性&lt;/b&gt;,&lt;b&gt;客观性&lt;/b&gt;还有&lt;b&gt;灵活性&lt;/b&gt;这意味这要减小描述的复杂度,为了减小描述的复杂度，那就提高符号抽象程度。&lt;br /&gt;
此处引入集合论的混乱观点，毕竟数学都是建立在它上面的，我使用一下应该不会有太大的出入，那么开始吧。&lt;br /&gt;
1. 集合内的元素被认为元对象&lt;br /&gt;
2. 集合上面的运算形成新的集合&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[草稿.篇]&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;大局观：代表对元素集合的描述，考虑的是整个元素集合的性质&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;例如数量&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;　微观：代表对单个元素的描述&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;考虑的是单个索引上元素的值，例如位置和值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面也说过描述要具有精准性，我们要知道他的位置，他的值才能唯一描述他，他的值可能是常项也可能是变项，常项可能包括空集,变项引入符号‘|’,所以元素是变动的“null|{set}”&amp;lt;---&amp;gt;&#34;{set}?&#34;&lt;br /&gt;
$$Regex \Rightarrow \begin{cases} 大局观  &amp;amp;  \begin{cases}&lt;br /&gt;
                                  数量观 &amp;amp;  \begin{cases}有限 \\&lt;br /&gt;
                                                        无限(有限是无限的子集)&lt;br /&gt;
                                            \end{cases}\\  &lt;br /&gt;
                                  \end{cases}&lt;br /&gt;
                                  \\&lt;br /&gt;
                        \\&lt;br /&gt;
                        微观    &amp;amp;  \begin{cases}&lt;br /&gt;
                                    基本元素 &amp;amp; \begin{cases}常项 &amp;amp; \begin{cases}特殊元素 \\&lt;br /&gt;
                                                                              其他元素&lt;br /&gt;
                                                                   \end{cases}\\  &lt;br /&gt;
                                                          变项 &amp;amp; \\&lt;br /&gt;
                                                \end{cases}&lt;br /&gt;
                                    \\&lt;br /&gt;
                                    位置 &amp;amp;     \begin{cases}绝对位置\\&lt;br /&gt;
                                                           相对位置\\&lt;br /&gt;
                                              \end{cases}&lt;br /&gt;
                                     \\&lt;br /&gt;
                                  \end{cases}\\&lt;br /&gt;
                         \end{cases}&lt;br /&gt;
$$&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;对草稿篇出现疑问&lt;br /&gt;
1. 量词的引入是为了简化描述吗?&lt;br /&gt;
2. 有点混乱...&lt;br /&gt;
3. 我一开始为什么要执着引入谓词逻辑？&lt;/p&gt;
&lt;p&gt;以下为写在本子上的公式&lt;/p&gt;
&lt;p&gt;$$运算\begin{smallmatrix}&amp;amp;抽象&amp;amp;\\ &amp;amp;\Longleftrightarrow&amp;amp;\end{smallmatrix}规则\begin{smallmatrix}&amp;amp;实体化&amp;amp;\\ &amp;amp;\Longleftrightarrow&amp;amp;\end{smallmatrix}命题\begin{smallmatrix}&amp;amp;使用&amp;amp;\\ &amp;amp;\longrightarrow&amp;amp;\end{smallmatrix}谓词$$&lt;/p&gt;
&lt;p&gt;看来真正的理解只能去写一个正则引擎了QAQ&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/Panalyse1.html</id>
    <title>源码[P]分析</title>
    <link href="/Language/Panalyse1.html" />
    <published>2017-08-27T21:00:00+08:00</published>

    
    <updated>2017-08-27T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[网评]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;谢谢网易云音乐让我知道真相.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=624751&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;写在开头&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;架构图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;结构剖析&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;编译安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#c&#34;&gt;调用c函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;_1&#34;&gt;写在开头&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;本系列文章的理解水平建立在编译原理&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语言&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语言的了解基础上&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;如果不知道&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Scaner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;抽象语法树&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compiler&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Code&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Evaluator&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;建议进修&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;_2&#34;&gt;架构图&lt;/h2&gt;
&lt;p&gt;&lt;center &gt;&lt;br /&gt;
&lt;div style=&#34;width:644px&#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/pyarchive&#34; /&gt;&lt;br /&gt;
&lt;/div&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Scaner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;---&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Code&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Evaluator&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;         &lt;span class=&#34;n&#34;&gt;use&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Structure&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;       &lt;span class=&#34;n&#34;&gt;use&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;memory&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Allocator&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Code&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Evaluator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;modify&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2 id=&#34;_3&#34;&gt;结构剖析&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;编写&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;模块的头文件源&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;自带标准库#速度慢&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;由&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;编写#速度快&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scaner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;some&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tools&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;所有内建对象&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;运行时的对象实现&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;运行核心&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Evaluator&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PcBuild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;windows&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;工程文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_4&#34;&gt;编译安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;windows 没错这就是我格式化windows的原因&lt;/li&gt;
&lt;li&gt;Linux/Unix&lt;br /&gt;
    1.&lt;code&gt;&amp;gt;  ./configure --prefix=&#39;PATH&#39;&lt;/code&gt;&lt;br /&gt;
    2.&lt;code&gt;&amp;gt;  make&lt;/code&gt;&lt;br /&gt;
    3.&lt;code&gt;&amp;gt;  make install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c&#34;&gt;调用c函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coolshell.cn/articles/671.html&#34;&gt;陈皓&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;暂停睡觉&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Algorithm/DP_egg.html</id>
    <title>高楼抛蛋决策树</title>
    <link href="/Algorithm/DP_egg.html" />
    <published>2017-09-24T16:19:32+08:00</published>

    
    <updated>2017-09-24T16:19:32+08:00</updated>
    

    
    <category term="Algorithm" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=461080452&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;决策树是一个好东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;intro&#34;&gt;Intro&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一般情况当我问讨论算法的效率时，有的人注重平均时间复杂度，有的人注重最坏时间复杂度，当注重最坏时间复杂度的时候，决策的路径就已经很明显了，引入决策树的办法还是很好的。&lt;/p&gt;
&lt;p&gt;Problem[来源知乎]&lt;br /&gt;
一幢 200 层的大楼,给你两个鸡蛋. 如果在第 n 层扔下鸡蛋,鸡蛋不碎,那么从前 n-1 层扔鸡蛋都不碎. 这两只鸡蛋一模一样,不碎的话可以扔无数次. 已知鸡蛋在0层扔不会碎.&lt;br /&gt;
提出一个策略, 要保证能测出鸡蛋恰好会碎的楼层, 并使此策略在最坏情况下所扔次数最少.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最早看见这个问题是在&lt;a href=&#34;http://ppwwyyxx.com/2013/Problem-of-Two-Eggs/&#34;&gt;吴育昕&lt;/a&gt;学长的Blog中,他的解法很不错，贴上他的回答&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试Hulu的最后一轮, 是我现在的manager zhibing来面试, 他只问了我这一个问题. 不过把200层换成了100层, 把鸡蛋换成了瓶子(瓶子更科学!).&lt;/p&gt;
&lt;p&gt;首先搞清楚这题的意思: 第一个瓶子用来试探, 只要它从 kk 层楼扔下去没碎, 则目标就在[k+1,100][k+1,100]之间了. 但一旦运气不好碎了, 对于已知的区间, 我们只能用剩下一个瓶子从小到大一层层试, 因为我们要保证策略必须成功, 不能冒险了.&lt;/p&gt;
&lt;p&gt;面试时我得到的题目描述也不太严谨, 没有说&#34;最坏情况下代价最小&#34;, 因此我愚昧了一会才明白这题的意思.&lt;/p&gt;
&lt;p&gt;&#34;最坏情况下代价最小&#34;这句话十分重要, 它已经反映了题目的数学结构:&lt;/p&gt;
&lt;p&gt;我们如果把任何一种策略看成一个决策树, 每一次扔瓶子都会有两个子节点, 对应碎与不碎的情况下下一步应该扔的楼层. 那么, 策略的一次执行, 是树中的一条从根往下走的路, 当且仅当这条路上出现过形如 kk 没碎 与 k+1k+1碎了的一对节点时, 路停止, 当前节点不再扩展. 那么要找的是这么一棵树, 使得所有路里最长者尽量短, 也即, 要找一个最矮的决策树.&lt;/p&gt;
&lt;p&gt;再看一个节点处, 选择楼层时会发生什么. 容易看出, 选择的楼层如果变高, 那么&#34;碎子树&#34;高度不减, &#34;不碎子树&#34;高度不增. 同样的, 选择的楼层变矮的话, &#34;碎子树&#34;高度不增, &#34;不碎子树&#34;高度不减.&lt;/p&gt;
&lt;p&gt;这时候答案很明显了: 为了使两子树中高度最大者尽量小, 我们的选择应当使两子树高度尽量接近. 最终希望的结果是, 整个二叉树尽量像一个满二叉树.&lt;/p&gt;
&lt;p&gt;假设第一次在根节点上, 我们选择扔kk层, 其&#34;碎子树&#34;的高度显然是k−1k−1. 为了考虑不碎子树的高度, 设不碎后第二次扔mm层(显然m&amp;gt;km&amp;gt;k), 则这个新节点的碎子树高度为m−k−1m−k−1, 不碎子树高度仍然未知, 但按照满二叉树的目标, 我们认为它与碎子树相同或少1就好. 那么在根节点上的不碎子树的高度就是m−k−1+1m−k−1+1, 令它与碎子树高度相同, 于是:&lt;br /&gt;
m−k−1+1=k−1⇒m=k+k−1&lt;br /&gt;
m−k−1+1=k−1⇒m=k+k−1&lt;br /&gt;
也即, 如果第一次扔在kk层, 第二次应该高k−1k−1 层, 这可以有直观一点的理解: 每扔一次, 就要更保守一些, 所以让区间长度少1. [1,k)→[k+1,2k−1)[1,k)→[k+1,2k−1). 用类似刚才的分析, 可以继续得到, 下一次应该增高k−2k−2, 再下一次应该增高k−3k−3. 考虑:&lt;br /&gt;
k+(k−1)+⋯+1=k(k+1)2=100⇒k≈14&lt;br /&gt;
k+(k−1)+⋯+1=k(k+1)2=100⇒k≈14&lt;br /&gt;
所以第一次扔14层, 最坏需要14次(策略不唯一, 树的叶子可以交换位置). 200层的话, kk =20.&lt;/p&gt;
&lt;p&gt;面试的时候脑子有点乱, 没想到树, 就只是从两边要平均的角度来算的, 所以有点不自信. 最后算出来14之后由于是个近似(其实上取整就对了), 又试了一下15和13. 之后在重新理思路, 这时候貌似已经过了很久,zhibing就问怎么样了, 我说了下答案, 然后说我没有想出很好的办法证明14一定是最优的. zhibing就直接说: 这是对的, 应该是一个等差数列. 然后下一句话就是别的什么了...&lt;/p&gt;
&lt;p&gt;所以面试要多说话啊....................!&lt;/p&gt;
&lt;p&gt;以上说的是数学做法..代码做法就简单的多, 看面试是要答案还是要程序了.&lt;/p&gt;
&lt;p&gt;设f(n,m)f(n,m)为n层楼, m个蛋所需次数, 那么它成了一道DP..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$$&lt;br /&gt;
\begin{eqnarray}&lt;br /&gt;
f(0, m) &amp;amp; = &amp;amp; 0, (m &amp;gt;= 1)\\&lt;br /&gt;
f(n, 1) &amp;amp; = &amp;amp; n, (n &amp;gt;= 1)\\&lt;br /&gt;
f(n, m) &amp;amp; = &amp;amp; \min_{1 \le i \le n} \{ \max\{ f(i - 1, m - 1), f(n - i, m)\}\} + 1 \\&lt;br /&gt;
\end{eqnarray}&lt;br /&gt;
$$&lt;br /&gt;
[Doge],有关&lt;br /&gt;
$$\min_{1 \le i \le n} \{ \max\{a,b\}\}$$&lt;br /&gt;
很简单看出a，b近似时才能达到效果的最优[a,b是存在一定的制约关系的]&lt;/p&gt;
&lt;h3 id=&#34;_1&#34;&gt;实现&lt;/h3&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#！/usr/bin/env python3&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;functools&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@functools.lru_cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxsize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;    &lt;span class=&#34;c&#34;&gt;# 14&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;    &lt;span class=&#34;c&#34;&gt;# 20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;据大神说python3的functools的一个自带函数, 可以对函数返回结果进行LRU cache, 下次以相同参数调用就不重复计算了.&lt;br /&gt;
maxsize=None就是不限制大小, 其实就变成是全部都cache下来, 不考虑LRU了..&lt;/p&gt;
&lt;p&gt;好吧：），问题解决了[懒的码代码，copy了一遍]&lt;/p&gt;
&lt;/blockquote&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/入门/python01.html</id>
    <title>千里之行</title>
    <link href="/入门/python01.html" />
    <published>2015-09-11T21:00:00+08:00</published>

    
    <updated>2015-09-11T21:00:00+08:00</updated>
    

    
    <category term="入门" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;人生苦短&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#923&#34;&gt;9.23更新&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;命令行特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;脚本书写&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;开发环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#io&#34;&gt;IO&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;输出函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;输入函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;语法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;书写&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;运算&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_12&#34;&gt;运算符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_13&#34;&gt;操作数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_14&#34;&gt;控制结构&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_15&#34;&gt;循环&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_16&#34;&gt;函数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_17&#34;&gt;分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_18&#34;&gt;常见内建函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_19&#34;&gt;参数问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_20&#34;&gt;类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_21&#34;&gt;使用&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_22&#34;&gt;方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_23&#34;&gt;对象&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_24&#34;&gt;模块&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_25&#34;&gt;常见&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_26&#34;&gt;软件工程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_27&#34;&gt;语言风格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_28&#34;&gt;模块结构和布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_29&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_30&#34;&gt;异常控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_31&#34;&gt;优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_32&#34;&gt;高级特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_33&#34;&gt;获取帮助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_34&#34;&gt;更新日志&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;923&#34;&gt;9.23更新&lt;/h2&gt;
&lt;h3 id=&#34;_1&#34;&gt;特性&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;健壮性&lt;/li&gt;
&lt;li&gt;易维护性&lt;/li&gt;
&lt;li&gt;可移植&lt;/li&gt;
&lt;li&gt;易读易学&lt;/li&gt;
&lt;li&gt;面向对象&lt;/li&gt;
&lt;li&gt;可拓展&lt;/li&gt;
&lt;li&gt;可升级&lt;/li&gt;
&lt;li&gt;高阶函数(haskell, lisp)&lt;/li&gt;
&lt;li&gt;内存管理&lt;/li&gt;
&lt;li&gt;非编译型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_2&#34;&gt;命令行特性&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;-c &#34;cmd&#34;&lt;br /&gt;
&lt;code&gt;python -c &#34;print (1+2)&#34;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-d&lt;br /&gt;
&lt;code&gt;调试输出&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-v&lt;br /&gt;
&lt;code&gt;冗余输出&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-m mod&lt;br /&gt;
&lt;code&gt;模块以脚本形式运行&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-O&lt;br /&gt;
&lt;code&gt;生成优化的字节码 .pyo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-S&lt;/li&gt;
&lt;li&gt;-Q&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_3&#34;&gt;脚本书写&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;文本开头搜索python解释器&lt;ul&gt;
&lt;li&gt;开头&lt;code&gt;#!Python解释器的路径&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;#!/usr/bin/python&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;或者&lt;code&gt;#!/usr/bin/env python&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;从env环境变量中搜索&lt;/code&gt;     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_4&#34;&gt;开发环境&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;VIM+PYTHON插件&lt;/li&gt;
&lt;li&gt;pycharm&lt;/li&gt;
&lt;li&gt;spyder&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;io&#34;&gt;IO&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_5&#34;&gt;模块&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;sys.stderr&lt;br /&gt;
&lt;code&gt;标准错误输出&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_6&#34;&gt;输出函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;交互使用repr()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print调用str()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;print输出默认加换行&lt;br /&gt;
&lt;code&gt;使用print a, 加逗号即可改变,但是自动加空格&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;格式化输出&lt;br /&gt;
&lt;code&gt;print &#34;%s %d&#34; %(a,b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重定向输出&lt;br /&gt;
&lt;code&gt;print &amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_7&#34;&gt;输入函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;raw_input()&lt;code&gt;py 2.x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;input &lt;code&gt;py 3.x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_8&#34;&gt;语法&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_9&#34;&gt;书写&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\&lt;/code&gt;继续上一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt;两个语句在一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt;将代码头体分离&lt;/li&gt;
&lt;li&gt;缩进&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_10&#34;&gt;变量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;命名&lt;br /&gt;
&lt;code&gt;_xxx   --&amp;gt;不用&#39;from module import 导入&#39;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;__xx__ --&amp;gt;系统定义名字&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;__xx   --&amp;gt;类中私有变量名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_11&#34;&gt;运算&lt;/h4&gt;
&lt;h5 id=&#34;_12&#34;&gt;运算符&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**(乘方)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt;浮点除法(四舍五入)真正的除法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;传统除法(操作数为整型时执行地板除)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!= &amp;lt;&amp;gt;&lt;/code&gt;都是不等于&lt;/li&gt;
&lt;li&gt;逻辑运算 &lt;code&gt;and or not&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增量赋值 +=,-=&lt;/li&gt;
&lt;li&gt;多重赋值 x =y =z=1&lt;/li&gt;
&lt;li&gt;多元赋值 a,b = b+1, a[涉及元祖特性][可实现简单交换]&lt;br /&gt;
&lt;code&gt;x,y = y,x[不明觉厉]显然赋值之前已经做好了计算&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;友情提示:多使用括号,增强代码可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;_13&#34;&gt;操作数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;注意complex虽然不常用&lt;/li&gt;
&lt;li&gt;字符串知识(切片,索引,克莱尼星号,连接)&amp;lt;-[只读]&lt;/li&gt;
&lt;li&gt;列表元素个数和值可变 (切片,索引,克莱尼星号,连接)&amp;lt;-[读写]&lt;/li&gt;
&lt;li&gt;元组元素个数和值不可变(可切片,克莱尼星号,索引,连接)&amp;lt;-[只读]&lt;/li&gt;
&lt;li&gt;字典 (&lt;b style=&#39;color:red&#39;&gt;有重点待续...&lt;/b&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_14&#34;&gt;控制结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;没什么好讲的&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;注意缩进&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;_15&#34;&gt;循环&lt;/h5&gt;
&lt;p&gt;&lt;del&gt;不值得专门一节写&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搞清可迭代对象(序列/迭代器)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_16&#34;&gt;函数&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_17&#34;&gt;分类&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;有副作用&lt;/li&gt;
&lt;li&gt;无副作用&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;_18&#34;&gt;常见内建函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;abs()&lt;br /&gt;
&lt;code&gt;取绝对值&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;dir([obj])&lt;br /&gt;
&lt;code&gt;显示对象属性,如果无参数,则显示全局变量的名字&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;help([obj])&lt;br /&gt;
&lt;code&gt;帮助&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;int([obj])&lt;br /&gt;
&lt;code&gt;将对象转换为整数&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;len(obj)&lt;br /&gt;
&lt;code&gt;返回对象长度&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;open(fn,mode)&lt;br /&gt;
&lt;code&gt;fn为文件名或者handle, mode取[&#39;r&#39;,&#39;w&#39;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;range([start],stop[,step])&lt;br /&gt;
&lt;code&gt;生成列表0~n-1&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;常见搭配 for i in range(len(str))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strip([characters])&lt;br /&gt;
&lt;code&gt;返回移除行首行尾的characters字符,缺省为\n&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;str(obj)&lt;br /&gt;
&lt;code&gt;将一个对象转换为字符串&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;type(obj)&lt;br /&gt;
&lt;code&gt;返回对象类型&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_19&#34;&gt;参数问题&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;暂时书写架构&lt;/code&gt;&lt;br /&gt;
- 默认参数&lt;br /&gt;
- 可变参数&lt;br /&gt;
- 关键字参数&lt;br /&gt;
- etc&lt;/p&gt;
&lt;h3 id=&#34;_20&#34;&gt;类&lt;/h3&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_21&#34;&gt;使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定义&lt;br /&gt;
&lt;code&gt;class classname(baseclass[es]):&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建&lt;br /&gt;
&lt;code&gt;a = classB(pram)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_22&#34;&gt;方法&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;做到访问权限控制&lt;/code&gt;&lt;br /&gt;
1. 特殊方法&lt;br /&gt;
&lt;code&gt;__method__()&lt;/code&gt;&lt;br /&gt;
    ``&lt;/p&gt;
&lt;h4 id=&#34;_23&#34;&gt;对象&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;自身实例引用&lt;br /&gt;
&lt;code&gt;self类似this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./pyobject.md&#34;&gt;python对象详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_24&#34;&gt;模块&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;这个是我现在还比较方的东西&lt;/code&gt;&lt;br /&gt;
1. 每个python脚本文件都可以当做一个模块&lt;br /&gt;
2. 模块太大?可以自己&lt;b style=&#39;color:red&#39;&gt;拆&lt;/b&gt;&lt;/p&gt;
&lt;h4 id=&#34;_25&#34;&gt;常见&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;sys&lt;ul&gt;
&lt;li&gt;platform&lt;/li&gt;
&lt;li&gt;version&lt;/li&gt;
&lt;li&gt;stdout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_26&#34;&gt;软件工程&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_27&#34;&gt;语言风格&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;(见变量命名准则)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.Python.org/dev/peps/pep-0007/&#34;&gt;pythonic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;this&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Zen&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tim&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Peters&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Beautiful&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;better&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;than&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ugly&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Explicit&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;better&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;than&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implicit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Simple&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;better&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;than&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;complex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Complex&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;better&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;than&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;complicated&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Flat&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;better&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;than&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nested&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Sparse&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;better&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;than&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dense&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Readability&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Special&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cases&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aren&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;t special enough to break the rules.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Although&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;practicality&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beats&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;purity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Errors&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;should&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;never&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;silently&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Unless&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;explicitly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;silenced&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;face&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ambiguity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;refuse&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temptation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;There&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;should&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;be&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;one&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;preferably&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;only&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;one&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obvious&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;way&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Although&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;that&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;way&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;may&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;be&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obvious&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;you&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;re Dutch.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Now&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;better&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;than&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;never&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Although&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;never&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;often&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;better&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;than&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;If&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;explain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;s a bad idea.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;If&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;easy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;explain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;may&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;be&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;good&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idea&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Namespaces&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;are&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;one&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;honking&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;great&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idea&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;s do more of those!&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_28&#34;&gt;模块结构和布局&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;结构示意图&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# (1) 起始行(Unix)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;___&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;有起始行就能够仅输入脚本名字来执行脚本&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# (2) 模块文档&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;___&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;简要介绍模块的功能及重要全局变量的含义&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
             &lt;span class=&#34;err&#34;&gt;模块外可通过&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__doc__&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;访问这些内容&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# (3) 模块导入&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;___&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;导入当前模块的代码需要的所有模块&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;每个模块仅导入一次&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;当前模块被加载时&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
             &lt;span class=&#34;err&#34;&gt;函数内部的模块导入代码不会被执行&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;除非该函数正在执行&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# (4) 变量定义&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;___&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;这里定义的变量为全局变量&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;除非必须&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;否则就要尽量使用局部变量代替全局变量&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# (5) 类定义&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;___&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;所有的类都需要在这里定义。当模块被导入时&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;语句会被执行&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;类也就会被定义&lt;/span&gt;
             &lt;span class=&#34;err&#34;&gt;类的文档变量是&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__doc__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# (6) 函数定义&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;___&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;此处定义的函数可以通过&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;在外部被访问到&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;当模块被导入时&lt;/span&gt;
             &lt;span class=&#34;n&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;语句会被执行&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;函数也就都会定义好&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;函数的文档变量是&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__doc__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# (7) 主程序&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;___&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;论这个模块是被别的模块导入还是作为脚本直接执行&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;都会执行这部分代码&lt;/span&gt;
             &lt;span class=&#34;err&#34;&gt;不会有太多功能性代码&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;而是根据执行的模式调用不同的函数&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;EXAMPLE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#!/usr/bin/env python            [1]#$ chmod +x;./hello.py&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;document&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;document&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;                      &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;                     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;                   &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;           

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;real&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;                  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#模块测试专用,决定了模块的运行导向&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;real&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_29&#34;&gt;文档&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;注释&lt;br /&gt;
&lt;code&gt;#单行&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;自定义范围 &#39;&#39;&#39; comment &#39;&#39;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;动态获得文档字串&lt;br /&gt;
&lt;code&gt;FORMAT:obj.__doc__&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;EXAMPLE:print sys.__doc__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_30&#34;&gt;异常控制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;捕获try-except-else&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;has&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;生成&lt;code&gt;raise()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检验文件存在&lt;br /&gt;
&lt;code&gt;os.path.exists()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_31&#34;&gt;优化&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;尽量将模块变量替换为本地变量,降低询问时间&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#如果经常使用 os.linesep,那就替换吧,因为每次使用 1.确认os是模块 2.确认linesep全局变量在os中存在太麻烦了&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linesep&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_32&#34;&gt;高级特性&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;列表解析&lt;br /&gt;
&lt;code&gt;暂时不写 特牛x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存管理[我在python剖析里面会说]&lt;br /&gt;
&lt;code&gt;有本书上面写引用计数,应该不对,因为一旦出现引用环就出现故障,还有一个循环垃圾收集器吧&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;但是无可厚非,python虚拟机实现了内存管理&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;del的使用,显式销毁&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;为什么python不需要变量名和变量类型声明?&lt;br /&gt;
2.不太了解元组赋值机制呢?&lt;br /&gt;
3.如何修改python命令提示符?&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;_33&#34;&gt;获取帮助&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;使用help(函数名)&lt;code&gt;交互模式使用&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;什么是PEP?&lt;br /&gt;
&lt;code&gt;PYTHON增强提案&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询关键字&lt;br /&gt;
&lt;code&gt;keyword模块&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;|___iskeyword()&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;|___关键字列表&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询系统保留字(build_in)&lt;br /&gt;
&lt;code&gt;__builtins__模块&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获得模块文档帮助&lt;br /&gt;
&lt;code&gt;print module.__doc__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../Language/pythonkey.html&#34;&gt;关键字帮助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;工具&lt;ul&gt;
&lt;li&gt;Debugger ---&amp;gt;pdb&lt;/li&gt;
&lt;li&gt;logger   ---&amp;gt;logging[five layer log system]&lt;/li&gt;
&lt;li&gt;Profilers---&amp;gt;profile,hotshot,cProfile//性能测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;_34&#34;&gt;更新日志&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;9/19添加大量知识框架,属于低级水平知识&lt;/li&gt;
&lt;li&gt;9/20&lt;/li&gt;
&lt;/ol&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/入门/python02.html</id>
    <title>数字序列</title>
    <link href="/入门/python02.html" />
    <published>2015-09-27T07:00:00+08:00</published>

    
    <updated>2015-09-27T07:00:00+08:00</updated>
    

    
    <category term="入门" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;数字&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;数字类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;整型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;浮点型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;运算符&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;算数运算符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;位运算符[适用整数]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;数字相关的函数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;非针对数字类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;针对数字类型的内建&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;_1&#34;&gt;数字&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_2&#34;&gt;数字类型&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;按照&lt;a href=&#34;./pyobject.html&#34;&gt;对象类型&lt;/a&gt;中对类型分类,可知数字的使用操作会产生新对象，但对程序员是透明的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作&lt;br /&gt;
&lt;code&gt;删&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;改&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;查&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_3&#34;&gt;整型&lt;/h3&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;整型与长整型统一了吗？&lt;br /&gt;
整型与长整型对程序员来说迟早会透明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;布尔型&lt;/li&gt;
&lt;li&gt;标准整型&lt;br /&gt;
&lt;code&gt;32位机32位&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;64位机64位&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;长整型[注意了]&lt;br /&gt;
&lt;code&gt;和机器长度无关，和虚拟内存大小有关&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;99999999999999999999999999999L&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
    &lt;span class=&#34;il&#34;&gt;99999999999999999999999999999L&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;99999999999999999999999999999&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;！在这里我们也看出了&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的人性化，不输出‘&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;’&lt;/span&gt;
      &lt;span class=&#34;err&#34;&gt;而&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;repr&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;输出了‘&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;’&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;移位错误[已经消除]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;23123&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;1041&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*****&lt;/span&gt;&lt;span class=&#34;il&#34;&gt;34793216L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;汗！输出了&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3 id=&#34;_4&#34;&gt;浮点型&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;没有double但&lt;b style=&#39;color:red&#39;&gt;好像&lt;/b&gt;和double精度差不多&lt;/li&gt;
&lt;li&gt;&lt;b style=&#39;color:green&#39;&gt;注意一下会使用科学计数法就行&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b style=&#39;color:orange&#39;&gt;复数就不想写了，我会在科学计算章节谢写一点&lt;/b&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_5&#34;&gt;运算符&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_6&#34;&gt;分类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;算术运算符&lt;/li&gt;
&lt;li&gt;位运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_7&#34;&gt;算数运算符&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;地板除[向下取整]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Nov&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2015&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;06&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;
    &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;类似&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语言&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;===============================================&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Nov&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;17&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2015&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;成功作为地板除符号&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt;优先级&lt;b style=&#39;color:red&#39;&gt;高于&lt;/b&gt;单目运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_8&#34;&gt;位运算符[适用整数]&lt;/h4&gt;
&lt;p&gt;&lt;center&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;位运算符&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;~num&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;单目运算,对数的每一位取反&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;num1   &amp;lt;&amp;lt; num2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Num1 左移 num2 位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;num1 &amp;gt;&amp;gt; num2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Num1 右移 num2 位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;num1 &amp;amp; num2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;num1 与 num2 按位 与&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;num1 ^ num2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;num1 异或 num2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;num1 &lt;code&gt;|&lt;/code&gt; num2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;num1 与 num2 按位或&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负数会被当成正数的 2 进制补码处理。&lt;/li&gt;
&lt;li&gt;左移和右移 N 位等同于无溢出检查的 2 的 N 次幂运算: 2**N。&lt;/li&gt;
&lt;li&gt;对长整数来说, 位运算符使用一种经修改的 2 进制补码形式,使得符号位可以无限的向左扩展。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_9&#34;&gt;数字相关的函数&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;功能函数&lt;/li&gt;
&lt;li&gt;转换函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_10&#34;&gt;非针对数字类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cmp&lt;br /&gt;
&lt;code&gt;python3已经取消&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;str&lt;br /&gt;
&lt;code&gt;str(0xee)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_11&#34;&gt;针对数字类型的内建&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;转换工厂函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;11&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;ff&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;c&#34;&gt;#返回十进制&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;类(工厂函数)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;操作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;bool(obj)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;返回obj对象的布尔值,也就是obj.&lt;strong&gt;nonzero&lt;/strong&gt;()方法的返回值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;int(obj, base=10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;返回一个字符串或数值对象的整数表示,  类似string.atoi()从Python 1.6起,引入了可选的进制参数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;long(obj, base=10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;返回一个字符或数据对象的长整数表示,类似string.atol(),  从Python1.6起, 引入了可选的进制参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;float(obj)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;返回一个字符串或数据对象的浮点数表示,类似string.atof()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;complex(str) or complex(real, imag=0.0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;返回一个字符串的复数表示,或者根据给定的实数(及一个可选的虚数部分)生成一个复数对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;abs(num)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;返回 num 的绝对值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;coerce(num1, num2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;将num1和num2转换为同一类型,然后以一个元组的形式返回。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;divmod(num1, num2)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;除法-取余运算的结合。返回一个元组(num1/num2,num1 % num2)。对浮点数和复数的商进行下舍入(复数仅取实数部分的商)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;pow(num1, num2, mod=1)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;取 num1 的 num2 次方,如果提供 mod 参数,则计算结果再对 mod 进行取余运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;round(flt, ndig=0)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;接受一个浮点数  flt  并对其四舍五入,保存  ndig位小数。若不提供ndig  参数,则默认小数点后0位。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;nb&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;coerce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;divmod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;和&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-----&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;取绝对值&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;coerce&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;函数&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;coerce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;为程序员提供了不依赖&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;解释器&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;而是自定义两个数值类型转换的方法。对一种新创建的数值类型来说&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;这个特性非常有用。函数&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;coerce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;仅回一个包含类型转换完毕的两个数值元素的元组&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;divmod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;内建函数把除法和取余运算结合起来&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;返回一个包含商和余数的元组。对整数来说&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;它的返回值就是地板除和取余操作的结果。对浮点数来说&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;返回的商部分是&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对复数来说&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;商部分是&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;real&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;在&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;之前&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;并没有&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;运算符。内建函数&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;还接受第三个可选的参数&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;一个余数参数。如果有这个参数的&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;先进行指数运算&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;然后将运算结果和第三个参数进行取余运算。这个特性主要用于密码运算&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;并且比&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;性能更好&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;这是因为这个函数的实现类似于&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;函数&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;内建函数&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;用于对浮点数进行四舍五入运算。它有一个可选的小数位数参数。如果不提供小数位参数&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;它返回与第一个参数最接近的整数&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;但仍然是浮点类型&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。第二个参数告诉&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;round&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;函数将结果精确到小数点后指定位数&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;注意&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;小数截断&lt;/span&gt;
           &lt;span class=&#34;n&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;向下取整&lt;/span&gt;
           &lt;span class=&#34;nb&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;四舍五入&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/markdown下编辑公式教程.html</id>
    <title>页面渲染Latex字符</title>
    <link href="/Language/markdown下编辑公式教程.html" />
    <published>2017-08-26T00:00:00+08:00</published>

    
    <updated>2017-08-26T00:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mathjax&#34;&gt;MathJax功能引入&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;外联引入使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#customize-configuration&#34;&gt;内联Customize Configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;页面使用&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;基本用法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;常见的转字符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;希腊字母&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;字体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;常见的表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;已完善&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;_1&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;满怀欢喜的以为Markdown支持了Latex渲染，然而并没有在此WIKI使用,没有办法只能自己渲染，还好网络上有提供的开源的库直接使用。&lt;/p&gt;
&lt;h1 id=&#34;mathjax&#34;&gt;MathJax功能引入&lt;/h1&gt;
&lt;h2 id=&#34;_2&#34;&gt;外联引入使用&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;#官方有可能慢&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#国内&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;//cdn.bootcss.com/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;customize-configuration&#34;&gt;内联Customize Configuration&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/x-mathjax-config&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
MathJax.Hub.Config({
  #customize
});
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;path-to-MathJax/MathJax.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;_3&#34;&gt;页面使用&lt;/h1&gt;
&lt;h2 id=&#34;_4&#34;&gt;基本用法&lt;/h2&gt;
&lt;p&gt;行间公式：&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;$$&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;quot;公式&amp;quot;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;行内公式:&lt;code&gt;$&#34;公式&#34;$&lt;/code&gt;  注：有的地方可能需要用小括号将公式括起来：&lt;code&gt;$(&#34;公式&#34;)$&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;_5&#34;&gt;常见的转字符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;求和: \sum_{i=1}^n{x_i}  ($(\sum_{i=1}^n{x_i})$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;趋近于: \to  ($(\to)$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无穷大: \infty ($(\infty)$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二元关系: \times ($(\times)$), \div ($(\div)$), \pm ($(\pm)$), \circ ($(\circ)$), \cdot ($(\cdot)$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系运算符：如\leq(≤), \geq(≥), \subset(⊂), \supset(⊃), \in(∈), \bigcup $(\bigcup)$, \bigcap $(\bigcap)$, \iint $(\iint)$, \int $(\int)$;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;否定关系运算符：如\not=(≠), \not&amp;lt;(≮), \not\supset (⊅);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;箭头, \leftarrow(←), \rightarrow(→), \longrightarrow(⟶), \uparrow(↑)等;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绝对值， \vert{x}\vert ($(\vert{x}\vert)$), \Vert{x}\Vert ($(\Vert{x}\Vert)$), \langle{x}\rangle ($(\langle{x}\rangle)$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其它符号, \nabla(∇), \angle(∠), \forall(∀), \exists(∃), \prime(导数的撇′).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而对于专有名词,如一些函数名, 如sin x中的sin, 就要用罗马体, 而不是一般的数学斜体排印,我们可以用sinx, 也可以用TeX提供的直接在函数名前加”\”的方法: sinx,一般的函数均有定义, 如\sin, \cos, \lim, \log等.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_6&#34;&gt;希腊字母&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;字母名称&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;大写&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;markdown语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;小写&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;markdown语法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;alpha&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(A)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\alpha)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\alpha&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;beta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(B)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\beta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\beta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;gamma&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Gamma)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Gamma&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\gamma)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\gamma&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;delta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Delta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Delta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\delta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\delta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;epsilon&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(E)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;E&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\epsilon)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\epsilon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\varepsilon)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\varepsilon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;zeta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(Z)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Z&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\zeta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\zeta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;eta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(E)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;E&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\eta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\eta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;theta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Theta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Theta&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\theta)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\theta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;iota&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(I)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;I&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\iota)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\iota&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;kappa&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(K)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;K&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\kappa)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\kappa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;lambda&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Lambda)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Lambda&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\lambda)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\lambda&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Mu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(M)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;M&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\mu)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\mu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;nu&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(N)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\nu)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\nu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;xi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Xi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Xi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Xi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\xi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;omicron&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(O)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;O&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\omicron)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\omicron&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;pi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(Pi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Pi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\pi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;pi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;rho&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(P)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;P&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\rho)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\rho&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;sigma&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Sigma)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Sigma&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\sigma)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\sigma&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;tau&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(T)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;T&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\tau)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\tau&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;upsilon&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Upsilon)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Upsilon&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\upsilon)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\upsilon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;phi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Phi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Phi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\phi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\phi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\varphi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\varphi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;chi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(X)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\chi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\chi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;psi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\Psi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\Psi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$(\psi)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\psi&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;_7&#34;&gt;字体&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use \mathbb or \Bbb for &#34;blackboard bold&#34;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathbb{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathbf for boldface:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathbf{abcefghijklmnopqrstuvwxyz})$.&lt;/li&gt;
&lt;li&gt;$(\mathbf{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathtt for &#34;typewriter&#34; font:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathtt{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathtt{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathrm for roman font:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathrm{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathrm{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathsf for sans-serif font:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathsf{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathsf{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathcal for &#34;calligraphic&#34; letters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathcal{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathcal{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathscr for script letters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathscr{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathscr{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use \mathfrak for &#34;Fraktur&#34; (old German style) letters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(\mathfrak{abcefghijklmnopqrstuvwxyz})$&lt;/li&gt;
&lt;li&gt;$(\mathfrak{ABCDEFGHIJKLMNOPQRSTUVWXYZ})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_8&#34;&gt;常见的表达式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分数：$$\frac{a+1}{a-1}$$&lt;br /&gt;
语法： \frac{a+1}{a-1}&lt;/li&gt;
&lt;li&gt;$$\sum_{i=0}^n {i^2} ={\frac{(i+1)(i^2+6)}{i-1}}$$&lt;br /&gt;
语法：\sum_{i=0}^n {i^2} ={\frac{(i+1)(i^2+6)}{i-1}}&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;_9&#34;&gt;参考文献&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/Linear_Luo/article/details/52224996&#34;&gt;MarkDown(LaTex) 数学公式&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&#34;&gt;MATHEMATICS meta&lt;/a&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Life/杂想一.html</id>
    <title>关于恐惧</title>
    <link href="/Life/杂想一.html" />
    <published>2017-08-25T19:00:00+08:00</published>

    
    <updated>2017-08-25T19:00:00+08:00</updated>
    

    
    <category term="Life" />
    

    
    <content type="html">&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;人类的恐惧&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;听觉类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;视觉类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;触觉类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; left:80px; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/scared.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h1 id=&#34;_1&#34;&gt;人类的恐惧&lt;/h1&gt;
&lt;h2 id=&#34;_2&#34;&gt;听觉类&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;Example:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;指甲抓黑板，泡沫摩擦&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;厌恶类&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、电影制作中采用的音乐&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;恐惧类&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;科学数据：&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;来源见文献参考&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;人类厌恶的声音频段&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kHz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kHz&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生理观点：人类耳道的架构决定了其在&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kHz&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;频段产生共振，最高可将该频段的声音放大&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dB&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;心理观点：人会主观性的对一些行为厌恶&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;进化观点：与远古时期人类被怪兽咬骨头时发出的声音相似&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;个人倾向&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;&#34;&gt;未完待续&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;_3&#34;&gt;视觉类&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;Example:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;骷髅头、恐怖谷效应、带血的眼睛&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;进化观点：视觉危机预警&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;&#34;&gt;未完待续&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;_4&#34;&gt;触觉类&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;Example:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;在暗箱触摸虫类&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;心理观点：大多数人对未知充满恐惧&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;&#34;&gt;未完待续&lt;/a&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Math/Intro.html</id>
    <title>目录地图</title>
    <link href="/Math/Intro.html" />
    <published>2016-02-25T11:02:20+08:00</published>

    
    <updated>2016-02-25T11:02:20+08:00</updated>
    

    
    <category term="Math" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Math目录下的文章均属于&lt;a href=&#34;../Tool&#34;&gt;工具类&lt;/a&gt;的子集&lt;a href=&#34;../Language&#34;&gt;Language&lt;/a&gt;的子集由于选用的此Wiki暂时没有建立页面目录分级功能,且此类文章较多故只能将其分离出来&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;层次关系&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Tool&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__Language&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__Math&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Os/os01.html</id>
    <title>系统概论</title>
    <link href="/Os/os01.html" />
    <published>2017-09-06T21:00:00+08:00</published>

    
    <updated>2017-09-06T21:00:00+08:00</updated>
    

    
    <category term="Os" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;学习操作系统,如果仅仅将眼光局限于计算机,成就仅仅止于计算机,更重要的是,设计系统的策略.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-is&#34;&gt;what is&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;发展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;开始&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#temp&#34;&gt;temp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;与设备交互&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;来源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;处理时间&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;寄存器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;what-is&#34;&gt;what is&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每当谈到操作系统时,我更倾向于把它称为系统,很多人只是在界限上给操作系统划分为一个系统软件类别,而在我眼里,并不是那么粗糙的去定义它,它的确是一个软件,但是在逻辑上讲,更像是一组提高用户交互性,管理计算机资源与实现流程控制的一组功能之上的策略的集合。任何系统都是策略的集合,无论是计算机操作系统,还是计算机网络系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_1&#34;&gt;发展&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单道批处理()&lt;/li&gt;
&lt;li&gt;多道批处理&lt;/li&gt;
&lt;li&gt;分时&lt;/li&gt;
&lt;li&gt;并发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算机网络中对于cs模型具有重复型或并发型，看起来具有共同之处&lt;/p&gt;
&lt;h3 id=&#34;_2&#34;&gt;开始&lt;/h3&gt;
&lt;h4 id=&#34;temp&#34;&gt;temp&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;加电 cs:ip = 0xf000:fff0&lt;/li&gt;
&lt;li&gt;post自检[寻找显卡和执行BIOS]&lt;/li&gt;
&lt;li&gt;加载bootloader 到 0x7c00+512字节 控制转移&lt;/li&gt;
&lt;li&gt;加载内核&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_3&#34;&gt;与设备交互&lt;/h4&gt;
&lt;h5 id=&#34;_4&#34;&gt;来源&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;面向外设 中断+io处理&lt;/li&gt;
&lt;li&gt;面向系统程序 系统调用和异常提供服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;_5&#34;&gt;处理时间&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;中断:异步&lt;/li&gt;
&lt;li&gt;异常:同步&lt;/li&gt;
&lt;li&gt;系统调用: 同步或异步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IA-32 Intel ® Architecture&lt;/p&gt;
&lt;p&gt;Software Developer’s Manual Volume 1: Basic Architecture给出的解释:&lt;/p&gt;
&lt;p&gt;6.4.INTERRUPTS AND EXCEPTIONS&lt;br /&gt;
The processor provides two mechanisms for interrupting program execution: interrupts and exceptions:An interrupt is an asynchronous event that is typically triggered by an I/O device.An exception is a synchronous event that is generated when the processor detects one or more predefined conditions while executing an instruction. The IA-32 architecture specifies three classes of exceptions: faults, traps, and aborts.&lt;br /&gt;
The processor responds to interrupts and exceptions in essentially the same way. When an interrupt or exception is signaled, the processor halts execution of the current program or task and switches to a handler procedure that has been written specifically to handle the interrupt or exception condition.&lt;br /&gt;
 The processor accesses the handler procedure through an entry in the interrupt descriptor table (IDT). When the handler has completed handling the interrupt or exception,program control is returned to the interrupted program or task.&lt;br /&gt;
The operating system, executive, and/or device drivers normally handle interrupts and exceptions independently from application programs or tasks. Application programs can, however,access the interrupt and exception handlers incorporated in an operating system or executive through assembly-language calls. The remainder of this section gives a brief overview of theprocessor’s interrupt and exception handling mechanism. See Chapter 5, Interrupt and Exception Handling in the IA-32 Intel Architecture Software Developer’s Manual, Volume 3, for a detailed description of this mechanism.&lt;br /&gt;
The IA-32 Architecture defines 17 predefined interrupts and exceptions and 224 user defined interrupts, which are associated with entries in the IDT. Each interrupt and exception in the IDT is identified with a number, called a vector. Table 6-1 lists the interrupts and exceptions with entries in the IDT and their respective vector numbers. Vectors 0 through 8, 10 through 14, and16 through 19 are the predefined interrupts and exceptions, and vectors 32 through 255 are the user-defined interrupts, called mask-able interrupts.&lt;br /&gt;
&lt;b&gt;定义&lt;/b&gt;：&lt;br /&gt;
中断和异常是强制性的执行流的转移，从当前正在执行的程序或任务转移到一个特殊的例程或任务。当处理器收到中断信号或检测到异常时，便挂起当前正在运行的进程或者任务，而转去执行中断或异常处理例程。中断或异常处理例程执行完毕之后，处理器继续执行被中断的进程或任务。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;分类&lt;/b&gt;：&lt;br /&gt;
&lt;b&gt;中断&lt;b&gt;：又称为异步中断，是其他硬件依照CPU时钟信号随机产生的。中断又被分为可屏蔽硬件中断和不可屏蔽中断。在微机原理课程中，处理器中有两个引脚NMI和INTR负责接受中断信号，还有高级可编程中断控制器（APIC），如8259A管理中断信号。则可屏蔽硬件中断：任何通过INTR或着局部APIC传递到处理器的中断信号都被称为可屏蔽硬件中断，由IO设备产生的IRQ（Interrupt ReQuest）也是可屏蔽硬件中断。但是通过INTR引脚传递的可屏蔽硬件中断可使用Intel架构定义的中断向量（0-255），而局部的APIC传递的部分只能使用16-255号向量。若中断信号从NMI引脚传递过来，则发生的是一个不可屏蔽中断。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;异常&lt;/b&gt;：又称为同步中断，是当指令执行时CPU控制单元产生的，之所以称为同步，是因为只有在一条指令终止执行后CPU才会发出中断。在不失进程执行连续性的同时，按引起的异常的指令是否能重新执行,且依据它们被报告的方式，异常分为错误，陷阱，和终止三种情况。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;错误&lt;/b&gt;：错误是一种通常可以能够被修正的异常，一旦修正，程序能够不失去连续性地接着执行。当报告错误发生时，处理器将机器状态恢复到执行错误之前的状态。错误处理例程的返回地址指向产生错误的指令，而不是错误指令之后的的那条指令。如页错误。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;陷阱&lt;/b&gt;：当引起陷阱的指令发生时，马上产生该异常。陷阱允许程序不失去连续性的继续执行。陷阱处理例程的返回地址指向引起陷阱的指令的下一条指令（与错误本质上的区别）。如溢出。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;终止&lt;/b&gt;：它并不总是报告产生异常的指令的确定位置，也不允许引起终止的进程或任务重新执行。如总线错误导致异常终止。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;中断向量&lt;/b&gt;：&lt;br /&gt;
Intel x86共支持256中向量中断，Intel给每种中断源编号，从0-255,并把这个无符号整数叫做一个中断向量。不可屏蔽中断的向量和异常的向量是固定的，而可屏蔽的硬件中断可以通过对中断控制器编程来改变。&lt;/p&gt;
&lt;p&gt;Linux中的中断向量：&lt;/p&gt;
&lt;p&gt;0-19的中断向量对应于异常和非屏蔽中断。&lt;/p&gt;
&lt;p&gt;20-31Intel保留&lt;/p&gt;
&lt;p&gt;32-127可屏蔽硬件中断&lt;/p&gt;
&lt;p&gt;128用于系统调用的可编程异常&lt;/p&gt;
&lt;p&gt;129-238可屏蔽硬件中断&lt;/p&gt;
&lt;p&gt;239本地APIC时钟中断&lt;/p&gt;
&lt;p&gt;240本地APIC高温中断&lt;/p&gt;
&lt;p&gt;241-250由Linux留作将来使用&lt;/p&gt;
&lt;p&gt;251-253处理器间中断&lt;/p&gt;
&lt;p&gt;254本地APIC错误中断&lt;/p&gt;
&lt;p&gt;255本地APIC伪中断(CPU屏蔽某个中断时产生的)&lt;/p&gt;
&lt;p&gt;中断描述符表：&lt;br /&gt;
中断描述符表（Interrupt Descriptor Table，IDT）是一个系统表，它与每一个中断或异常向量相关，每一个向量在表中有相应的中断或异常处理程序的入口地址。内核在允许中断发生前，必须适当地初始化IDT，用lidt汇编指令初始化idtr。&lt;/p&gt;
&lt;p&gt;任务门：当中断信号发生时，必须取代当前进程的那个进程的TSS选择符存放在任务门中。&lt;/p&gt;
&lt;p&gt;中断门：包含段选择符和中断或异常处理程序的段内偏移量。当控制权转移到一个适当的段时，处理器清IF标志，从而关闭将来会发生的可屏蔽中断。&lt;/p&gt;
&lt;p&gt;陷阱门：与中断门相似，只是控制权传递到一个适当的段时处理器不修改IF标志。&lt;/p&gt;
&lt;p&gt;Linux利用中断门处理中断，利用陷阱门处理异常。&lt;/p&gt;
&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;区分用户态与内核态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中断处理与子程序调用的区别&lt;br /&gt;
&lt;code&gt;反正中断处理一定会保护程序状态字寄存器，而子程序调用不会&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;中断向量地址是&lt;br /&gt;
&lt;code&gt;中断服务例程地址的地址&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通用库函数可以执行特权吗？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用程序发生异常时操作系统可能做什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统执行中断处理的流程包括&lt;br /&gt;
&lt;code&gt;保护现场与恢复现场是编译器做的&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;执行中断应该不是他做的吧&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下列程序工作在内核态的有&lt;br /&gt;
&lt;code&gt;系统调用[]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;中断处理程序[]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;进程调度[]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;内存管理[]&lt;/code&gt;&lt;br /&gt;
系统调用在用户态发生，内核态执行，外部中断随时发生，应用程序执行时可能发生缺页&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中断处理例程主要做什么&lt;br /&gt;
&lt;code&gt;执行开/关中断特权指令&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_6&#34;&gt;寄存器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;psw(程序状态字)&lt;br /&gt;
&lt;code&gt;用于记录当前处理器状态和控制指令的执行顺序，并且保留与运行相关的各种信息&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;主要作用:实现程序状态的恢复与保护&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;中断经常用到，但子程序调用不会用到，因为子程序调用在程序内部执行&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/decorator.html</id>
    <title>装饰器模式DP</title>
    <link href="/Language/decorator.html" />
    <published>2017-08-26T21:00:00+08:00</published>

    
    <updated>2017-08-26T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=390258&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;问题起源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#uml&#34;&gt;UML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;普通装饰器&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;OOP中的装饰器模式;java曾经使用组合加继承实现过装饰器模式[这好像不值得写：）]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;_1&#34;&gt;介绍&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;[简.明]&lt;/strong&gt; 允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[界.限]&lt;/strong&gt; 在保持类方法签名完整性的前提下，提供了额外的功能[OOP]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[场.景]&lt;/strong&gt; 扩展一个类的功能/动态增加功能，动态撤销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[萌.物]&lt;/strong&gt;  孙悟空[本质不变,动态七十二变]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[缺.点]&lt;/strong&gt; 层层嵌套,过于复杂&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[优.点]&lt;/strong&gt; 无父类耦合问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[解.决]&lt;/strong&gt; 兄弟类们属性在同一维度相斥没必要都添加进子类使子类膨胀，也没必要各立山头&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[身.份]&lt;/strong&gt; 继承的替身&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;_2&#34;&gt;问题起源&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;InputStream inputStream = new BufferedInputStream(new FileInputStream(filePath));&lt;/code&gt;&lt;br /&gt;
QAQ？看不懂咩～那别往下看了&lt;br /&gt;
&lt;strong&gt;来自网络的释义&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;装饰器模式&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;主要用于为对象动态的添加功能&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。比如说，最简单的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;使用可能是如下代码：&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filePath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;但是我们发现，这个代码&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;每次进行读取都会进行&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;一次&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;是比较耗费时间的。&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;那么有没有什么方法降低&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;次数呢，自然想到了缓冲。那么此时有两种做法：&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;定义一个&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;专门用于缓冲的文件读写&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;为&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;类进行扩展，让它支持&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;缓冲。&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;肯定是第二种好，为什么呢。因为如果你按照&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;方案，&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;假如我要定义一个支持&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;功能，此时要定义一个&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;专门用于这个功能的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，这个没有问题；&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;假如我又要定义一个支持&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;功能，此时要定义一个专门用于这个功能的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，这个也没有问题；&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;但是，假如我要定义一个&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;同时支持&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;功能，由于不能扩展，所以你必须再定义一个类，同时支持&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;功能。这个就有问题了，问题就是重复了。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;但是，&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;方案就能解决这个问题，&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;方案中当你需要一个同时支持&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;功能的类，那你动态扩展便是了，不用再新定义一个类，同时支持&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XY&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;这个就是装饰器模式的好处。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;uml&#34;&gt;UML&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; left:80px; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/decorator.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;why&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;要搞这么复杂呢，就是为了以后可以更好的扩展。像很多技术我们都知道它的原理，但是你看它们的源码，异常的捕获，各种检测，健壮性，扩展性，别人都考虑得很全，而且已经&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;下来了。&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Talk&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cheap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;me&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;回到这个图，再对应着下面这个代码说：&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedInputStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filePath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Component&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：相当于&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Java&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;中很多的流都是继承于&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。也就是一个基础组件。&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ConcreteComponent&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：相当于&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，一个基础组件的实现。&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Decorator&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：所有具体装饰器类的抽象父类，在&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Java&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;包中&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对应的是&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FilterInputStream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ConcreteDecorator&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：具体的装饰者。相当于&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BufferedInputStream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_3&#34;&gt;普通装饰器&lt;/h3&gt;
&lt;h4 id=&#34;python&#34;&gt;Python&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decorator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keywords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;        &lt;span class=&#34;c&#34;&gt;#代码装饰&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keywords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;注意line4 和 line5的return区别，一个返回的是对象，一个返回的是引用，所以无论外边再包几个高级函数&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;java&#34;&gt;Java&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;#定义&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// The Window interface class&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Draws the Window&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Returns a description of the Window&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// implementation of a simple Window without any scrollbars&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SimpleWindow&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Draw window&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;simple window&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// abstract decorator class - note that it implements Window&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;WindowDecorator&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoratedWindow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// the Window being decorated&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;WindowDecorator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoratedWindow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;decoratedWindow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoratedWindow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;// The first concrete decorator which adds vertical scrollbar functionality&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;VerticalScrollBar&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WindowDecorator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;VerticalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;windowToBeDecorated&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;windowToBeDecorated&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;drawVerticalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;drawVerticalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Draw the vertical scrollbar&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;, including vertical scrollbars&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;// The second concrete decorator which adds horizontal scrollbar functionality&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HorizontalScrollBar&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WindowDecorator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;HorizontalScrollBar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;windowToBeDecorated&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;windowToBeDecorated&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;drawHorizontalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;drawHorizontalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Draw the horizontal scrollbar&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;, including horizontal scrollbars&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;#测试&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// for print descriptions of the window subclasses&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;description:&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// original SimpleWindow&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;SimpleWindow&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SimpleWindow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// HorizontalScrollBar  mixed Window&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;HorizontalScrollBar&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hbw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HorizontalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hbw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// VerticalScrollBar mixed Window&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;VerticalScrollBar&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vbw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;VerticalScrollBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hbw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vbw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;#结果&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;description:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simple&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;description:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simple&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;including&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;horizontal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scrollbars&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;description:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simple&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;including&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;horizontal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scrollbars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;including&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vertical&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scrollbars&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/入门/jinja2.html</id>
    <title>Jin[W|P]ja2</title>
    <link href="/入门/jinja2.html" />
    <published>2017-09-28T12:00:00+08:00</published>

    
    <updated>2017-09-28T12:00:00+08:00</updated>
    

    
    <category term="入门" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;沙箱中执行&lt;/li&gt;
&lt;li&gt;强大的 HTML 自动转义系统保护系统免受 XSS&lt;/li&gt;
&lt;li&gt;模板继承&lt;/li&gt;
&lt;li&gt;及时编译最优的 python 代码&lt;/li&gt;
&lt;li&gt;可选提前编译模板的时间&lt;/li&gt;
&lt;li&gt;易于调试。异常的行数直接指向模板中的对应行。&lt;/li&gt;
&lt;li&gt;可配置的语法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;test&#34;&gt;Test&lt;/h3&gt;
&lt;p&gt;Template--&amp;gt;生成模板--&amp;gt;render参数渲染&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/regex02.html</id>
    <title>速览[R]知识</title>
    <link href="/Language/regex02.html" />
    <published>2017-08-31T21:00:00+08:00</published>

    
    <updated>2017-08-31T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;思索中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;规律之外,无语无言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;术语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;常见&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;常用手段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;常见问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;实践心得&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;声明&lt;/h3&gt;
&lt;p&gt;以下实例均出自egrep所属流派(flavor),如果出现复制之后无法匹配,证明你...&lt;/p&gt;
&lt;h3 id=&#34;_2&#34;&gt;术语&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;正则[Regex]&lt;/li&gt;
&lt;li&gt;匹配[matching]&lt;/li&gt;
&lt;li&gt;元字符[metacharacter]&lt;/li&gt;
&lt;li&gt;流派[flavor]&lt;/li&gt;
&lt;li&gt;子表达式[subexpression]&lt;/li&gt;
&lt;li&gt;字符[character]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_3&#34;&gt;常见&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;量词&lt;ul&gt;
&lt;li&gt;? + *&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_4&#34;&gt;解决方案&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;重复出现 + *&lt;/li&gt;
&lt;li&gt;多选择  &lt;ul&gt;
&lt;li&gt;单位置 (|)&lt;ul&gt;
&lt;li&gt;不确定 .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;连续多位置 [...]  [^...] 集合与补集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可选择 ？&lt;/li&gt;
&lt;li&gt;高级手段&lt;ul&gt;
&lt;li&gt;反向匹配[看到了动态语言的影子]&lt;br /&gt;
&lt;code&gt;实现重复单词查询&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Ex: \&amp;lt;([A-Za-z]+) +\1\&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_5&#34;&gt;解析&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;()&lt;/code&gt;的原因&lt;ul&gt;
&lt;li&gt;限制多选结构&lt;/li&gt;
&lt;li&gt;分组&lt;/li&gt;
&lt;li&gt;捕获文本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;转义的三种情况&lt;ul&gt;
&lt;li&gt;元字符普通化&lt;/li&gt;
&lt;li&gt;普通字符元字符序列化&lt;/li&gt;
&lt;li&gt;除此之外被忽略掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_6&#34;&gt;常用手段&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;缩小问题空间&lt;br /&gt;
&lt;code&gt;color 与colour egrep &#39;(color|colour)&#39;----&#39;colo(u)?r&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正则表达式内部没有忽略大小写,想要忽略大小写从封装他的软件入手&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;egrep -i#忽略大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_7&#34;&gt;常见问题&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单词分界&lt;br /&gt;
&lt;code&gt;smallcat 与cat 但是我仅仅想要匹配单独的cat单词&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;解决:元字符序列 \&amp;lt;  \&amp;gt;类似单词版本的^$&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;使用:(\&amp;gt;cat\&amp;gt;)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;特性:遇见非英文字符直接认为是词首或者词尾&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;贪心匹配&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;提取引号内字符串&lt;br /&gt;
&lt;code&gt;&#34;[^&#34;]*&#34;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;美元金额&lt;br /&gt;
&lt;code&gt;\$[0-9]+(\.[0-9]+)?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;匹配HTTP URL&lt;br /&gt;
&lt;code&gt;\&amp;lt;(H|h)(T|t){2}(P|p)://[^ ]+\&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;html tag&lt;br /&gt;
&lt;code&gt;&#39;&amp;lt; *([a-z]+) *[^&amp;lt;&amp;gt;\/]*&amp;gt;.*&amp;lt;/\1&amp;gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;匹配时间&lt;br /&gt;
&lt;code&gt;下次有时间补上&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_8&#34;&gt;实践心得&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;* +&lt;/code&gt;的对象大都是空格&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/入门/pyobject.html</id>
    <title>对象类型</title>
    <link href="/入门/pyobject.html" />
    <published>2015-09-21T18:00:00+08:00</published>

    
    <updated>2015-09-21T18:00:00+08:00</updated>
    

    
    <category term="入门" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;object与type的关系就像是鸡与鸡蛋的关系,充满设计的思想问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;对象&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;三大特性&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;身份&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;对象属性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;类型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;标准类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;其他内建类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nonepythonnull&#34;&gt;None[PYTHON的Null对象]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;内部类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;对象运算&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_12&#34;&gt;对象值比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_13&#34;&gt;对象身份比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_14&#34;&gt;布尔类型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_15&#34;&gt;内建函数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_16&#34;&gt;类型工厂函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_17&#34;&gt;标准类型分类&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_18&#34;&gt;&lt;span style=&#39;color:red&#39;&gt;分类&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#python&#34;&gt;Python的选择&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#typeobject&#34;&gt;type与object详解&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_19&#34;&gt;设计思想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_20&#34;&gt;待解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;_1&#34;&gt;对象&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_2&#34;&gt;三大特性&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_3&#34;&gt;身份&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;内建函数id()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;mi&#34;&gt;42533160&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_4&#34;&gt;类型&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;内建函数type()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;_5&#34;&gt;值&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;`除了值之外&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;以上两个特性是只读的`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;上面三个特性在对象创建时就被赋值,对于新风格的类型,对象的类型其实也是可以改变的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;_6&#34;&gt;对象属性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;li&gt;数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;_7&#34;&gt;类型&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_8&#34;&gt;标准类型&lt;/h3&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;python中的基本数据类型不想多写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;也称作基本数据类型，因为这些类型是Python内建的基本数据类型&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;_9&#34;&gt;其他内建类型&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;类型()&lt;/li&gt;
&lt;li&gt;NULL对象(None)&lt;/li&gt;
&lt;li&gt;文件&lt;/li&gt;
&lt;li&gt;集合/固定集合&lt;/li&gt;
&lt;li&gt;函数/方法&lt;/li&gt;
&lt;li&gt;模块&lt;/li&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;nonepythonnull&#34;&gt;None[PYTHON的Null对象]&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;值为none&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_10&#34;&gt;内部类型&lt;/h3&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;内建类型是python类库提供给你的基本数据类型&lt;br /&gt;
内部类型是面向对象的，类的内部类型，它是类内部使用的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;代码[core_python.c14]&lt;br /&gt;
&lt;code&gt;代码对象是编译过的 Python 源代码片段,它是可执行对象&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;通过调用内建函数 compile()可以得到代码对象&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;代码对象可以被 exec 命令或 eval()内建函数来执行&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[事实上代码对象是函数的一个属性]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;帧&lt;br /&gt;
&lt;code&gt;帧对象表示 Python 的执行栈帧&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;帧对象包含 Python 解释器在运行时所需要知道的所有信息&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;它的属性包括指向上一帧的链接,正在被执行的代码对象(参见上文),本地及全局名字空间字典以及当前指令等&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;每次函数调用产生一个新的帧,每一个帧对象都会相应创建一个 C 栈帧&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;跟踪记录&lt;br /&gt;
&lt;code&gt;当异常发生时,一个包含针对异常的栈跟踪信息的跟踪记录对象被创建&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;如果一个异常有自己的处理程序,处理程序就可以访问这个跟踪记录对象&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;切片&lt;br /&gt;
&lt;code&gt;当使用 Python 扩展的切片语法时,就会创建切片对象&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;包括步进切片, 多维切片,及省略切片&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;切片对象也可以由内建函 数 slice() 来 生 成&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;省略&lt;br /&gt;
&lt;code&gt;省略对象用于扩展切片语法中,起记号作用&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;这个对象在切片语法中表示省略号&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;类似Null 对象 None, 省略对象有一个唯一的名字 Ellipsis, 它的布尔值始终为 True.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Xrange[core_python c8]&lt;br /&gt;
&lt;code&gt;调用内建函数 xrange() 会生成一个 Xrange 对象&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;xrange()是内建函数 range()的兄弟版本&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;用于需要节省内存使用或 range()无法完成的超大数据集场合&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_11&#34;&gt;对象运算&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_12&#34;&gt;对象值比较&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_13&#34;&gt;对象身份比较&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;is&lt;/li&gt;
&lt;li&gt;is not&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_14&#34;&gt;布尔类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;or&lt;br /&gt;
&lt;code&gt;expr1 or expr2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and&lt;br /&gt;
&lt;code&gt;expr1 and expr2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;not&lt;br /&gt;
&lt;code&gt;not expr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_15&#34;&gt;内建函数&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;cmp&lt;/li&gt;
&lt;li&gt;repr&lt;/li&gt;
&lt;li&gt;str&lt;br /&gt;
&lt;code&gt;str比repr返回的可读性好&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;str&#39;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;准确的说这是一个运算符&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;gt;&amp;gt; &#39;[1,2,3,4]&#39;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;gt;&amp;gt; &#39;[1,2,3,4]&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;type&lt;br /&gt;
&lt;code&gt;返回类型对象,是object的子对象&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;faq&#34;&gt;FAQ&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么我们有了 repr()还需要``&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;语法糖&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_16&#34;&gt;类型工厂函数&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;Python 2.2 统一了类型和类, 所有的内建类型现在也都是类, 在这基础之上, 原来的&lt;br /&gt;
所谓内建转换函数象 int(), type(), list() 等等, 现在都成了工厂函数。 也就是说虽然他&lt;br /&gt;
们看上去有点象函数, 实质上他们是类。当你调用它们时, 实际上是生成了该类型的一个实&lt;br /&gt;
例, 就象工厂生产货物一样.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_17&#34;&gt;标准类型分类&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;如果让我们最啰嗦的描述标准类型,我们也许会称它们是 Python 的“基本内建数据对象原&lt;br /&gt;
始类型”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“基本”&lt;br /&gt;
&lt;code&gt;是指这些类型都是 Python 提供的标准或核心类型&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;“内建”&lt;br /&gt;
&lt;code&gt;是由于这些类型是 Python 默认就提供的&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;“数据”&lt;br /&gt;
&lt;code&gt;因为他们用于一般数据存储&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;“对象”&lt;br /&gt;
&lt;code&gt;因为对象是数据和功能的默认抽象&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;“原始”&lt;br /&gt;
&lt;code&gt;因为这些类型提供的是最底层的粒度数据存储&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;“类型”&lt;br /&gt;
&lt;code&gt;因为他们就是数据类型&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_18&#34;&gt;&lt;span style=&#39;color:red&#39;&gt;分类&lt;/span&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;可以按照增改查三大基本操作对类型进行分类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;[增/存储]存储模型&lt;br /&gt;
&lt;code&gt;[容器]------&amp;gt;元组，列表，字典&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[标量/原子]--&amp;gt;数字，字符串&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[改/更新]更新模型&lt;br /&gt;
&lt;code&gt;[可变]----&amp;gt;列表，字典&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[不可变]--&amp;gt;数字，字符串，元组&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[查/访问]访问模型&lt;br /&gt;
&lt;code&gt;[直接存取]--&amp;gt;数字&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[顺序存取]--&amp;gt;元组，字符串，列表&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[映射访问]--&amp;gt;字典&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;python&#34;&gt;Python的选择&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;不适用char，byte&lt;/li&gt;
&lt;li&gt;int统一世界&lt;/li&gt;
&lt;li&gt;放弃double&lt;br /&gt;
&lt;code&gt;感觉double带来的坏处比好处多&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;typeobject&#34;&gt;type与object详解&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_19&#34;&gt;设计思想&lt;/h4&gt;
&lt;p&gt;这里不谈代码只是说设计思想&lt;br /&gt;
首先万物有源,物质有所谓的通性,python说万物皆对象,那么追溯其源头,总会出现一个object源头,但是python也说了对象具有三大特性其一就有类型,那么问题来了,既然万物皆对象,那么类型也就会是对象,object作为元对象拥有类型,就意味着object是其子对象的实例&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_20&#34;&gt;待解决&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;没有完全融会贯通&lt;code&gt;Object&lt;/code&gt;与&lt;code&gt;Type&lt;/code&gt;的关系&lt;/li&gt;
&lt;/ol&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/About/aboutMe.html</id>
    <title>关于我</title>
    <link href="/About/aboutMe.html" />
    <published>2017-08-25T21:00:00+08:00</published>

    
    <updated>2017-08-25T21:00:00+08:00</updated>
    

    
    <category term="About" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;技能树&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;面向机器&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#8086&#34;&gt;8086汇编&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;面向过程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#c&#34;&gt;C语言&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;面向对象&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#c_1&#34;&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#python&#34;&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;面向领域&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sql&#34;&gt;SQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskell&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;系统&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;编辑排版&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#markdown&#34;&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#latex&#34;&gt;Latex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#html5css&#34;&gt;HTML5+CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;计算&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_12&#34;&gt;计算的模型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_13&#34;&gt;图灵机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_14&#34;&gt;元细胞自动机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_15&#34;&gt;可计算理论&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_16&#34;&gt;停机问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_17&#34;&gt;计算的复杂性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; left:80px; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/student.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;br /&gt;
  &lt;p style=&#34;position:relative; left:80px;text-align:center&#34;&gt;&lt;br /&gt;
    &lt;b&gt;Name&lt;/b&gt;:Li Guo Zhen&lt;br /&gt;
    &lt;b&gt;Profession&lt;/b&gt;:student&lt;br /&gt;
    &lt;b&gt;Sex&lt;/b&gt;:male&lt;br /&gt;
  &lt;/p&gt;&lt;/p&gt;
&lt;h2 id=&#34;_1&#34;&gt;技能树&lt;/h2&gt;
&lt;h3 id=&#34;_2&#34;&gt;语言&lt;/h3&gt;
&lt;h4 id=&#34;_3&#34;&gt;面向机器&lt;/h4&gt;
&lt;h5 id=&#34;8086&#34;&gt;8086汇编&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;仅仅停留在王爽《汇编语言》读完水平&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_4&#34;&gt;面向过程&lt;/h4&gt;
&lt;h5 id=&#34;c&#34;&gt;C语言&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;略微精通&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;操作以及系统级调用&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_5&#34;&gt;面向对象&lt;/h4&gt;
&lt;h5 id=&#34;java&#34;&gt;Java&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;曾建设类似天猫网站&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;完成&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Oracle&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;数据库的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;管理应用&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Java&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;虚拟机、线程、正则表达式的熟练程度不够&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;c_1&#34;&gt;C++&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;普通应用&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;python&#34;&gt;python&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;开发出爬虫&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;局域网扫描&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;擅长很多模块&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_6&#34;&gt;面向领域&lt;/h4&gt;
&lt;h5 id=&#34;_7&#34;&gt;正则表达式&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对其数学原理有所深入&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;造完轮子再更新&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;sql&#34;&gt;SQL&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;了解并会简单使用&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sql&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;注入&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;可以再应用层次防范低级注入&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;haskell&#34;&gt;Haskell&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;浅读设计哲学&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_8&#34;&gt;系统&lt;/h3&gt;
&lt;h4 id=&#34;windows&#34;&gt;Windows&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;中等玩家&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;停留在解决&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dll&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;与注册表问题层次&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;linux&#34;&gt;Linux&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;中等玩家&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;日常办公&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_9&#34;&gt;算法&lt;/h3&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;较为深入了解递归思想&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;擅长树、图、数组的操作&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;熟练算法的效率分析&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ACMing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_10&#34;&gt;编辑排版&lt;/h3&gt;
&lt;h4 id=&#34;markdown&#34;&gt;Markdown&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;十分熟练&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;latex&#34;&gt;Latex&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;菜鸟一只&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;html5css&#34;&gt;HTML5+CSS&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;略微擅长&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_11&#34;&gt;计算&lt;/h3&gt;
&lt;h4 id=&#34;_12&#34;&gt;计算的模型&lt;/h4&gt;
&lt;h5 id=&#34;_13&#34;&gt;图灵机&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;略微了解&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;_14&#34;&gt;元细胞自动机&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;略微了解&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_15&#34;&gt;可计算理论&lt;/h4&gt;
&lt;h5 id=&#34;_16&#34;&gt;停机问题&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;可以十分简单的证明&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_17&#34;&gt;计算的复杂性&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;未曾涉足&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;&#34;&gt;未完待续&lt;/a&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Life/Study.html</id>
    <title>学习学习</title>
    <link href="/Life/Study.html" />
    <published>2017-09-06T21:00:00+08:00</published>

    
    <updated>2017-09-06T21:00:00+08:00</updated>
    

    
    <category term="Life" />
    

    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;真知在何处？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;err&#34;&gt;原文已删除&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/SE/softwareengine01.html</id>
    <title>软件工程</title>
    <link href="/SE/softwareengine01.html" />
    <published>2017-09-07T21:00:00+08:00</published>

    
    <updated>2017-09-07T21:00:00+08:00</updated>
    

    
    <category term="SE" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;外围概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#qusetion&#34;&gt;QUSETION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;软件生存期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;外围概念&lt;/h3&gt;
&lt;p&gt;[WIKI]&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;原理&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;是存在于某个系统中的一组法律、规则与基本前提。这个体系中的其他事物，大体上都可以经由这个基本规律来推导、解释与预测；这个体系中的成员，都应该遵守这个基本规律，在这套规则下运作。经由了解这个体系的原理，可以了解到整个体系的基本特征，或是反映出这个体系被设计的目的。如果这个体系下的某个原理被忽略，可能造成体系无法运作，或是这个行为将无法达成其目的。&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;在哲学、数学及物理学中，都常使用这个名词。在数学中，以公理（&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Axiom&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）及逻辑基础作为整个数学体系的原理。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[BaiDu]&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;原理&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;自然科学和社会科学中具有普遍意义的基本规律。是在大量观察、实践的基础上，经过归纳、概括而得出的。既能指导实践，又必须经受实践的检验。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;qusetion&#34;&gt;QUSETION&lt;/h3&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;软件工程分为软件和工程&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;什么是软件？&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;软件开发有什么特性？&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;什么是软件工程？&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;为什么要建立软件工程学科？&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;既然引入软件工程去解决问题&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;那么它的目标是什么？&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;为了实现这些目标它有什么原理支撑？&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_2&#34;&gt;软件生存期&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;践行软件工程基本原理的第一条&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;按软件生存周期分阶段指定计划并认真实施&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;括号内代表任务&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件定义(任务:做什么)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题定义&lt;/li&gt;
&lt;li&gt;可行性研究&lt;br /&gt;
&lt;code&gt;任务细化:到底解决什么问题,不要把你的计算机牵扯进来,钱和时间都给了限制能不能在这种情况下开发出来,需要职员:软件分析员，一个软件行不行,要从好多角度看,在大学编程,看起来就像基础技术是否具备,课设截止时间是否能够做出来？但是在社会上仍需要考虑法律,宗教(在对方是穆斯林餐厅的话,你带入猪肉,那就玩完了),还有用户是否具有学会操作的本领()等等，&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;需求分析&lt;br /&gt;
&lt;code&gt;任务细化:我的系统应该干什么？建立起从问题空间到解空间的映射，看个人的建模能力了,这里需要建立分析模型,从功能数据行为等方面去描述系统的静态特性和动态特性,对目标系统进一步细化,当然软件工程会给你提供参考&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;功能需求&lt;/li&gt;
&lt;li&gt;非功能需求[性能等等]    &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件开发(任务:怎么做)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;概要设计&lt;/li&gt;
&lt;li&gt;详细设计&lt;br /&gt;
&lt;code&gt;设计是软件工程的技术核心&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;任务细化:如何做出目标系统,这里具体做的就是将需求转化为相应的软件体系结构,结构中的每一组成部分都必须是意义明确的构件,这就是概要设计。进而描述构建应该做什么,以及做事的顺序这就是详细设计，基于设计编写出单元测试计划和集成测试计划提交评审部门。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编码&lt;br /&gt;
&lt;code&gt;选择一门好的语言会事半功倍&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;测试&lt;br /&gt;
&lt;code&gt;单元模块测试,调试排错,保持与设计一致，与编码出现迭代&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;集成测试&lt;br /&gt;
&lt;code&gt;已测试模块组装&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;系统测试&lt;br /&gt;
&lt;code&gt;需求检测是否满足用户需求&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;维护(任务:使软件持久的满足用户需要)&lt;br /&gt;
&lt;code&gt;最浪费人力物力&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改正性维护&lt;/li&gt;
&lt;li&gt;适应性维护&lt;/li&gt;
&lt;li&gt;完善性维护&lt;/li&gt;
&lt;li&gt;预防性维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;什么是软件危机&lt;br /&gt;
&lt;code&gt;分两个方面,软件本身与设计者&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/java01.html</id>
    <title>创建[J]清理</title>
    <link href="/Language/java01.html" />
    <published>2017-09-02T21:00:00+08:00</published>

    
    <updated>2017-09-02T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;完备的系统在演变中浑然天成,要想在系统中添加新的功能,必须能够忍受带来的递归增长的问题.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;草稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;构造器&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;功能需求&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;基本类型的重载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#this&#34;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;清理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;再谈初始化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;构造器初始化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;数组的初始化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;枚举类型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;草稿&lt;/h3&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;###混乱中&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对象的存储&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;存储方式&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;位置&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;基本类型存储在栈&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;自己创建的对象存储在堆&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;堆的速度慢&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;栈的速度快&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;栈要求知道生命周期&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;堆不需要知道生命周期以便操作栈指针&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;老师说生命周期并不是一个软件一个对象死了&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;而是指他该做的已经做了&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;他已经对现有系统没用了&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对于软件来说&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;他的功能已经不足以现在的系统&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;他的生命周期已经结束了&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;所以你要经常维护他&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;让他成长&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;他的生命才会存在，并且生命周期一直会延长着&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;插入题外话&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;现在要搜索结构化开发与面向对象开发的比较&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;###知识点&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;基本类型使用频繁&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;如果放入堆区难免影响速度&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;故放入栈区&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;新概念：包装基本类型&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;###策略&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;性能换功能&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;速度换精度&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;包装类型&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BigInteger&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;和&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BigDecimal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_2&#34;&gt;构造器&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;为了安全性考虑,java引入了构造器,不可避免的制定了目标,并在解空间建模之后,就要进行迭代的概要设计与详细设计&lt;/p&gt;
&lt;h4 id=&#34;_3&#34;&gt;功能需求&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;能够防止与其他方法重名&lt;/li&gt;
&lt;li&gt;编译器自动调用,既然不能硬编码&lt;br /&gt;
&lt;code&gt;解决方案:那就和类一个名字吧&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;并且不能有返回类型,因为返回了编译期也没办法处理,毕竟返回值的处理不好泛化&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提出新的需求,考虑到一个对象的初始化有很多方式,引入重载&lt;br /&gt;
&lt;code&gt;没办法再加一个功能吧,反正大家也都能用,又不是只让构造器用&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;既然重载了,就把我上一章提到的方法签名拿出来吧&lt;br /&gt;
&lt;code&gt;参数列表就是方法签名&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;参数的顺序&lt;/li&gt;
&lt;li&gt;参数的多少&lt;/li&gt;
&lt;li&gt;参数的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为什么不用返回值来作为签名信息之一&lt;br /&gt;
&lt;code&gt;当只是使用方法的副作用的时候,而不是使用返回值会出现歧义。例如: f();请问是哪一个f(), int f() or void f()?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_4&#34;&gt;基本类型的重载&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;基本类型由于具有隐式的向上转型,致使很多人在调用时出错&lt;br /&gt;
&lt;code&gt;记住以下的介绍的就行,基本类型默认匹配参数一致的,对于直接数来说,整数为int为参数一致,只能向上转型,不能向下转型,毕竟信息可以丢失但不能缺失&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;this&#34;&gt;this&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;类方法如何确定来的是哪个对象的调用,其实这句话我也不知道自己说的对不对,a.hello(),b.hello();hello怎么确定它前面是a还是b，解决这个问题我认为有两种,另外如果我想在构造器中调用构造器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将类方法代码复制一份到对象自己的私有空间,对象在私有空间对其进行调用,我认为这样不好&lt;/li&gt;
&lt;li&gt;在调用的时候应该隐式的将对象的唯一标识传入方法即&lt;b&gt;this&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b style=&#39;color:red&#39;&gt;待解决:到底类的方法会不会复制一份到对象的独立区域&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对了,值得一提,this能够消除歧义&lt;/p&gt;
&lt;h3 id=&#34;_5&#34;&gt;清理&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;以前看了看垃圾回收器的作用,发现了一个问题,垃圾回收只能操作new出来的对象,万一脑子一抽不用new申请出一块特殊内存,垃圾回收器不知道怎么回收,那不出现内存泄漏了么？对此java引入了新的机制,finalize(),我把它称为”终结者“笑:-D&lt;br /&gt;
这里谈一谈垃圾回收器的强调&lt;br /&gt;
1. 垃圾回收器代表不了析构函数，之所以会用垃圾回收器是因为java贪图安全防止内存泄漏&lt;br /&gt;
一旦回收器准备释放某一部分空间时,他会先调用其finalize方法,然后在等到其应该执行回收动作的时候再进行真正的释放.所以说finalize并没有在真正的意义上将对象释放.&lt;br /&gt;
回收器开始工作时,垃圾不一定会被回收,因为垃圾回收器也占有一定的开销,冒昧的使用只会增大系统的浪费,所以在使用finalize方法时要注意,就像是声明要去做一样，但是不一定去做,如果去做了,一定会做完。&lt;/p&gt;
&lt;h3 id=&#34;_6&#34;&gt;再谈初始化&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;注意java和c++在指定初始化的不同&lt;br /&gt;
&lt;code&gt;对于类成员的初始化,java可以直接指定赋值,而c++不行&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;java&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//正确&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//正确&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//正确&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//正确&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;方法的引用可以是无序的&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;所以&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;和&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;调换位置是不影响的&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;但是参数的使用必须是有序的所以&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;不能和&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;换位&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;   &lt;span class=&#34;err&#34;&gt;##&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
   &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//错误&lt;/span&gt;
     &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//错误&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_7&#34;&gt;构造器初始化&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;涉及到初始化顺序&lt;/code&gt;&lt;br /&gt;
&lt;center&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/initial.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&#34;_8&#34;&gt;数组的初始化&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;创建方式[见后面文章 new {}]&lt;/li&gt;
&lt;li&gt;基本类型的数组元素会自动被初始化为空值&lt;/li&gt;
&lt;li&gt;自定义类型的数组元素会自动被初始化为空引用&lt;/li&gt;
&lt;li&gt;产生一维数组的可打印版本,不用迭代了&lt;ul&gt;
&lt;li&gt;Arrays.toString()&lt;br /&gt;
&lt;code&gt;使用Arrays.toString(数组引用)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用初始化列表&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;   &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//作为参数&lt;/span&gt;
   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;happy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;可变参数列表&lt;br /&gt;
&lt;code&gt;十分不赞同使用可变参数列表,毕竟有重载&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;自己去了解老版的使用方式&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Object...args&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;原理,编译器将参数组合为数组然后传递,所以要注意转型问题&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;但是可变参数带来了重载的复杂性&lt;br /&gt;
有人说类型不是自动匹配吗,遇见相同的类型为最佳匹配,遇见较低的不匹配,遇见较高的向上转型,但是很多人忽略了一个问题,那就是没有参数的传递,到底该调用那个,在前面的重载中,我们以参数的可控长度重载方法,那时候我们知道,如果参数值长度是0的话,就要去找相应参数长度的重载方法,但是可变参数的引用搅乱了方法签名,以至于参数的长度与顺序均不起效,一旦参数的长度与顺序均不奇效,那么一旦出现参数的长度与顺序与以前不同的调用就出现了歧义,那么bug就出现了.&lt;br /&gt;
比如 &lt;code&gt;f()&lt;/code&gt;,我特喵不知道该调用哪个重载的函数啊.&lt;br /&gt;
出现问题就要解决问题,为了防止参数长度与参数顺序的bug,首先要在书写重载方法时防范,对于固定类型的参数列表写一个就行了,除非有固定参数,因为0个参数不仅带来参数长度问题还带来参数类型问题,所以我们也是加一个固定类型的参数放在前面进行防范.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_9&#34;&gt;枚举类型&lt;/h3&gt;
&lt;hr /&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emun&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;circle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ONE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;TWO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;THREE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;FOUR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;FIVE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SIX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SEVEN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;emun中定义的类方法&lt;ul&gt;
&lt;li&gt;values(所有的emun值集合)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;emun中定义的对象方法&lt;ul&gt;
&lt;li&gt;ordinal(每个值的序号 ONE-&amp;gt;0,TWO-&amp;gt;2...)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;可以使用在Switch&lt;/strong&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Os/FindAddr.html</id>
    <title>寻址方式</title>
    <link href="/Os/FindAddr.html" />
    <published>2017-09-22T09:00:00+08:00</published>

    
    <updated>2017-09-22T09:00:00+08:00</updated>
    

    
    <category term="Os" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;寻址的意义重大&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;b style=&#34;color:red&#34;&gt;&lt;/b&gt;&lt;/p&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;寻址方式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#8086&#34;&gt;8086&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;分类方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;立即寻址&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ex&#34;&gt;EX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;设计角度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;寄存器寻址&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ex_1&#34;&gt;EX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;设计角度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;疑问&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;直接寻址&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ex_2&#34;&gt;EX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;设计角度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;疑问&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_12&#34;&gt;寄存器间接寻址&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ex_3&#34;&gt;EX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_13&#34;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_14&#34;&gt;设计角度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_15&#34;&gt;变址寻址&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ex_4&#34;&gt;EX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_16&#34;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_17&#34;&gt;设计角度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_18&#34;&gt;基址寻址&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ex_5&#34;&gt;EX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_19&#34;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_20&#34;&gt;设计角度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_21&#34;&gt;基址+变址寻址&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ex_6&#34;&gt;EX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_22&#34;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_23&#34;&gt;设计角度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id=&#34;_1&#34;&gt;寻址方式&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;通常是指cpu指令中规定的寻找&amp;lt;操作数&amp;gt;所在地址的方式.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;8086&#34;&gt;8086&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_2&#34;&gt;分类方式&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;按照用什么载体去寻址划分[寄存器|内存|直接数]&lt;/li&gt;
&lt;li&gt;按照寻操作数种类划分[寄存器|内存|直接数]&lt;/li&gt;
&lt;li&gt;书上写过寻址方式扩大寻址空间这种事情,感觉说起来好别扭,寻址空间能有多大,不是地址线的数量决定的吗?难道不应该说增强了寻址的层次性.&lt;/li&gt;
&lt;li&gt;上面的三点谈论存在&lt;b style=&#39;color:red&#39;&gt;issue&lt;/b&gt;,所以只能作为参考依据&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_3&#34;&gt;立即寻址&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;ex&#34;&gt;EX&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;EX:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;05&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3100&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由上可以看出,操作数直接在指令中,直接取出来了&lt;/p&gt;
&lt;h4 id=&#34;_4&#34;&gt;设计角度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;好处&lt;br /&gt;
&lt;code&gt;[1]. 因为操作数在指令中,访存次数为1[取指令的时候,也可以认为在取指完访存为0],速度很快&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 书写很方便,一目了然&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;坏处&lt;br /&gt;
&lt;code&gt;[1]. 硬编码,不利于工程使用&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 好像有字节限制[待修改...]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主要应用&lt;br /&gt;
&lt;code&gt;[1]. 寄存器赋初值&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 存储单元赋初值&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;注意事项&lt;br /&gt;
&lt;code&gt;暂无&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_5&#34;&gt;寄存器寻址&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;ex_1&#34;&gt;EX&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;EX:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;指定某些cpu寄存器存放操作数.&lt;br /&gt;
这些寄存器可能为:&lt;br /&gt;
1. 通用数据寄存器(8/16bit)&lt;br /&gt;
2. [地址指针/变址]寄存器&lt;br /&gt;
3. 段寄存器&lt;/p&gt;
&lt;h4 id=&#34;_6&#34;&gt;设计角度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;好处&lt;br /&gt;
&lt;code&gt;[1]. 速度快&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. /*暂停*/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;坏处&lt;br /&gt;
&lt;code&gt;[1]. 存储值大小问题&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 不能实现内存读取数据&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点&lt;br /&gt;
&lt;code&gt;[1]. cpu内部执行,不占用总线周期&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 不用访问内存,&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_7&#34;&gt;疑问&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;段寄存器能用来寄存器寻址?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_8&#34;&gt;直接寻址&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;ex_2&#34;&gt;EX&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;EX:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3100&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#最好写够&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;等价于&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3100&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;计算&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3100&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_9&#34;&gt;设计角度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;好处&lt;br /&gt;
&lt;code&gt;[1]. 不知道实现了内存寻址的功能算不算&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;坏处&lt;br /&gt;
&lt;code&gt;[1]. 寻址范围受限于[]内长度,因为(DS)*10H已经做到极限了&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 访问主存获取操作数,不利于指令速度的提高&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[3]. 当数据的地址改变的时候,因为[3100H]为硬编码,需要修改&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用&lt;br /&gt;
&lt;code&gt;[1]. 自我感觉是操作那些内存地址固定的地方比如0x7c00&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_10&#34;&gt;说明&lt;/h4&gt;
&lt;p&gt;[8086特性,不要随意推广]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐含寄存器为DS&lt;/li&gt;
&lt;li&gt;允许段超越&lt;br /&gt;
&lt;code&gt;[1]. CS&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. SS&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[3]. ES&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;EX:  MOV AX, ES:[3100H]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b style=&#39;color:red&#39;&gt;注意了&lt;/b&gt;由于选定4个寄存器作为间接寻址的工具,所以隐含寄存器不是唯一的,如上所示,还能进行SS:BP寻址.&lt;/p&gt;
&lt;h4 id=&#34;_11&#34;&gt;疑问&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;暂时没有&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_12&#34;&gt;寄存器间接寻址&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;ex_3&#34;&gt;EX&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;EX:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;等价于&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;计算&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_13&#34;&gt;说明&lt;/h4&gt;
&lt;p&gt;[8086特性,不要随意推广]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;寄存器选用范围&lt;br /&gt;
&lt;code&gt;|SI--&amp;gt;DS|&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;|DI--&amp;gt;DS|&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;|BX--&amp;gt;DS|&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;|-------|&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;|BP--&amp;gt;SS|&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;应该允许段超越吧&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_14&#34;&gt;设计角度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;好处&lt;br /&gt;
&lt;code&gt;[1]. 和传统的间接寻址不一样,使用寄存器暂存偏移地址,减少了访问内存的次数&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 修正了直接寻址坏处[3], 消除硬编码问题&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[3]. 增大了寻址空间(目前还不太清楚)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;坏处&lt;br /&gt;
&lt;code&gt;[1]. 暂无&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_15&#34;&gt;变址寻址&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;ex_4&#34;&gt;EX&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;EX:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3100&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LABEL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;等价于&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3100&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;计算&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3100&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_16&#34;&gt;说明&lt;/h4&gt;
&lt;p&gt;[8086特性,不要随意推广]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[学长实践]SI和DI最好放在指定的位置,有的机器会出错&lt;br /&gt;
&lt;code&gt;MOV BX, [SI+2100H]     |---&amp;gt;SI(SOURCE)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;MOV [DI+1000H],  BX    |---&amp;gt;DI[DESTINATION]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书写格式&lt;br /&gt;
&lt;code&gt;可以有很多种书写格式&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[1]. MOV AX, TABLE[SI]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. MOV AX, [SI+TABLE]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[3]. MOV AX, [SI]+TABLE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐含寄存器 DS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;允许段超越&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_17&#34;&gt;设计角度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;好处&lt;br /&gt;
&lt;code&gt;[1]. 应该可以作为模块化的基础吧,可以实现段内的层次性寻址&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;坏处&lt;br /&gt;
&lt;code&gt;[1]. 暂无&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;应用&lt;br /&gt;
&lt;code&gt;[1]. 是面向用户设计的&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 用来解决程序在主存中的定位和扩大寻址空间问题&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_18&#34;&gt;基址寻址&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;ex_5&#34;&gt;EX&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;EX:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DATA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BLOCK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;等价于&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DATA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;计算&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DATA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_19&#34;&gt;说明&lt;/h4&gt;
&lt;p&gt;[8086特性,不要随意推广]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基址寄存器只使用BX/BP&lt;/li&gt;
&lt;li&gt;隐含寄存器 BX--&amp;gt;DS, BP---&amp;gt;SS&lt;/li&gt;
&lt;li&gt;允许段超越&lt;/li&gt;
&lt;li&gt;多种书写方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_20&#34;&gt;设计角度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;好处&lt;br /&gt;
    `[1]. 暂时没看出和变址寻址有什么卵区别,反正大家都允许段超越,可能对更高层次的抽象设计有影响吧&lt;/li&gt;
&lt;li&gt;应用&lt;br /&gt;
&lt;code&gt;[1]. 是面向系统设计的&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 访问字符向量和数组成的批数据&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_21&#34;&gt;基址+变址寻址&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;ex_6&#34;&gt;EX&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nl&#34;&gt;EX:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DATA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;等价于&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MOV&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DATA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;计算&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DATA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SI&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_22&#34;&gt;说明&lt;/h4&gt;
&lt;p&gt;[8086特性,不要随意推广]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;指令中规定一个基址寄存器和一个变址寄存器,两个不能同时出现&lt;/code&gt;&lt;br /&gt;
- 只允许一个基址寄存器和一个变址寄存器&lt;br /&gt;
- 隐含寄存器取决使用的基址寄存器 BX--&amp;gt;DS, BP---&amp;gt;SS&lt;br /&gt;
- 允许段超越&lt;br /&gt;
- 多种书写方式[以后补加]&lt;/p&gt;
&lt;h4 id=&#34;_23&#34;&gt;设计角度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;好处&lt;br /&gt;
&lt;code&gt;[1]. MMP,只看出对高级语言的二维数组设计有好处&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;坏处&lt;br /&gt;
&lt;code&gt;[1]. 暂无&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;应用&lt;br /&gt;
&lt;code&gt;[1]. 二维数组的访问&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/BS4.html</id>
    <title>数据采集</title>
    <link href="/Language/BS4.html" />
    <published>2017-08-27T23:00:00+08:00</published>

    
    <updated>2017-08-27T23:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=28872586&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;&lt;b style=&#39;color:#580000&#39;&gt;Intro&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#objectbeautifulsoup&#34;&gt;&lt;b style=&#39;color:#580000&#39;&gt;Object[BeautifulSoup]&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;&lt;b style=&#39;color:#700000&#39;&gt;构造参数&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#encode&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Encode&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parser&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Parser&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parse_only&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;parse_only&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#attribute&#34;&gt;&lt;b style=&#39;color:#700000&#39;&gt;Attribute&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#method&#34;&gt;&lt;b style=&#39;color:#700000&#39;&gt;Method&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#normal&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Normal&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#search&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Search&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#traversal&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Traversal&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;&lt;b style=&#39;color:#580000&#39;&gt;周末放映室&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;intro&#34;&gt;&lt;b style=&#39;color:#580000&#39;&gt;Intro&lt;/b&gt;&lt;/h2&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choose&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bs4&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;objectbeautifulsoup&#34;&gt;&lt;b style=&#39;color:#580000&#39;&gt;Object[BeautifulSoup]&lt;/b&gt;&lt;/h2&gt;
&lt;h3 id=&#34;_1&#34;&gt;&lt;b style=&#39;color:#700000&#39;&gt;构造参数&lt;/b&gt;&lt;/h3&gt;
&lt;h4 id=&#34;encode&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Encode&lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;输入编码其实可以自动检测,但是不一定准哦,输出指定UTF8&lt;/code&gt;&lt;br /&gt;
- from_encoding[以文档指定的编码解析]&lt;code&gt;E:from_encoding=&#34;iso-8859-8&#34;&lt;/code&gt;&lt;br /&gt;
- exclude_encodings[排除编码]&lt;code&gt;E: exclude_encodings=[&#34;ISO-8859-7&#34;]&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;parser&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Parser&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;xml&lt;/li&gt;
&lt;li&gt;lxml[推荐]&lt;/li&gt;
&lt;li&gt;html5lib&lt;/li&gt;
&lt;li&gt;html.parser[内置]&lt;/li&gt;
&lt;li&gt;&lt;a&gt;差异比较&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;parse_only&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;parse_only&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;SoupStrainer对象&lt;ul&gt;
&lt;li&gt;SoupStrainer(&#34;TAG_NAME&#34;)&lt;/li&gt;
&lt;li&gt;SoupStrainer(id=&#39;##&#39;)[选择器]&lt;/li&gt;
&lt;li&gt;SoupStrainer(method引用)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;attribute&#34;&gt;&lt;b style=&#39;color:#700000&#39;&gt;Attribute&lt;/b&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;soup.tag-------------[&lt;a&gt;获得标签&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.tag[&#39;Attr&#39;]---[&lt;a&gt;获得键值&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.contents-----[&lt;a&gt;获得.descendants子节点&lt;code&gt;&amp;lt;html&amp;gt;#&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.children------[&lt;a&gt;获得子节点&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.descendants-[&lt;a&gt;获得子孙节点&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.strings-----[&lt;a&gt;文档去标签化&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.stripped_strings---[&lt;a&gt;忽略空行去标签化&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.parent------[&lt;a&gt;父节点NONE&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.original_encoding---[&lt;a&gt;模糊识别编码&lt;/a&gt;] [&lt;a&gt;属&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;method&#34;&gt;&lt;b style=&#39;color:#700000&#39;&gt;Method&lt;/b&gt;&lt;/h3&gt;
&lt;h4 id=&#34;normal&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Normal&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;soup.prettify([编码默认utf8])[&lt;a&gt;格式化输出&lt;/a&gt;] [&lt;a&gt;IO&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.get_text()---[&lt;a&gt;获得文本&lt;/a&gt;]&lt;ul&gt;
&lt;li&gt;soup.get_text(&#34;character&#34;)[tag之间character分割]&lt;/li&gt;
&lt;li&gt;soup.get_text(&#34;|&#34;, strip=True)[&lt;a&gt;以‘|’分割标签,移除空白&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;search&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Search&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;soup.new_tag(&#34;a&#34;, href=&#34;url&#34;)[&lt;a&gt;增加新标签&lt;/a&gt;] [&lt;a&gt;增&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.new_string(&#34;string&#34;, Comment)[&lt;a href=&#39;Comment&#39; style=&#39;color:green&#39;&gt;&lt;b&gt;Comment&lt;/b&gt;&lt;/a&gt;] [&lt;a&gt;添加注释&lt;/a&gt;] [&lt;a&gt;增&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.find_all(&#39;tag&#39;)---[查找.标签] [得到.列表] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.find(id=&#39;#&#39;)------[查找.定位] [得到.唯一] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;tag&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;直接查找&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;ul&gt;
&lt;li&gt;soup.select(&#34;tag1 tag2&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;逐层查找&lt;/a&gt;] [&lt;a&gt;tag1 的子孙是tag2皆可&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;tag1 &amp;gt; tag2&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;tag1的儿子tag2&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;#tag1 ~ .class&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;tag1的所有class兄弟&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;#tag1 + .class&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;tag1的紧邻的class兄弟&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;.class&#34;) [&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;所有的class节点&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;[class~=some_name]&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;&lt;b style=&#39;color:red&#39;&gt;忘了&lt;/b&gt;&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;#id&#34;) [&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;tag#id&#34;) [&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#34;#id1，#id2&#34;)[&lt;a&gt;CSS选择器&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#39;a[href]&#39;)[&lt;a&gt;具有属性&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;ul&gt;
&lt;li&gt;soup.select(&#39;a[href=&#34;url&#34;]&#39;)[&lt;a&gt;确定指定属性值&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#39;a[href^=&#34;url&#34;]&#39;)[&lt;a&gt;属性值不为&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#39;a[href*=&#34;url&#34;]&#39;)[&lt;a&gt;局部匹配&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;soup.select(&#39;a[href*=&#34;url&#34;]&#39;)[&lt;a&gt;局部匹配&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;soup.select_one(&#34;选择器&#34;)[&lt;a&gt;返回查找回的第一个&lt;/a&gt;] [&lt;a&gt;查&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;traversal&#34;&gt;&lt;b style=&#39;color:#A00000&#39;&gt;Traversal&lt;/b&gt;&lt;/h4&gt;
&lt;h2 id=&#34;_2&#34;&gt;&lt;b style=&#39;color:#580000&#39;&gt;周末放映室&lt;/b&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;没想到center标签不支持width属性,只能自定义&amp;lt;div&amp;gt;了&lt;/code&gt;&lt;br /&gt;
&lt;center &gt;&lt;br /&gt;
&lt;div style=&#34;width:644px&#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/Paprika.png&#34; /&gt;&lt;br /&gt;
&lt;/div&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br /&gt;
&lt;embed height=&#34;415&#34; width=&#34;644&#34; quality=&#34;high&#34; allowfullscreen=&#34;true&#34; type=&#34;application/x-shockwave-flash&#34; src=&#34;//static.hdslb.com/miniloader.swf&#34; flashvars=&#34;aid=4887477&amp;page=1&#34; pluginspage=&#34;//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash&#34;&gt;&lt;/embed&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/入门/python05.html</id>
    <title>序列</title>
    <link href="/入门/python05.html" />
    <published>2015-10-07T20:20:37+08:00</published>

    
    <updated>2015-10-07T20:20:37+08:00</updated>
    

    
    <category term="入门" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=386830&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Intro&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;包含&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;操作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;操作符&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;输出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;内建函数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;字符串转义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unicode&#34;&gt;Unicode字符串&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_1&#34;&gt;包含&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;列表&lt;/li&gt;
&lt;li&gt;字符串&lt;br /&gt;
&lt;code&gt;分好几种,因为存在编码问题&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;元组&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_2&#34;&gt;特性&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;有序的&lt;/li&gt;
&lt;li&gt;可以通过下标偏移量访问到它的一个或者几个成员&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_3&#34;&gt;操作&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_4&#34;&gt;操作符&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;标准类型操作符&lt;a href=&#34;&#34;&gt;core_python4.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;序列类型操作符&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_5&#34;&gt;输出&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;格式化输出&lt;/li&gt;
&lt;li&gt;字符串模板&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;鉴于使用%d%s%u等等标识占位符类型实在是太...,比如又一次我就判断类型出错，不如使用字符串模板&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#from string import Template&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Template&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;hello ${name}, i am a ${sex}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;me&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;lyc&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mysex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;male&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;substitute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;me&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#39;hello lyc, i am a male&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;caution&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;safe_substitute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#39;hello ${name}, i am a male&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3 id=&#34;_6&#34;&gt;内建函数&lt;/h3&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;关于字符串操作的函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;标准类型&lt;br /&gt;
&lt;code&gt;[1]. cmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;序列类型&lt;br /&gt;
&lt;code&gt;[1]. enumrate&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. len&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[3]. max/min&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[4]. zip&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;c&#34;&gt;#zip use&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;helloa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;iamb&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#39;helloa&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#39;iamb&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;字符串函数&lt;/li&gt;
&lt;li&gt;raw_input()/input&lt;/li&gt;
&lt;li&gt;str/unicode&lt;/li&gt;
&lt;li&gt;chr[ASCII 0-255]&lt;br /&gt;
&lt;code&gt;print (chr(65))--&amp;gt;A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;unichr[unicode]&lt;br /&gt;
    ``&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ord&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串内建函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;string.expandtabs(num)&lt;/li&gt;
&lt;li&gt;string.capitalize()&lt;/li&gt;
&lt;li&gt;对string内容检索类函数&lt;br /&gt;
&lt;code&gt;string.isdigit()&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;string.islower()&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;string.strip&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;string.leftstrip&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;etc&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;_7&#34;&gt;字符串转义&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;特殊字符串与控制字符&lt;/li&gt;
&lt;li&gt;\x,\num&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;unicode&#34;&gt;Unicode字符串&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 已经可以应付大部分应用对 Unicode 的存储、访问、操作的需要了&lt;/p&gt;
&lt;/blockquote&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/About/computer.html</id>
    <title>做什么</title>
    <link href="/About/computer.html" />
    <published>2017-08-26T21:00:00+08:00</published>

    
    <updated>2017-08-26T21:00:00+08:00</updated>
    

    
    <category term="About" />
    

    
    <content type="html">&lt;p&gt;计算机的创造以及在其上一层又一层抽象的发展均是为解决问题而出现的,而非为创造问题的.&lt;br /&gt;
艰难的问题是原本存在的,但为了解决艰难的问题,所以使用分治的思想去拆分为大同小异的问题,但并非不可解决的.&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Os/instructure8086.html</id>
    <title>指令[8086]</title>
    <link href="/Os/instructure8086.html" />
    <published>2017-09-22T19:00:00+08:00</published>

    
    <updated>2017-09-22T19:00:00+08:00</updated>
    

    
    <category term="Os" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;b style=&#34;color:red&#34;&gt;&lt;/b&gt;&lt;/p&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#8086&#34;&gt;8086&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;数据传输(送)类&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;分类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mov&#34;&gt;MOV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pushpop&#34;&gt;PUSH/POP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id=&#34;8086&#34;&gt;8086&lt;/h1&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_1&#34;&gt;分类&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;数据传送指令&lt;/li&gt;
&lt;li&gt;算术运算指令&lt;/li&gt;
&lt;li&gt;逻辑运算和移位指令&lt;/li&gt;
&lt;li&gt;串操作指令&lt;/li&gt;
&lt;li&gt;控制转移指令&lt;/li&gt;
&lt;li&gt;处理器控制指令&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;粗略划分的话,分为三大类指令,数据传输,操作控制,数据运算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_2&#34;&gt;数据传输(送)类&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_3&#34;&gt;分类&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;通用数据传送指令&lt;br /&gt;
&lt;code&gt;[1]. MOV[一般传送]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. PUSH/POP[堆栈操作]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[3]. XCHG(Exchange)[交换]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[4]. XLAT(Translate)[查表转换]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输入输出指令&lt;br /&gt;
&lt;code&gt;[1]. IN&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. OUT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;目标地址传送指令&lt;br /&gt;
&lt;code&gt;[1]. LEA(Load Effective Address)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. LDS(Load pointer using DS)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[3]. LES(Load pointer using ES)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;标志传送指令&lt;br /&gt;
&lt;code&gt;[1]. LAHF(Load AH from Flags)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. SAHF(Store AH into Flags)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[3]. PUSHF(Push Flags onto stack)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[4]. POPF(Pop Flags off stack)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;mov&#34;&gt;MOV&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;格式&lt;br /&gt;
&lt;code&gt;mov dest, src; (src)-&amp;gt;(dest)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点&lt;br /&gt;
&lt;code&gt;[1]. 即可按字节(byte)传送,亦可按字[word]传送&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 可使用七大寻址方式&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[3]. 可以实现以下的传送&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;|____寄存器&amp;lt;--&amp;gt;(寄存器|存储器)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;|____立即数 --&amp;gt;(寄存器|存储器)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;|____段寄存器&amp;lt;--&amp;gt;(寄存器|存储器)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意&lt;br /&gt;
&lt;code&gt;[1]. 不可以修改CS的值，即CS不可以作为[目的操作数],[原因]-&amp;gt;CS存储的是当前所在段的段地址，一旦修改会造成麻烦.[这样做合法,但容易导致错误,因此不能这么做.]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 传送立即数时，一定要注意和目的操作数的数据类型进行匹配。尤其是传送到存储器的时候&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[3]. 不可以在段寄存器间或内存单元间传送数据&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[4]. 不可以修改或读取IP和标志位寄存器的数值，因此有专门的标志位传送指令&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[5]. 不可以把立即数直接传送到段寄存器中[拒绝用户自己划分段]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EXTENSION&lt;br /&gt;
&lt;code&gt;MOVSX &amp;amp; MOVZX[80386CPU]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;pushpop&#34;&gt;PUSH/POP&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;格式&lt;br /&gt;
&lt;code&gt;POP  DEST&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;PUSH SRC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;特点&lt;br /&gt;
&lt;code&gt;[1]. 操作的数据类型长度为16位[8086]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. push cs合法, pop cs不合法&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[3]. 栈底在高地址&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[4]. push压数据由高地址向低地址存放&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;[至于先sp-=2还是先存先pop都是为了方便存储与扔出]&lt;/p&gt;
&lt;p&gt;PUSH执行分两步&lt;br /&gt;
1. SP = SP - 2，SS:SP指向当前栈顶前面的单元，以当前栈顶前面的单元为新的栈顶&lt;br /&gt;
2. 将ax中的内容送到 SS:SP 指向的内存单元处，SS:SP 此时指向栈顶&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/push.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;POP见图中&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/pop.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;hr /&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/编码/character&encoding.html</id>
    <title>字符集与字符编码</title>
    <link href="/编码/character&encoding.html" />
    <published>2016-11-12T12:10:33+08:00</published>

    
    <updated>2016-11-12T12:10:33+08:00</updated>
    

    
    <category term="编码" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档类型：&lt;/strong&gt;&lt;a style=&#34;color:green;background-color:gray；font-style:bold&#34;&gt;[引]&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;暂无评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;什么是字符集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;什么是字符编码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#utf-8unicode&#34;&gt;UTF-8和Unicode的关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#utf-8&#34;&gt;UTF-8编码简介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_1&#34;&gt;什么是字符集&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;在介绍字符集之前，我们先了解下为什么要有字符集。我们在计算机屏幕上看到的是实体化的文字，而在计算机存储介质中存放的实际是二进制的比特流。那么在这两者之间的转换规则就需要一个统一的标准，否则把我们的U盘插到老式的电脑上，文档就乱码了；小伙伴QQ上传过来的文件，在我们本地打开又乱码了。于是为了实现转换标准，各种字符集标准就出现了。简单的说字符集就规定了某个文字对应的二进制数字存放方式（编码）和某串二进制数值代表了哪个文字（解码）的转换关系。 那么为什么会有那么多字符集标准呢？这个问题实际非常容易回答。问问自己为什么我们的插头拿到英国就不能用了呢？为什么显示器同时有DVI，VGA，HDMI，DP这么多接口呢？很多规范和标准在最初制定时并不会意识到这将会是以后全球普适的准则，或者处于组织本身利益就想从本质上区别于现有标准。于是，就产生了那么多具有相同效果但又不相互兼容的标准了。 说了那么多我们来看一个实际例子，下面就是&lt;code&gt;屌&lt;/code&gt;这个字在各种编码下的十六进制和二进制编码结果，怎么样有没有一种很屌的感觉？&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;字符集&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;16进制编码&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;对应的二进制数据&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;UTF-8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0xE5B18C&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1110 0101 1011 0001 1000 1100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;UTF-16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0x5C4C&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1011 1000 1001 1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GBK&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0x8CC5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1000 1100 1100 0101&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_2&#34;&gt;什么是字符编码&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;字符集只是一个规则集合的名字，对应到真实生活中，字符集就是对某种语言的称呼。例如：英语，汉语，日语。对于一个字符集来说要正确编码转码一个字符需要三个关键元素：&lt;b&gt;字库表（character repertoire）&lt;/b&gt;、&lt;b&gt;编码字符集（coded character set）&lt;/b&gt;、&lt;b&gt;字符编码（character encoding form）&lt;/b&gt;。其中字库表是一个相当于所有可读或者可显示字符的数据库，字库表决定了整个字符集能够展现表示的所有字符的范围。编码字符集，即用一个编码值code point来表示一个字符在字库中的位置。字符编码，将编码字符集和实际存储数值之间的转换关系。一般来说都会直接将code point的值作为编码后的值直接存储。例如在ASCII中A在表中排第65位，而编码后A的数值是0100 0001也即十进制的65的二进制转换结果。 看到这里，可能很多读者都会有和我当初一样的疑问：字库表和编码字符集看来是必不可少的，那既然字库表中的每一个字符都有一个自己的序号，直接把序号作为存储内容就好了。为什么还要多此一举通过字符编码把序号转换成另外一种存储格式呢？其实原因也比较容易理解：统一字库表的目的是为了能够涵盖世界上所有的字符，但实际使用过程中会发现真正用的上的字符相对整个字库表来说比例非常低。例如中文地区的程序几乎不会需要日语字符，而一些英语国家甚至简单的ASCII字库表就能满足基本需求。而如果把每个字符都用字库表中的序号来存储的话，每个字符就需要3个字节（这里以Unicode字库为例），这样对于原本用仅占一个字符的ASCII编码的英语地区国家显然是一个额外成本（存储体积是原来的三倍）。算的直接一些，同样一块硬盘，用ASCII可以存1500篇文章，而用3字节Unicode序号存储只能存500篇。于是就出现了UTF-8这样的变长编码。在UTF-8编码中原本只需要一个字节的ASCII字符，仍然只占一个字节。而像中文及日语这样的复杂字符就需要2个到3个字节来存储。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;utf-8unicode&#34;&gt;UTF-8和Unicode的关系&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;看完上面两个概念解释，那么解释UTF-8和Unicode的关系就比较简单了。Unicode就是上文中提到的编码字符集，而UTF-8就是字符编码，即Unicode规则字库的一种实现形式。随着互联网的发展，对同一字库集的要求越来越迫切，Unicode标准也就自然而然的出现。它几乎涵盖了各个国家语言可能出现的符号和文字，并将为他们编号。详见：Unicode on Wikipedia。Unicode的编号从0000开始一直到10FFFF共分为17个Plane，每个Plane中有65536个字符。而UTF-8则只实现了第一个Plane，可见UTF-8虽然是一个当今接受度最广的字符集编码，但是它并没有涵盖整个Unicode的字库，这也造成了它在某些场景下对于特殊字符的处理困难（下文会有提到）。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;utf-8&#34;&gt;UTF-8编码简介&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;为了更好的理解后面的实际应用，我们这里简单的介绍下UTF-8的编码实现方法。即UTF-8的物理存储和Unicode序号的转换关系。 UTF-8编码为变长编码。最小编码单位（code unit）为一个字节。一个字节的前1-3个bit为描述性部分，后面为实际序号部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个字节的第一位为0，那么代表当前字符为单字节字符，占用一个字节的空间。0之后的所有部分（7个bit）代表在Unicode中的序号。&lt;/li&gt;
&lt;li&gt;如果一个字节以110开头，那么代表当前字符为双字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后一个字节的除10外的部分（6个bit）代表在Unicode中的序号。且第二个字节以10开头&lt;/li&gt;
&lt;li&gt;如果一个字节以1110开头，那么代表当前字符为三字节字符，占用3个字节的空间。110之后的所有部分（5个bit）加上后两个字节的除10外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头&lt;/li&gt;
&lt;li&gt;如果一个字节以10开头，那么代表当前字节为多字节字符的第二个字节。10之后的所有部分（6个bit）和之前的部分一同组成在Unicode中的序号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体每个字节的特征可见下表，其中x代表序号部分，把各个字节中的所有x部分拼接在一起就组成了在Unicode字库中的序号&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cenalulu.github.io/linux/character-encoding/&#34;&gt;点击查看&lt;/a&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/regex01.html</id>
    <title>数学[R]背景</title>
    <link href="/Language/regex01.html" />
    <published>2017-08-26T21:00:00+08:00</published>

    
    <updated>2017-08-26T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;If you are a web Programer and you are not familiar with Regex,HeHe:-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;知识背景&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;数学背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;形式化语言描述&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;算子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;基本常量&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;涉及理论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;基本语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;工程应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;元字符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;脑洞时间&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;_1&#34;&gt;知识背景&lt;/h3&gt;
&lt;h4 id=&#34;_2&#34;&gt;数学背景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%85%8B%E8%8E%B1%E5%B0%BC%E4%BB%A3%E6%95%B0&#34;&gt;克莱尼代数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_3&#34;&gt;形式化语言描述&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;运算符(算子)+常量(变量)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;_4&#34;&gt;算子&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;顺序[联系算子.]&lt;/li&gt;
&lt;li&gt;选择[联系算子|]&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环[联系算子+、?、* ]&lt;/p&gt;
&lt;p&gt;实现了程序控制的三大基本基本结构&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;_5&#34;&gt;基本常量&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;“空集” ∅指示集合∅&lt;/li&gt;
&lt;li&gt;“空串” ε指示集合{ε}&lt;/li&gt;
&lt;li&gt;“文字字符” 在Σ中的a指示集合{a}&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_6&#34;&gt;涉及理论&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a&gt;形式语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a&gt;自动机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a&gt;自动控制理论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a&gt;....&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_7&#34;&gt;基本语法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个表达式可以称为一个pattern，匹配正则语言&lt;/li&gt;
&lt;li&gt;表达式结构&lt;ul&gt;
&lt;li&gt;选择&lt;/li&gt;
&lt;li&gt;数量限定[使用量词]&lt;/li&gt;
&lt;li&gt;作用范围和优先级[见下]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_8&#34;&gt;工程应用&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;优先级&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;符号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;最高&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;高&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;( )、(?: )、(?= )、[ ]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;中&lt;/td&gt;
&lt;td align=&#34;center&#34; n=&#34;n&#34;&gt;*、+、?、&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;低&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;^、$、中介字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;最低&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;|&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;_9&#34;&gt;元字符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&#34;&gt;WIKI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_10&#34;&gt;脑洞时间&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;正则 pattern    VS   三代目中的function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;正则 direction  VS   三代目的顺序&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;([|])*----QAQ脑子暂时短路这里以后补上&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/About/introSite.html</id>
    <title>关于此站</title>
    <link href="/About/introSite.html" />
    <published>2017-08-26T21:00:00+08:00</published>

    
    <updated>2017-08-26T21:00:00+08:00</updated>
    

    
    <category term="About" />
    

    
    <content type="html">&lt;h2 id=&#34;intro&#34;&gt;intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以Wiki的形式介绍知识，而并非真正的wiki&lt;/li&gt;
&lt;li&gt;文章&lt;strong&gt;Free&lt;/strong&gt;，我并不认为我的文章有多好，但他们绝对具有价值&lt;/li&gt;
&lt;li&gt;引用该网站文章需要经过本人同意,联系邮箱-&lt;a href=&#34;vmit@qq.com&#34;&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;此网站只会存储我知识量的&lt;strong&gt;10%&lt;/strong&gt;，仅仅因为数据安全性考虑&lt;/li&gt;
&lt;li&gt;可以任意金额&lt;strong&gt;打赏&lt;/strong&gt;，但并&lt;strong&gt;不强迫&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a&gt;打赏链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;_1&#34;&gt;误操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不能算是Bug,在书写latex公式时不能使用,由于刚开学,简直大脑生生锈,竟然忘记了发现问题本质原因的思想,好了，废话不多说,“bug”就是该网站使用的md解释引擎在遇到&lt;code&gt;\\&lt;/code&gt;时直接转译为&lt;code&gt;\&lt;/code&gt;致使&lt;code&gt;\\&lt;/code&gt;不能使用,想要使用的最简单办法就是将&lt;code&gt;\\&lt;/code&gt;换成&lt;code&gt;\\\&lt;/code&gt;,everything is ok.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[TOC]&lt;/code&gt;注意保持一个空行&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/pythonkey.html</id>
    <title>关键字[P]概念</title>
    <link href="/Language/pythonkey.html" />
    <published>2017-08-28T21:00:00+08:00</published>

    
    <updated>2017-08-28T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;更新....&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;文档类型：&lt;/strong&gt;&lt;b&gt;[ &lt;a href=&#34;https://www.ibm.com/developerworks/cn/opensource/os-cn-pythonwith/&#34;&gt;引&lt;/a&gt; ]&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[自.评论]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;这个女的竟然不为大众所知&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=409102911&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;关键字&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#with&#34;&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;with&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;自定义上下文管理器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;变量&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sysargv&#34;&gt;&lt;b&gt;sys.argv&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__name__&#34;&gt;&lt;b&gt;__name__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;方法&lt;/b&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#__str__&#34;&gt;&lt;b&gt;__str__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__repr__&#34;&gt;&lt;b&gt;__repr__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__iter__&#34;&gt;&lt;b&gt;__iter__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__next__&#34;&gt;&lt;b&gt;__next__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__getitem__&#34;&gt;&lt;b&gt;__getitem__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__getattr__&#34;&gt;&lt;b&gt;__getattr__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#__call__&#34;&gt;&lt;b&gt;__call__&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;_1&#34;&gt;关键字&lt;/h2&gt;
&lt;h3 id=&#34;with&#34;&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;with&lt;/b&gt;&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;_2&#34;&gt;概念&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;上下文管理协议（Context Management Protocol）&lt;/b&gt;：包含方法 &lt;code&gt;__enter__()&lt;/code&gt; 和 &lt;code&gt;__exit__()&lt;/code&gt;，支持该协议的对象要实现这两个方法。&lt;/li&gt;
&lt;li&gt;&lt;b&gt;上下文管理器（Context Manager）&lt;/b&gt;：支持上下文管理协议的对象，这种对象实现了&lt;code&gt;__enter__()&lt;/code&gt; 和 &lt;code&gt;__exit__()&lt;/code&gt; 方法。上下文管理器定义执行with 语句时要建立的运行时上下文，负责执行 with 语句块上下文中的进入与退出操作。通常使用 with 语句调用上下文管理器，也可以通过直接调用其方法来使用。&lt;/li&gt;
&lt;li&gt;&lt;b&gt;运行时上下文（runtime context）&lt;/b&gt;：由上下文管理器创建，通过上下文管理器的 &lt;code&gt;__enter__()&lt;/code&gt;和&lt;code&gt;__exit__()&lt;/code&gt; 方法实现，&lt;code&gt;__enter__()&lt;/code&gt; 方法在语句体执行之前进入运行时上下文，&lt;code&gt;__exit__()&lt;/code&gt; 在语句体执行完后从运行时上下文退出。with 语句支持运行时上下文这一概念。&lt;/li&gt;
&lt;li&gt;&lt;b&gt;上下文表达式（Context Expression）&lt;/b&gt;：with 语句中跟在关键字 with 之后的表达式，该表达式要返回一个上下文管理器对象。&lt;/li&gt;
&lt;li&gt;&lt;b&gt;语句体（with-body）&lt;/b&gt;：with 语句包裹起来的代码块，在执行语句体之前会调用上下文管理器的 &lt;code&gt;__enter__()&lt;/code&gt; 方法，执行完语句体之后执行&lt;code&gt;__exit__()&lt;/code&gt; 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;_3&#34;&gt;格式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;标准用法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context_expression&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]:&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;         &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;这里&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context_expression&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;要返回一个上下文管理器对象，该对象并不赋值给&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;子句中的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;如果指定了&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;子句的话，会将上下文管理器的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__enter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;方法的返回值赋值给&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;可以是单个变量，或者由“&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;”括起来的元组（不能是仅仅由“&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;”分隔的变量列表，必须加“&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;”）。&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;对一些内建对象进行改进，加入了对上下文管理器的支持，可以用于&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;语句中，比如可以自动关闭&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;文件、线程锁的自动获取和释放等。假设要对一个文件进行操作，使用&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;语句可以有如下代码：&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;操作文件对象[with]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&amp;#39;somefileName&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;somefile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;somefile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;        &lt;span class=&#34;c&#34;&gt;# ...more code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;操作文件对象[try/except]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;somefile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&amp;#39;somefileName&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;somefile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;        &lt;span class=&#34;c&#34;&gt;# ...more code&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;somefile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;with 语句执行过程描述&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context_expression&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__enter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# True 表示正常执行，即便有异常也忽略；False 表示重新抛出异常，需要对异常进行处理&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;8.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 如果使用了 as 子句&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;9.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 执行 with-body&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;10.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;11.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 执行过程中有异常发生&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;12.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;13.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 如果 __exit__ 返回 True，则异常被忽略；如果返回 False，则重新抛出异常&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;14.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 由外层代码对异常进行处理&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;15.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exc_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;16.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;17.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;18.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 正常退出，或者通过 statement-body 中的 break/continue/return 语句退出&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;19.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 或者忽略异常退出&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;20.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;21.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;22.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 缺省返回 None，None 在布尔上下文中看做是 False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;执行&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context_expression&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，生成上下文管理器&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context_manager&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;调用上下文管理器的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__enter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;方法；如果使用了&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;子句，则将&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__enter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;方法的返回值赋值给&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;子句中的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;执行语句体&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;不管是否执行过程中是否发生了异常，执行上下文管理器的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;方法，&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;方法负责执行“清理”工作，如释放资源等。如果执行过程中没有出现异常，&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;或者语句体中执行了语句&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，则以&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;作为参数&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;调用&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;如果执行过程中出现异常，则使用&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exc_info&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;得到的异常信息为参数&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;调用&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exc_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc_traceback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;出现异常时，&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;如果&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;traceback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;返回&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，则会重新抛出&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;异常，让&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;之外的语句逻辑来处理异常，这也是通用做法；如果返回&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;则忽略异常，不再对异常进行处理&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_4&#34;&gt;自定义上下文管理器&lt;/h4&gt;
&lt;p&gt;开发人员可以自定义支持上下文管理协议的类。自定义的上下文管理器要实现上下文管理协议所需要的 &lt;strong&gt;enter&lt;/strong&gt;() 和 &lt;strong&gt;exit&lt;/strong&gt;() 两个方法：&lt;br /&gt;
context_manager.&lt;strong&gt;enter&lt;/strong&gt;() ：进入上下文管理器的运行时上下文，在语句体执行前调用。with 语句将该方法的返回值赋值给 as 子句中的 target，如果指定了 as 子句的话&lt;br /&gt;
context_manager.&lt;strong&gt;exit&lt;/strong&gt;(exc_type, exc_value, exc_traceback) ：退出与上下文管理器相关的运行时上下文，返回一个布尔值表示是否对发生的异常进行处理。参数表示引起退出操作的异常，如果退出时没有发生异常，则3个参数都为None。如果发生异常，返回&lt;br /&gt;
True 表示不处理异常，否则会在退出该方法后重新抛出异常以由 with 语句之外的代码逻辑进行处理。如果该方法内部产生异常，则会取代由 statement-body 中语句产生的异常。要处理异常时，不要显示重新抛出异常，即不能重新抛出通过参数传递进来的异常，只需要将返回值设置为 False 就可以了。之后，上下文管理代码会检测是否 &lt;strong&gt;exit&lt;/strong&gt;() 失败来处理异常&lt;br /&gt;
下面通过一个简单的示例来演示如何构建自定义的上下文管理器。注意，上下文管理器必须同时提供 &lt;strong&gt;enter&lt;/strong&gt;() 和 &lt;strong&gt;exit&lt;/strong&gt;() 方法的定义，缺少任何一个都会导致 AttributeError；with 语句会先检查是否提供了 &lt;strong&gt;exit&lt;/strong&gt;() 方法，然后检查是否定义了 &lt;strong&gt;enter&lt;/strong&gt;() 方法。&lt;br /&gt;
假设有一个资源 DummyResource，这种资源需要在访问前先分配，使用完后再释放掉；分配操作可以放到 &lt;strong&gt;enter&lt;/strong&gt;() 方法中，释放操作可以放到 &lt;strong&gt;exit&lt;/strong&gt;() 方法中。简单起见，这里只通过打印语句来表明当前的操作，并没有实际的资源分配与释放。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义支持 with 语句的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DummyResource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Resource [&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__enter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[Enter &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]: Allocate resource.&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.&lt;/span&gt;       &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;# 可以返回不同的对象&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;8.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc_tb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;9.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[Exit &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]: Free resource.&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;10.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc_tb&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;11.&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[Exit &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]: Exited without exception.&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;12.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;13.&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[Exit &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]: Exited with exception raised.&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;14.&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;# 可以省略，缺省的None也是被看做是False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DummyResource 中的 &lt;strong&gt;enter&lt;/strong&gt;() 返回的是自身的引用，这个引用可以赋值给 as 子句中的 target 变量；返回值的类型可以根据实际需要设置为不同的类型，不必是上下文管理器对象本身。&lt;br /&gt;
&lt;strong&gt;exit&lt;/strong&gt;() 方法中对变量 exc_tb 进行检测，如果不为 None，表示发生了异常，返回 False 表示需要由外部代码逻辑对异常进行处理；注意到如果没有发生异常，缺省的返回值为 None，在布尔环境中也是被看做 False，但是由于没有异常发生，&lt;strong&gt;exit&lt;/strong&gt;() 的三个参数都为 None，上下文管理代码可以检测这种情况，做正常处理。&lt;br /&gt;
下面在 with 语句中访问 DummyResource ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用自定义的支持 with 语句的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DummyResource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Normal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[with-body] Run without exceptions.&amp;#39;&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DummyResource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;With-Exception&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[with-body] Run with exception.&amp;#39;&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;[with-body] Run with exception. Failed to finish statement-body!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第1个 with 语句的执行结果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with 语句1执行结果&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Resource&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Enter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Allocate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Run&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;without&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exceptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Free&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exited&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;without&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exception&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，正常执行时会先执行完语句体 with-body，然后执行 &lt;strong&gt;exit&lt;/strong&gt;() 方法释放资源。&lt;br /&gt;
第2个 with 语句的执行结果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with 语句2执行结果&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Resource&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;With&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Enter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;With&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Allocate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Run&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exception&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;With&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Free&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;With&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exited&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exception&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;raised&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Traceback&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;most&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;G:/demo&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;
&lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，with-body 中发生异常时with-body 并没有执行完，但资源会保证被释放掉，同时产生的异常由 with 语句之外的代码逻辑来捕获处理。&lt;br /&gt;
可以自定义上下文管理器来对软件系统中的资源进行管理，比如数据库连接、共享资源的访问控制等。Python 在线文档 &lt;b&gt;&lt;a href=&#34;http://docs.python.org/release/2.6/whatsnew/2.6.html#module-contextlib&#34;&gt;Writing Context Managers&lt;/a&gt;&lt;/b&gt; 提供了一个针对数据库连接进行管理的上下文管理器的简单范例。&lt;/p&gt;
&lt;h3 id=&#34;_5&#34;&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;变量&lt;/b&gt;&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;sysargv&#34;&gt;&lt;b&gt;sys.argv&lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sys&lt;/code&gt;模块有一个&lt;code&gt;argv&lt;/code&gt;变量，用list存储了命令行的所有参数。argv至少有一个元素，因为第一个参数永远是该&lt;code&gt;.py&lt;/code&gt;文件的名称，例如：&lt;/p&gt;
&lt;p&gt;运行&lt;code&gt;python hello.py&lt;/code&gt;获得的&lt;code&gt;sys.argv&lt;/code&gt;就是&lt;code&gt;[&#39;hello.py&#39;]&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;运行&lt;code&gt;python hello.py -t&lt;/code&gt;获得的sys.argv就是&lt;code&gt;[&#39;hello.py&#39;, &#39;-t&#39;]&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;__name__&#34;&gt;&lt;b&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#hello.py&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量&lt;code&gt;__name__&lt;/code&gt;置为&lt;code&gt;__main__&lt;/code&gt;，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是&lt;b style=&#39;color:green&#39;&gt;运行测试&lt;/b&gt;。&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;正经测试&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;模块导入测试&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hello&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;模块运行测试&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;python&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;答案&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;可以证明导入时&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;为模块名字&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;直接运行脚本时&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;为&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__main__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;python3 hello.py
Hello, world!
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;python hello.py World
Hello, World!
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;python3
Python 3.4.3 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;v3.4.3:9b73f1c3e601, Feb 23 2015, 02:52:03&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;GCC 4.2.1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Apple Inc. build 5666&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dot 3&lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt; on darwin
Type &lt;span class=&#34;s2&#34;&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class=&#34;s2&#34;&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for &lt;/span&gt;more information.
&amp;gt;&amp;gt;&amp;gt; import hello
&amp;gt;&amp;gt;&amp;gt;
&lt;span class=&#34;c&#34;&gt;#屁都没有&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_6&#34;&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;方法&lt;/b&gt;&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;__str__&#34;&gt;&lt;b&gt;&lt;code&gt;__str__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;与object绑定print方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;#调用__str__()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;__repr__&#34;&gt;&lt;b&gt;&lt;code&gt;__repr__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;交互模式下输出调用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;#调用__repr__()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;__iter__&#34;&gt;&lt;b&gt;&lt;code&gt;__iter__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;返回迭代对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;__next__&#34;&gt;&lt;b&gt;&lt;code&gt;__next__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;迭代对象调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;__getitem__&#34;&gt;&lt;b&gt;&lt;code&gt;__getitem__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;下标取值&lt;/li&gt;
&lt;li&gt;切片&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;__getattr__&#34;&gt;&lt;b&gt;&lt;code&gt;__getattr__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;动态返回属性&lt;/li&gt;
&lt;li&gt;动态返回函数 [可以写成高级函数或return 朗姆达表达式]&lt;/li&gt;
&lt;li&gt;可以实现链式调用chain()&lt;b style=&#39;color:green&#39;&gt;[很棒]&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;__call__&#34;&gt;&lt;b&gt;&lt;code&gt;__call__&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;任何类，只需要定义一个__call__()方法，就可以直接对实例进行调用&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;My name is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Student&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; s&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# self参数不要传入&lt;/span&gt;
My name is hi.
&lt;/pre&gt;&lt;/div&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Life/human_comment.html</id>
    <title>讽刺挖苦于评价标准</title>
    <link href="/Life/human_comment.html" />
    <published>2017-08-26T19:00:00+08:00</published>

    
    <updated>2017-08-26T19:00:00+08:00</updated>
    

    
    <category term="Life" />
    

    
    <content type="html">&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;开始乱谈&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;_1&#34;&gt;开始乱谈&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;人是一种很奇怪的生物，直到现在我都很奇怪自己存在的原因，&lt;b style=&#39;color:green&#39;&gt;存在即合理&lt;/b&gt;这句话在我看来是一种你无法反驳的诡辩，就像是说:&lt;b&gt;‘他是谁？’  ’人...‘&lt;/b&gt;,没有人给出真正的答案，至少我们目前对于地球而言是没有任何意义的，如果地球不想死的话，我们通过技术手段维护它的生命也算是为了维护地球的生命而存在，想要搞懂我们为何存在，我们需要先知道世界是什么？然而世界上的事情没有那么简单，世界真的使我们眼中的样子吗？&lt;br /&gt;
我们去认知世界的方式有很多种，视觉听觉触觉,然而每一种都有它的局限性，在漫长的Evolvement中，我们似乎得到了一种更加适合去探索世界本质的方式，就是逻辑推导...&lt;b&gt;跑偏了，这似乎是一篇谈论人类行为的文章&lt;/b&gt;&lt;br /&gt;
&lt;del&gt;简单的&lt;/del&gt;真正的开始&lt;br /&gt;
&lt;b&gt;背景:&lt;/b&gt;以在人类社会中的可生存能力不同划分阶级的一群人&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/intro_language.html</id>
    <title>语言介绍</title>
    <link href="/Language/intro_language.html" />
    <published>2017-08-25T21:00:00+08:00</published>

    
    <updated>2017-08-25T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;我认为能够形成一定的完备的系统，&lt;br /&gt;
且可以作为信源的符号集合可以成为语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[评论]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;同时推荐喀什的这首歌...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=27317272&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Language目录下的文章均属于&lt;a href=&#34;../Tool&#34;&gt;工具类&lt;/a&gt;的子集,语言本身就是描述与研究世界现象的工具.&lt;br /&gt;
由于选用的此Wiki暂时没有建立页面目录分级功能,故只能将其分离出来&lt;br /&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;人类语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;[1]视觉语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;图像语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;甲骨文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_4&#34;&gt;图片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_5&#34;&gt;文/数字语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_6&#34;&gt;代表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;[2]听觉语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_7&#34;&gt;语言的发声&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_8&#34;&gt;音乐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;[3]触觉语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_9&#34;&gt;盲文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_10&#34;&gt;计算机语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_11&#34;&gt;[一代目]机器语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_12&#34;&gt;特点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_13&#34;&gt;[二代目]汇编语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_14&#34;&gt;特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_15&#34;&gt;代表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_16&#34;&gt;[三代目]高级语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_17&#34;&gt;特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_18&#34;&gt;代表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_19&#34;&gt;[四代目]面向问题语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_20&#34;&gt;特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_21&#34;&gt;代表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_22&#34;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_23&#34;&gt;[五代目]人工智能语言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_24&#34;&gt;特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_25&#34;&gt;代表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_26&#34;&gt;语言概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_27&#34;&gt;语法/语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_28&#34;&gt;语法糖&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;position:relative; left:80px; &#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/fire.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;_1&#34;&gt;人类语言&lt;/h2&gt;
&lt;h3 id=&#34;1&#34;&gt;[1]视觉语言&lt;/h3&gt;
&lt;h4 id=&#34;_2&#34;&gt;图像语言&lt;/h4&gt;
&lt;h5 id=&#34;_3&#34;&gt;甲骨文&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;了解的很少哇&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;_4&#34;&gt;图片&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;一张图片透漏的信息的数量级极其高&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_5&#34;&gt;文/数字语言&lt;/h4&gt;
&lt;h5 id=&#34;_6&#34;&gt;代表&lt;/h5&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;各国文字&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;数学&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;理化公式等等&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;2&#34;&gt;[2]听觉语言&lt;/h3&gt;
&lt;h4 id=&#34;_7&#34;&gt;语言的发声&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;传说中的闻风丧旦&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_8&#34;&gt;音乐&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;啊哈哈，巴赫我现在还不太懂&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;推荐《音乐的奉献》如果你有这种欣赏水平的话&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;3&#34;&gt;[3]触觉语言&lt;/h3&gt;
&lt;h4 id=&#34;_9&#34;&gt;盲文&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;海伦凯勒&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;_10&#34;&gt;计算机语言&lt;/h2&gt;
&lt;h3 id=&#34;_11&#34;&gt;[一代目]机器语言&lt;/h3&gt;
&lt;h4 id=&#34;_12&#34;&gt;特点&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.01&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;位串组成&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;有关计算机三进制、二进制、十进制的权衡略过&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;过于繁琐&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;操作级别高&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_13&#34;&gt;[二代目]汇编语言&lt;/h3&gt;
&lt;h4 id=&#34;_14&#34;&gt;特点&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语法倾向自然语言，抽象的第一大步&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;过于依赖底层&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;助记码不适宜软件工程&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_15&#34;&gt;代表&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.8086&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;汇编&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_16&#34;&gt;[三代目]高级语言&lt;/h3&gt;
&lt;h4 id=&#34;_17&#34;&gt;特点&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;走向了更加自然地处理方式&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;走向性能与功能博弈的通用稳定状态&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;注重过程&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;出现了面向对象思想&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;可以作为程序员自由灵活设计的通用编程语言&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GPPL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;General&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Purpose&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Programming&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Language&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;图灵完备&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;出现了所谓的拥护者&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;摊手&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;8.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;学习的人占领市场，出现普遍水平地下的社会现状&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_18&#34;&gt;代表&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Java&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Perl&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PHP&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JavaScript&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_19&#34;&gt;[四代目]面向问题语言&lt;/h3&gt;
&lt;h4 id=&#34;_20&#34;&gt;特点&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DSL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DPP&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;探索式编程&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;人员发挥空间小，多数扔给了引擎&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;多数非图灵完备&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;重在目标而非过程、重在描述而非实现&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_21&#34;&gt;代表&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;SQL&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SAS&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SPSS&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LaTeX&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Regex&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Markdown&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HTML&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CSS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_22&#34;&gt;说明&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Markdown&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HTML&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CSS&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;是我自认为可以分为此类&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_23&#34;&gt;[五代目]人工智能语言&lt;/h3&gt;
&lt;h4 id=&#34;_24&#34;&gt;特点&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;学术界争议大，小小码农不敢造次&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;_25&#34;&gt;代表&lt;/h4&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Prolog&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Mercury&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OPS5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;_26&#34;&gt;语言概念&lt;/h2&gt;
&lt;h3 id=&#34;_27&#34;&gt;语法/语法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In linguistics, grammar is the set of structural rules governing the composition of clauses, phrases, and words in any given natural language. The term refers also to the study of such rules, and this field includes morphology, syntax, and phonology, often complemented by phonetics, semantics, and pragmatics.&lt;br /&gt;
在语言学中,语法是句子、短语和词汇在任何给定的自然语言中的结构规则组成。这个领域也包括这些规则的研究,这一领域包括形态学、语构、语音,常常辅以语音学,语义学和语用学。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;center style=&#34;&#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/parser.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;词法：语言的最小组成单元&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;名代数冠介连形&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语法：连接语言单元的规则&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语义：连接上下文&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;得到的语言含义&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_28&#34;&gt;语法糖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;$(\lambda)$ 演算的创始人创造&lt;/li&gt;
&lt;li&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;[介绍]意指那些没有给计算机语言添加新功能，而只是对人类来说更“甜蜜”的语法。语法糖往往给程序员提供了更实用的编码方式，有益于更好的编码风格，更易读。&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b style=&#39;color:#67ac82&#39;&gt;[Example]：A[i] &amp;lt;---&amp;gt; *(A+i) 面向对象更像是面向过程的sugar &lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Os/visualProgram01.html</id>
    <title>[windows纲]api编程</title>
    <link href="/Os/visualProgram01.html" />
    <published>2017-08-31T21:00:00+08:00</published>

    
    <updated>2017-08-31T21:00:00+08:00</updated>
    

    
    <category term="Os" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;电脑维修中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;沉浸在思想的牢笼里.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#win&#34;&gt;Win图形设计与接口&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#_1&#34;&gt;设备接口[图形]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2&#34;&gt;代码实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3&#34;&gt;效果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;windows 编程是基于消息驱动的,当消息到来时,应用程序就调用消息映射函数,但他是如何做到的？&lt;br /&gt;
    - [乱答]这个应该是把消息的调用方提升给了操作系统,操作系统驱动API？&lt;br /&gt;
    - 找到答案了，果然出现了控制权的移交&lt;br /&gt;
&lt;code&gt;在程序执行时,系统会创建一个能控制他运行的数据结构,叫做pcb,pcb不断的查询消息队列&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;一旦出现消息,就会根据相应的消息号去调用消息映射函数&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;win&#34;&gt;Win图形设计与接口&lt;/h3&gt;
&lt;h4 id=&#34;_1&#34;&gt;设备接口[图形]&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;图形设备接口[GDI]&lt;/li&gt;
&lt;li&gt;[K1]GDI提供了一系列函数与数据结构&lt;br /&gt;
&lt;code&gt;[作用] 实现了程序开发者与硬件设备的隔离&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[1].  GDI管理了一个结构叫做设备环境，其中包含一些有关设备的信息&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[K2]应用程序可以使用属性函数设置设备的&lt;b&gt;操作方式&lt;/b&gt;和&lt;b&gt;当前的选择&lt;/b&gt;&lt;br /&gt;
&lt;code&gt;[操作方式] 文本和背景颜色/混色方式/映射方式&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[当前选择] 指绘图时使用哪个绘图对象&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[K3] 映像模式储存在设备环境中    &lt;/li&gt;
&lt;li&gt;[FAQ1]GDI为什么能够实现相关函数？&lt;br /&gt;
&lt;code&gt;[1]. windows下图形图像和文字设备驱动和硬件都支持这些函数，这些设备驱动都实现图形设备函数&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 所以绘图前要加载驱动程序&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[FAQ2]什么是设备描述表？它是怎样被创建的&lt;br /&gt;
&lt;code&gt;[1]. 简称DC，定义了一系列的图形对象及其属性的结构&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[2]. 应用程序使用设备环境函数创建DC来获得设备环境句柄，设备环境句柄指向设备相关信息，用户通过设备环境句柄来访问输出设备&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[FAQ3]窗口与视口的关系&lt;br /&gt;
&lt;code&gt;窗口依赖于逻辑坐标，可以是程序员想要的规定的所有尺度，由映像模式确定&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;视口依赖于设备坐标，由输出设备决定（如像素点）&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;窗口与视口的原点和范围都可以由程序员指定&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[FAQ4]窗口实例与窗口句柄有什么关系&lt;br /&gt;
&lt;code&gt;HWND与HINSTANCE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_2&#34;&gt;代码实现&lt;/h3&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cm&#34;&gt;/*You should concern about the window &amp;#39;class&amp;#39;, it&amp;#39;s not the concept of OOP&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*if you are familar with c programing,it&amp;#39;s easy for you to know the meaning&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*of the &amp;#39;class&amp;#39; , JUST A &amp;#39;Struct&amp;#39; type....&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;windows.h&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;LRESULT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CALLBACK&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;WndProc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HWND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UINT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WPARAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LPARAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Ipaint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HWND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WINAPI&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;WinMain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HINSTANCE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HINSTANCE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hPreInst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LPSTR&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lpszCmdLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nCmdShow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;MSG&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;WNDCLASS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wndclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;classname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;painting....&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;wndclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//defalut type&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wndclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lpfnWndProc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WndProc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//msg resolve function bundle&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wndclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cbClsExtra&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//no extends for window class&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wndclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cbWndExtra&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//not extends for window instance&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wndclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hInstance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// current instance handle&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wndclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hIcon&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LoadIcon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IDI_APPLICATION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wndclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hCursor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LoadCursor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IDI_APPLICATION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wndclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hbrBackground&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HBRUSH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetStockObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WHITE_BRUSH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wndclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lpszClassName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;classname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wndclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lpszMenuName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// NO MENU&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RegisterClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wndclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//register window class&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;MessageBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;register fault!!!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;提示&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MB_ICONERROR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;HWND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hwnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lpszTitle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;绘图&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hwnd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CreateWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;classname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;lpszTitle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;WS_OVERLAPPEDWINDOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// window type&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;CW_USEDEFAULT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;CW_USEDEFAULT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;CW_USEDEFAULT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;CW_USEDEFAULT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;hInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ShowWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hwnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nCmdShow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//nCmdShow---&amp;gt; the type of appearence&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;UpdateWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hwnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// paint the user area&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;TranslateMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;DispatchMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wParam&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// additional message&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;LRESULT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CALLBACK&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;WndProc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HWND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hwnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UINT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WPARAM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wParam&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LPARAM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lParam&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WM_PAINT&lt;/span&gt;:
            &lt;span class=&#34;n&#34;&gt;Ipaint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hwnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WM_DESTROY&lt;/span&gt;:
            &lt;span class=&#34;n&#34;&gt;PostQuitMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;default:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DefWindowProc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hwnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wParam&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lParam&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Ipaint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HWND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hwnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;PAINTSTRUCT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;HDC&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hdc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;HPEN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hpen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;HBRUSH&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hbrushHatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;HBRUSH&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hbrush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hdc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BeginPaint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hwnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// get device context handle&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hpen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HPEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetStockObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BLACK_PEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// get sys&amp;#39;s black brush&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;SelectObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hdc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hpen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// choose the hpen in hdc&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Rectangle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hdc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hbrush&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CreateSolidBrush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RGB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;SelectObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hdc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hbrush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;RoundRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hdc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// paint round rect&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;DeleteObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hbrush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// create cross-shaped shade brush&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hbrushHatch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CreateHatchBrush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HS_CROSS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RGB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;SelectObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hdc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hbrushHatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Ellipse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hdc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;DeleteObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hbrushHatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;EndPaint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hwnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;_3&#34;&gt;效果&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;position:relative;&#34;&gt;&lt;br /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/srcmit/source/wiki/photo/EX2.2.png&#34; /&gt;&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Language/regex03.html</id>
    <title>正则[R|P]编程</title>
    <link href="/Language/regex03.html" />
    <published>2017-09-08T21:00:00+08:00</published>

    
    <updated>2017-09-08T21:00:00+08:00</updated>
    

    
    <category term="Language" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;思索中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;br /&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=286999&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;规律之外,无语无言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&#34;toc&#34;&gt;&lt;span class=&#34;toctitle&#34;&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#perl&#34;&gt;perl&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#904&#34;&gt;9/04更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#918&#34;&gt;9/18更新&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;perl&#34;&gt;perl&lt;/h3&gt;
&lt;h4 id=&#34;904&#34;&gt;9/04更新&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;简单掌握&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变量的特殊性 &lt;code&gt;$variable&lt;/code&gt;，面临引号输出也不会解体,除非转义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运算符的特殊性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;=～ &lt;code&gt;匹配&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;==  &lt;code&gt;相等&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;=   &lt;code&gt;赋值&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编码运行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;welcome to use perl test \n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;please input the value:\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$well&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;chomp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$well&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$well&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=~&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt; /^[0-9]+$/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;你是数字\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;不是数字\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; perl -w &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; welcome to use perl &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;    &lt;/span&gt;please input the value:
    101
    你是数字
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;918&#34;&gt;9/18更新&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;注意精通regex  p49总结&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;sr&#34;&gt;s/regex/replacement/i&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;忽略大小写的替换&lt;/span&gt;
&lt;span class=&#34;sr&#34;&gt;s/regex/replacement/g&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;所有行都进行替换&lt;/span&gt;
&lt;span class=&#34;sr&#34;&gt;m/regex/i&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;或者&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;可以不用加&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;意会即可&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;任务来了,老板给了一个超级大的文件,是的html文件(然而所有的代码都挤在了一块),他说让我让这个文档层次感显示,小意思,我去做,但是&lt;b&gt;mmp&lt;/b&gt;914行,本来我说使用&lt;b&gt;notepad++&lt;/b&gt;毕竟能匹配括号,但是这并没有卵用啊,914行,所以说我只能借助正则婊了,但是完全不会用啊摔!那么只能先使用perl把标签分出来,让其单行显示&lt;/p&gt;
&lt;p&gt;&lt;b style=&#39;color:red&#39;&gt;v0.01&lt;/b&gt;&lt;/p&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;@meta$&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;perl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;s/(&amp;lt;(!| )*([a-z!-])+ *[^&amp;gt;&amp;lt;]*&amp;gt;)/\n\1\n/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/home/m&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eta&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/Desktop/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;@meta$&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;perl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;s/(&amp;lt;\/ *[^&amp;gt;&amp;lt;]+ *&amp;gt;)/\n\1\n/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/home/m&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eta&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/Desktop/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;真是呵呵,现在的自己好辣鸡,而且还是分两次做完的单行&lt;/p&gt;
&lt;p&gt;&lt;b&gt;部分解释&lt;/b&gt;&lt;br /&gt;
1. 其实在perl中&lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt;, 可以代替 &lt;code&gt;\1&lt;/code&gt;, &lt;code&gt;\2&lt;/code&gt;, &lt;code&gt;\3&lt;/code&gt;作为捕获文本的&lt;br /&gt;
2. 我们都知道正则&lt;code&gt;()&lt;/code&gt; 可以用来捕获文本,但是如果不需要捕获,它偏偏捕获了,这样只会肆意拓展$型变量的长度,所以使用了非捕获型规则,即&lt;code&gt;(?:...)&lt;/code&gt;, 但凡出现在这个括号里面,都不会被捕获的.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;那么我现在有一个&lt;b style=&#39;color:red&#39;&gt;疑问&lt;/b&gt;还没有&lt;del&gt;思考出来&lt;/del&gt;实践验证出来, &lt;code&gt;(|)&lt;/code&gt; 会 不会被捕获&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;b&gt;Perl参数含义&lt;/b&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;参数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-p&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;对目标文件的每一行进行查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-w&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;like gdb, 和warning一个意思,打开perl额外警告功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-e&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;表示整个程序接在命令后面[&lt;b style=&#39;color:green&#39;&gt;不明觉li&lt;/b&gt;]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
    
    
  </entry>
  
    
  <entry>
    <id>/Os/inital.html</id>
    <title>linux概论</title>
    <link href="/Os/inital.html" />
    <published>2017-08-30T21:00:00+08:00</published>

    
    <updated>2017-08-30T21:00:00+08:00</updated>
    

    
    <category term="Os" />
    

    
    <content type="html">&lt;p&gt;&lt;strong&gt;文档状态：&lt;/strong&gt;&lt;a style=&#34;color:red;background-color:gray&#34;&gt;编辑中....&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;维基百科讲过许多,过分谈论反倒是令人厌烦,为什么使用linux那是有原因的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日音乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hlcode&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[网评]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;谢谢网易云音乐让我知道真相.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=624751&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;h2 id=&#34;_1&#34;&gt;起始&lt;/h2&gt;
&lt;h3 id=&#34;_2&#34;&gt;认识&lt;/h3&gt;
&lt;p&gt;我是从大一开始接触linux的,在这个时间段也就是2015-2016,linux发行版早已经不是以前的交互性差,难以操纵的命令行模式,他也有了自己的开源图像引擎,开始有很多软件在他的平台上进行开发,金山、网易、各种著名IDE都在Linux有了自己的dev Branch,Linux早已经不再难学,鼠标交互,主题美化,游戏软件,连终端也不放过,linux看起来像一件艺术品,更小的内存需求,更完备的开发环境,更简洁的操作模式,我身边也有很多人投身于linux的”开发“中,然而这正是错误的开始,过于依赖于图形交互模式,就类似于学了一个类似的windows系统,到头来什么也不会,也许只是能在不懂的人面前装13,但是这如果是你学习的意义的话,linux没什么好学的.&lt;/p&gt;
&lt;h3 id=&#34;_3&#34;&gt;名词&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OpenGL&lt;/li&gt;
&lt;li&gt;Directx&lt;/li&gt;
&lt;li&gt;Unity&lt;/li&gt;
&lt;li&gt;opencv&lt;/li&gt;
&lt;li&gt;gnome&lt;/li&gt;
&lt;li&gt;kde&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gtk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;竟然有人搞混&lt;code&gt;&amp;gt;&lt;/code&gt;和&lt;code&gt;|&lt;/code&gt;，&lt;code&gt;&amp;gt;&lt;/code&gt;是用来重定向IO，&lt;code&gt;|&lt;/code&gt;是用来将数据作为参数流向管道的另一端&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
    
    
  </entry>
  
</feed>
